<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS on 7sharp9</title>
    <link>https://7sharp9.github.io/tags/ios/</link>
    <description>Recent content in iOS on 7sharp9</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Dave Thomas</copyright>
    <lastBuildDate>Tue, 11 Apr 2017 23:11:55 +0100</lastBuildDate>
    
	<atom:link href="https://7sharp9.github.io/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>I want to tell you a storyboard</title>
      <link>https://7sharp9.github.io/2017/04/11/i-want-to-tell-you-a-storyboard/</link>
      <pubDate>Tue, 11 Apr 2017 23:11:55 +0100</pubDate>
      
      <guid>https://7sharp9.github.io/2017/04/11/i-want-to-tell-you-a-storyboard/</guid>
      <description>&lt;p&gt;So as promised here&amp;rsquo;s a post with more detail on the iOS designer provider that I presented as part of my talk at &lt;a href=&#34;https://skillsmatter.com/conferences/8053-f-sharp-exchange-2017&#34;&gt;fsharpX 2017&lt;/a&gt; The talk is entitled &lt;a href=&#34;https://skillsmatter.com/skillscasts/10042-lightning-talk-session-expanding-the-horizons-of-mobile-development&#34;&gt;Expanding the Horizons of Mobile Development&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adding Touch To SpriteKit</title>
      <link>https://7sharp9.github.io/2013/09/29/2013-09-29-adding-touch-to-spritekit/</link>
      <pubDate>Sun, 29 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://7sharp9.github.io/2013/09/29/2013-09-29-adding-touch-to-spritekit/</guid>
      <description>Only a quick post this week. Last time we looked at SpriteKit and how to add some particle emmiters to simulate a star-field and exhaust on a spaceship, this time lets look at adding some touch based input to move the spaceship around. The first thing we need to do is add a type of gesture recogniser, there are various built in gestures:
 UITapGestureRecognizer UIPinchGestureRecognizer UIRotationGestureRecognizer UISwipeGestureRecognizer UIPanGestureRecognizer UIScreenEdgePanGestureRecognizer UILongPressGestureRecognizer  From the names above it&amp;rsquo;s pretty easy to get a feel for how they should be used, you can create your own subclass of UIGestureRecognizer if you need a custom one.</description>
    </item>
    
    <item>
      <title>Spritekit particle fun</title>
      <link>https://7sharp9.github.io/2013/09/20/2013-09-20-sprite-kit-particle-fun/</link>
      <pubDate>Fri, 20 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://7sharp9.github.io/2013/09/20/2013-09-20-sprite-kit-particle-fun/</guid>
      <description>I have been meaning to write this post for quite a while now. Since the first announcement of the iOS7 beta I immediately saw the list of new API&amp;rsquo;s and SpriteKit caught my eye straight away. I only managed to get time to briefly look over the API and saw that is wasn&amp;rsquo;t the usual trashy API with a million method overloads, internal mutation sucker punch type thing. It seems to be very declarative and intuitive, which makes for a nice change.</description>
    </item>
    
    <item>
      <title>iOS async revisited</title>
      <link>https://7sharp9.github.io/2013/04/18/2013-04-18-ios-async-revisited/</link>
      <pubDate>Thu, 18 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://7sharp9.github.io/2013/04/18/2013-04-18-ios-async-revisited/</guid>
      <description>In this post weare going to look as async again, but from the perspective of F#.
Xamarin Evolve 2013   I have been watching the Xamarin Evolve conference this week and it was good to see Miguel announce full support for F#. Those that follow me on twitter etc, will know that I have been doing F# for quite a while in MonoDevelop and Xamarin Studio. The new support currently entails some new project templates so that you can easily create epic new F# Apps without having to refer to my blog.</description>
    </item>
    
    <item>
      <title>A little bit of iOS async</title>
      <link>https://7sharp9.github.io/2013/04/16/2013-04-16-a-little-bit-of-ios-async/</link>
      <pubDate>Tue, 16 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://7sharp9.github.io/2013/04/16/2013-04-16-a-little-bit-of-ios-async/</guid>
      <description>I was going to title this post as &amp;lsquo;Now for something completely different&amp;rsquo; but felt that a little bit too Pythonesque, and when I thought about it a bit it isn&amp;rsquo;t really completely just slightly different, namely C# rather than my usual F# posts. Right, enough of the waffling, this post is a little tour into the relatively unknown area of async on iOS. Xamarin announced the alpha preview of async await on March 11th this year (2013).</description>
    </item>
    
    <item>
      <title>MonoTouch and F# part II</title>
      <link>https://7sharp9.github.io/2013/02/07/2013-02-04-monotouch-and-fsharp-part-ii/</link>
      <pubDate>Thu, 07 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://7sharp9.github.io/2013/02/07/2013-02-04-monotouch-and-fsharp-part-ii/</guid>
      <description>In the last post we left at the point where everything was running fine and dandy on the Simulator. So what happens if we compile for the real hardware?
Lets change the active configuration to Debug|iPhone and hit build, what do we get?Boom! Error MT2002: Could not resolve: FSharp.Core, Version=4.3.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a (MT2002) (singleview)
So I guess we need to tell it where the FSharp.Core.dll is, lets add a reference to it:</description>
    </item>
    
    <item>
      <title>MonoTouch and F# part I</title>
      <link>https://7sharp9.github.io/2013/02/03/2013-02-03-monotouch-and-fsharp-part-i/</link>
      <pubDate>Sun, 03 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://7sharp9.github.io/2013/02/03/2013-02-03-monotouch-and-fsharp-part-i/</guid>
      <description>MonoTouch and F# that would be a cool duo right?
Well let me explain what needs to be done and why to get this pair working together.
I heard rumours a while ago that F# and MonoTouch would not play together nicely because of limitations in the ahead of time compilation (AOT). So I thought I would either prove or disprove this with some concentrated hacking. How hard can it be?</description>
    </item>
    
  </channel>
</rss>