<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ios on 7sharp9</title>
    <link>http://7sharpnine.com/tags/ios/</link>
    <description>Recent content in Ios on 7sharp9</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Dave Thomas</copyright>
    <lastBuildDate>Sun, 29 Sep 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://7sharpnine.com/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Adding Touch To SpriteKit</title>
      <link>http://7sharpnine.com/2013/09/29/2013-09-29-adding-touch-to-spritekit/</link>
      <pubDate>Sun, 29 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2013/09/29/2013-09-29-adding-touch-to-spritekit/</guid>
      <description>&lt;p&gt;Only a quick post this week.  Last time we looked at &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/GraphicsAnimation/Conceptual/SpriteKit_PG/Introduction/Introduction.html&#34;&gt;SpriteKit&lt;/a&gt; and how to add some particle emmiters to simulate a star-field and exhaust on a spaceship, this time lets look at adding some touch based input to move the spaceship around.  &lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;The first thing we need to do is add a type of gesture recogniser, there are various built in &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/uikit/reference/UIGestureRecognizer_Class/Reference/Reference.html#//apple_ref/occ/cl/UIGestureRecognizer&#34;&gt;gestures&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UITapGestureRecognizer&lt;/li&gt;
&lt;li&gt;UIPinchGestureRecognizer&lt;/li&gt;
&lt;li&gt;UIRotationGestureRecognizer&lt;/li&gt;
&lt;li&gt;UISwipeGestureRecognizer&lt;/li&gt;
&lt;li&gt;UIPanGestureRecognizer&lt;/li&gt;
&lt;li&gt;UIScreenEdgePanGestureRecognizer&lt;/li&gt;
&lt;li&gt;UILongPressGestureRecognizer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the names above it&amp;rsquo;s pretty easy to get a feel for how they should be used, you can create your own subclass of &lt;code&gt;UIGestureRecognizer&lt;/code&gt; if you need a custom one.&lt;/p&gt;

&lt;p&gt;Gesture recognizers come in two types continuous and discrete.  A discrete gesture is single action like tap or double tap and results in a single action been sent.  A continuous gesture is like pan, swipe, or rotate which is interpreted as a series of messages being sent.&lt;/p&gt;

&lt;p&gt;For our purposes we are going to be using the &lt;code&gt;UIPanGestureRecognizer&lt;/code&gt; which is a continuous gesture.  What we need to do is create a function that sets up the &lt;code&gt;UIPanGestureRecognizer&lt;/code&gt; ready for us to use.  We do that by creating an instance of the &lt;code&gt;UIPanGestureRecognizer&lt;/code&gt; and add it to our view:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let setupGestures() =
    use panRecogniser = new UIPanGestureRecognizer(x, MonoTouch.ObjCRuntime.Selector(&amp;quot;PanSelector&amp;quot;))
    x.View.AddGestureRecognizer(panRecogniser)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we are also using a selector, which means we can use an attribute like &lt;code&gt;[&amp;lt;Export(&amp;quot;PanSelector&amp;quot;)&amp;gt;]&lt;/code&gt; to define the function that will be used as the callback.  Lets define that function now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let OnLabelPan( sender: UIGestureRecognizer) =
    match sender with
    | :? UIPanGestureRecognizer as pan -&amp;gt;
        match pan.State with
        | UIGestureRecognizerState.Changed -&amp;gt;
            let movement = pan.TranslationInView(x.View)
            let move = SKAction.MoveBy(movement.X * 1.75f, -movement.Y * 1.75f, 0.05)
            let ship = scene.GetChildNode(&amp;quot;Ship&amp;quot;)
            ship.RunAction(move)
            pan.SetTranslation(PointF.Empty, x.View)
        | _ -&amp;gt; ()
    | _ -&amp;gt; ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First of all we use pattern matching to do a type match &lt;code&gt;| :? UIPanGestureRecognizer as pan -&amp;gt;&lt;/code&gt;.  This ensures we are dealing with the &lt;code&gt;UIPanGestureRecognizer&lt;/code&gt; type.  We might of applied multiple gesture recognisers to the view like swipe and rotate and had this function deal with all of them, we can handle this nicely with the type match.&lt;/p&gt;

&lt;p&gt;We can now use a pattern match on the state of the gesture recogniser to react to just the changed event &lt;code&gt;UIGestureRecognizerState.Changed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As mentioned previously the pan gesture is continuous and will send a changed action whenever the finger moves on the screen, this gives us a chance to retrieve the current translation of the pan in the current view.  We do this by calling &lt;code&gt;pan.TranslationInView(x.View)&lt;/code&gt;.  We can now apply a movement to our spaceship sprite by creating an action using &lt;code&gt;SKAction.MoveBy&lt;/code&gt;.   We multiply the translation retrieved by 1.75 to allow for the initial distance the the pan gesture moves before triggering.  We also invert the Y axis so that the spaceship sprite moves in the correct Y direction.  The final parameter is the time the action runs for, we use a really small time of 0.05 (50ms).  This stops the spaceship sprite from moving like an ordinary mouse pointer, just enough inertia to make it feel smooth.&lt;/p&gt;

&lt;p&gt;To apply the action to the spaceship all we need to do is retrieve it from the scene using &lt;code&gt;scene.GetChildNode&lt;/code&gt; and call the &lt;code&gt;RunAction&lt;/code&gt; function passing in the action we just created.&lt;/p&gt;

&lt;p&gt;Finally we set the pan translation back to zero using: &lt;code&gt;pan.SetTranslation(PointF.Empty, x.View)&lt;/code&gt;, this ensures that the spaceship only moves by last changed translation action.  Failure to reset the translation would result in the spaceship having too much inertia from the previous actions making it very difficult to control.&lt;/p&gt;

&lt;p&gt;We could also use another overload of &lt;code&gt;UIPanGestureRecognizer&lt;/code&gt; which takes an &lt;code&gt;Action&amp;lt;UIPanGestureRecognizer&amp;gt;&lt;/code&gt;, we can pass this in as a lambda function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let setupGestures() =
    use panRecogniser = 
        new UIPanGestureRecognizer
            (fun (pan:UIPanGestureRecognizer) -&amp;gt; 
                match pan.State with
                | UIGestureRecognizerState.Changed -&amp;gt;
                    let movement = pan.TranslationInView(x.View)
                    let move = SKAction.MoveBy(movement.X * 1.75f, -movement.Y * 1.75f, 0.05)
                    let ship = scene.GetChildNode(&amp;quot;Ship&amp;quot;)
                    ship.RunAction(move)
                    pan.SetTranslation(PointF.Empty, x.View)
                | _ -&amp;gt; ())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think the attribute based version is a little cleaner as you can move the callback functionality away from the definition.  To be honest I don&amp;rsquo;t mind either way, although if the lambda definition gets too big you will definitely be better off with the former.&lt;/p&gt;

&lt;p&gt;Finally we need to plug in the &lt;code&gt;setupGestures&lt;/code&gt; function, we do that by calling it at the end of &lt;code&gt;ViewDidLoad&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;override x.ViewDidLoad () =
    base.ViewDidLoad()
    setupScene()
    setupGestures()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s a quick YouTube video so you can see this in action:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/j5JK5zWLdK0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;p&gt;If you want to check out the project then you can find it in my &lt;a href=&#34;https://github.com/7sharp9/SpriteKit-Fsharp-Samples&#34;&gt;GitHub repo &lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all for now, see you next time!&lt;/p&gt;

&lt;hr style=&#34;margin: 1em 0&#34;&gt;
&lt;h1 id=&#34;essential-listening&#34;&gt;Essential listening:&lt;/h1&gt;


&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/e/e5/In_Utero_%28Nirvana%29_album_cover.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Nirvana - In Utero&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Nirvana - In Utero&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/8/85/Axiscover.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Jimi Hendrix Experience - Axis: Bold as Love&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Jimi Hendrix Experience - Axis: Bold as Love&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;




</description>
    </item>
    
    <item>
      <title>Spritekit particle fun</title>
      <link>http://7sharpnine.com/2013/09/20/2013-09-20-sprite-kit-particle-fun/</link>
      <pubDate>Fri, 20 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2013/09/20/2013-09-20-sprite-kit-particle-fun/</guid>
      <description>

&lt;p&gt;I have been meaning to write this post for quite a while now.  Since the first announcement of the iOS7 beta I immediately saw the list of new API&amp;rsquo;s and &lt;strong&gt;SpriteKit&lt;/strong&gt; caught my eye straight away.  I only managed to get time to briefly look over the API and saw that is wasn&amp;rsquo;t the usual trashy API with a million method overloads, internal mutation sucker punch type thing.  It seems to be very declarative and intuitive, which makes for a nice change.  &lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;First of all lots of kudos to &lt;a href=&#34;http://xamarin.com&#34;&gt;Xamarin&lt;/a&gt; for getting Xamarin iOS 7 out so swiftly, you can read about some of the new features &lt;a href=&#34;http://blog.xamarin.com/ios-7-and-xamarin-ready-when-you-are/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;spritekit&#34;&gt;SpriteKit&lt;/h2&gt;

&lt;p&gt;So what is SpriteKit?&lt;/p&gt;

&lt;p&gt;SpriteKit, as you might have guessed, is a games oriented API aimed at getting you quickly up and running with 2D sprites so that you can spend more time building your games rather than mucking about with the low level stuff.  Lets have a really quick tour of what&amp;rsquo;s in there, I don&amp;rsquo;t want to spend long on this as you can read the &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/GraphicsAnimation/Conceptual/SpriteKit_PG/Introduction/Introduction.html&#34;&gt;programming guide&lt;/a&gt; on the Apple site for further details.&lt;/p&gt;

&lt;h3 id=&#34;scenes&#34;&gt;Scenes&lt;/h3&gt;

&lt;p&gt;SpriteKit represents the different parts of your games with a scenes.  A scene could be the title screen or the levels in the game.  A scene is really just a just a collection of nodes which represents all of the objects currently visible.  There are several different types of node that can be used in the scene.&lt;/p&gt;

&lt;h3 id=&#34;nodes&#34;&gt;Nodes&lt;/h3&gt;

&lt;p&gt;Several different type of node are available to use, here they are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SKVideoNode - Allows videos to be embedded into the scene.&lt;/li&gt;
&lt;li&gt;SKCropNode - A crop node allows you to mask of different areas of the viewing area.&lt;/li&gt;
&lt;li&gt;SKEffectNode - The effects node allows its children to be rendered into a private frame buffer where &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/graphicsimaging/Conceptual/CoreImaging/ci_intro/ci_intro.html&#34;&gt;Core Image&lt;/a&gt; effects can be applied before being blended back into the main scene.&lt;/li&gt;
&lt;li&gt;SKEmitterNode - Allows particles to be placed into a scene.&lt;/li&gt;
&lt;li&gt;SKLabelNode - Allows for arbitrary text to be places into the scene.&lt;/li&gt;
&lt;li&gt;SKShapeNode - Allows path based shapes to be draw in the scene.&lt;/li&gt;
&lt;li&gt;SKSpriteNode - This is your standard textured image which can be colour blended, scaled, rotated etc.&lt;/li&gt;
&lt;li&gt;SKNode - This is the base node type from which all the others are derived.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;transitions&#34;&gt;Transitions&lt;/h3&gt;

&lt;p&gt;Transitions allow you to move from one scene to another, allowing for a animated effect to be applied during the transition.&lt;/p&gt;

&lt;h3 id=&#34;actions&#34;&gt;Actions&lt;/h3&gt;

&lt;p&gt;Actions allow you to declarative apply an action to a node.  For example you could write something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SKAction *moveUp =     [SKAction moveByX:0 y:100.0 duration:1.0];
SKAction *zoom =       [SKAction scaleTo:2.0 duration:0.25];
SKAction *wait =       [SKAction waitForDuration: 0.5];
SKAction *fadeAway =   [SKAction fadeOutWithDuration:0.25];
SKAction *removeNode = [SKAction removeFromParent];
 
SKAction *sequence = [SKAction sequence:@[moveUp, zoom, wait, fadeAway, removeNode]];
[node runAction: sequence];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a sequence of actions: moveUp, zoom, wait, fadeAway, removeNode.  The actions are reusable and stateless so they can be applied to any nodes in the scene.  If we didn&amp;rsquo;t want the actions to be applied in a sequence we could use a group, which applies the actions in parallel.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t worry if I&amp;rsquo;ve scared you with Objective-C there will be none of that when we get into writing a little demo in a moment.&lt;/p&gt;

&lt;h3 id=&#34;physics&#34;&gt;Physics&lt;/h3&gt;

&lt;p&gt;The physics part of SpriteKit can be really fun to play with, its fairly easy to fill a screen full of cubes and bash them about watching the gravity and collision effects.  The physics engine looks like its based on &lt;a href=&#34;http://box2d.org&#34;&gt;Box2D&lt;/a&gt; and involves adding approximate shapes for your game objects and then adding a bunch of physical properties like mass, friction, linear damping, restitution etc.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;first-steps&#34;&gt;First Steps&lt;/h3&gt;

&lt;p&gt;That was a really quick whistle stop tour just to give you a flavour of what&amp;rsquo;s in there.  For this post we are going to look at the &lt;code&gt;SKEmitterNode&lt;/code&gt; and see what we can do.&lt;/p&gt;

&lt;p&gt;The first thing to do is set up the skeleton, not an actual skeleton mind, just the skeleton of the demo.&lt;/p&gt;

&lt;p&gt;Create a new F# iOS Single View Application.  SpriteKit uses a subclass of &lt;code&gt;UIView&lt;/code&gt; for its rendering surface and is controlled as usual by the &lt;code&gt;UIViewController&lt;/code&gt; but we need to add a few things and make a few chnages to start using SpriteKit:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We need to open references for &lt;code&gt;MonoTouch.SpriteKit&lt;/code&gt; and &lt;code&gt;MonoTouch.CoreGraphics&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add a couple of virtual overloads for &lt;code&gt;ViewDidAppear&lt;/code&gt; and &lt;code&gt;ViewDidDisappear&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add an instance of &lt;code&gt;SKScene&lt;/code&gt; and &lt;code&gt;SKView&lt;/code&gt;.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;We will also add a function called &lt;code&gt;setupScene&lt;/code&gt; which will initialise the scene, this will be called from &lt;code&gt;DidViewLoad&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That means something like this will do the trick for an empty scene:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;namespace SpriteKitSingleView

open System
open System.Drawing
open MonoTouch.Foundation
open MonoTouch.UIKit
open MonoTouch.SpriteKit
open MonoTouch.CoreGraphics

[&amp;lt;Register (&amp;quot;SpriteKitViewController&amp;quot;)&amp;gt;]
type SpriteKitViewController () as x=
    inherit UIViewController ()
    
    let mutable scene = Unchecked.defaultof&amp;lt;SKScene&amp;gt;
    let mutable spriteView = new SKView()
    
    let setupScene() =
        spriteView.Bounds &amp;lt;- RectangleF(0.f, 0.f, x.View.Bounds.Width * UIScreen.MainScreen.Scale, 
                                                  x.View.Bounds.Height * UIScreen.MainScreen.Scale)
        spriteView.ShowsDrawCount &amp;lt;- true
        spriteView.ShowsNodeCount &amp;lt;- true
        spriteView.ShowsFPS &amp;lt;- true
            
        x.View &amp;lt;- spriteView
        scene &amp;lt;- new SKScene (spriteView.Bounds.Size, 
                              BackgroundColor = UIColor.Blue,
                              ScaleMode = SKSceneScaleMode.AspectFit)

    override x.DidReceiveMemoryWarning () =
        base.DidReceiveMemoryWarning ()

    override x.ShouldAutorotateToInterfaceOrientation (orientation) =
        orientation &amp;lt;&amp;gt; UIInterfaceOrientation.PortraitUpsideDown
        
    override x.ViewDidLoad () =
        base.ViewDidLoad()
        setupScene()        

    override x.ViewDidAppear(animated) =
        base.ViewDidDisappear (animated)
        spriteView.PresentScene(scene)
        
    override x.ViewDidDisappear(animated) =
        base.ViewDidDisappear (animated)
        scene.RemoveAllChildren()
        scene.RemoveAllActions() 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main interesting bit here is &lt;code&gt;setupScene&lt;/code&gt;.  The &lt;code&gt;spriteView&lt;/code&gt; instance is created at the beginning of the &lt;code&gt;SpriteKitViewController&#39;s&lt;/code&gt; &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/dd233192.aspx&#34;&gt;implicit constructor&lt;/a&gt;.  We need to defer creating the &lt;code&gt;scene&lt;/code&gt; until later because in the constructor the &lt;code&gt;UIView&lt;/code&gt; has not yet been initialised by the the framework and we would get a null reference exception.&lt;/p&gt;

&lt;p&gt;The first thing we do is get the dimensions of the current view, multiply it by the current scale, then apply it to the &lt;code&gt;spriteView&lt;/code&gt; &lt;code&gt;Bounds&lt;/code&gt; property.  The scale property is used for the various DPI modes in iOS devices.  Next we add a few debug outputs to the &lt;code&gt;spriteView&lt;/code&gt; to show the current draw and node counts as well at the current frame rate.  We assign the &lt;code&gt;spriteView&lt;/code&gt; to the &lt;code&gt;View&lt;/code&gt; property of the &lt;code&gt;ViewController&lt;/code&gt;.  And finally we create a new &lt;code&gt;SKScene&lt;/code&gt;, assigning the view boundary, background colour and the scaling mode.&lt;/p&gt;

&lt;p&gt;As a side note we could create a storyboard and use an &lt;code&gt;SKView&lt;/code&gt; as the custom class instead of the default &lt;code&gt;UIView&lt;/code&gt;, doing this way means that when the &lt;code&gt;ViewDidLoad&lt;/code&gt; overload is called the &lt;code&gt;View&lt;/code&gt; property of the &lt;code&gt;SpriteKitViewControl&lt;/code&gt; would already be initialized with a &lt;code&gt;SKView&lt;/code&gt;.  This is a little more tricky in F# as we don&amp;rsquo;t currently have the fancy UI designer integration in Xamarin Studio.  You would have to do this in Xcode and copy it to your project manually.&lt;/p&gt;

&lt;h3 id=&#34;adding-the-sprite&#34;&gt;Adding the Sprite&lt;/h3&gt;

&lt;p&gt;Next we will add a spaceship sprite:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We need to add a &lt;code&gt;.png&lt;/code&gt; file to the project.&lt;/li&gt;
&lt;li&gt;Create an instance of an &lt;code&gt;SKSprite&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We also need to add the sprite to the scene.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add a spaceship texture to the project and make sure that the build action is set to &lt;code&gt;BundleResource&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next add the following to code to the &lt;code&gt;setupScene&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;use sprite = new SKSpriteNode (&amp;quot;Art/viper_mark_vii.png&amp;quot;)
sprite.Position &amp;lt;- PointF (scene.Frame.GetMidX(), scene.Frame.GetMidY())
sprite.Name &amp;lt;- &amp;quot;Ship&amp;quot;
scene.AddChild(sprite)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I added my sprite to a sub folder in the project called Art, once you start adding lots of graphics assets you probably want to make sure they are properly organised.  Next I set the spaceship&amp;rsquo;s initial position to the center of the current scene using the &lt;code&gt;scene.Frame.GetMidX()&lt;/code&gt; and &lt;code&gt;scene.Frame.GetMidY()&lt;/code&gt; methods.  We give the sprite node a name using the &lt;code&gt;Name&lt;/code&gt; property.  This is useful if we want to refer to the spaceship via its name in the node graph rather than using its object reference  Finally we add the sprite to the scene using &lt;code&gt;scene.AddChild(sprite)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So this now gives us a single spaceship sitting in the middle of the screen:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lh4.googleusercontent.com/-P_PyM1pMkNE/Uj22UP6XaOI/AAAAAAAABs4/QhrH1JVRbSA/w592-h1236-no/scene&amp;#43;with&amp;#43;spaceship.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;creating-particles-with-xcode-s-particle-designer&#34;&gt;Creating Particles with xCode&amp;rsquo;s Particle Designer&lt;/h3&gt;

&lt;p&gt;The great thing about SpriteKit is it also comes with a nice particle designer.  To use the particle designer you have to fire up Xcode and add a new file of type &lt;code&gt;SpriteKit Particle Designer&lt;/code&gt;.  You get a choice of a eight different preset&amp;rsquo;s particle types:  Bokeh, Fire, Fireflies, Magic, Rain, Smoke, Snow, and Spark.&lt;/p&gt;

&lt;p&gt;It certainly saves a lot of time developing the particle effects with the particle designer, there are loads of parameters to play around with.  If I quickly choose the rain preset and fiddle with the parameters a bit you get a star-field type effect like this:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lh4.googleusercontent.com/-8vyHp_i429s/Uj3B9SeUU9I/AAAAAAAABtk/GVOuegVGVlw/w1370-h1114-no/starfield.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;While we&amp;rsquo;re here lets also create an exhaust plume for our spaceship, create another particle, this time using the spark preset and tweak it so it look a bit like this:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lh3.googleusercontent.com/-3F9wo4u_uUI/Uj3B9XopZeI/AAAAAAAABtg/eIDF-kRuynQ/w1370-h1114-no/exhaust.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;adding-the-particles&#34;&gt;Adding The Particles&lt;/h3&gt;

&lt;p&gt;We now have all we need to plug the particles into our demo.  Find the particles you created in Xcode and copy or move them into your project, don&amp;rsquo;t forget to make sure that the build action to &lt;code&gt;BundleResource&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While I remember lets change the background colour to black, the blue looks a bit lurid and the exhaust trail wont look its best against a blue background.  Find where &lt;code&gt;scene&lt;/code&gt; is initialised in &lt;code&gt;setupScene&lt;/code&gt; and change it so it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;scene &amp;lt;- new SKScene (spriteView.Bounds.Size, 
                      BackgroundColor = UIColor.Black,
                      ScaleMode = SKSceneScaleMode.AspectFit)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you look at the &lt;code&gt;SKEmitterNode&lt;/code&gt; constructor you might be slightly befuddled by the fact that it only takes either an &lt;code&gt;NSCoder&lt;/code&gt;, &lt;code&gt;NSObjectFlag&lt;/code&gt; or a &lt;code&gt;nativeint&lt;/code&gt;.   To help us out we create a nice little function to do the dirty work for us:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module spritekit =
    type SKEmitterNode with
        static member fromResource res =
            let emitterpath = NSBundle.MainBundle.PathForResource (res, &amp;quot;sks&amp;quot;)
            NSKeyedUnarchiver.UnarchiveFile(emitterpath) :?&amp;gt; SKEmitterNode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;.sks&lt;/code&gt; files produced by Xcode are archive files so we need to get them into a format that works in our project.  First we find the full path for the resource as its embedded in our app bundle - &lt;code&gt;NSBundle.MainBundle.PathForResource (res, &amp;quot;sks&amp;quot;)&lt;/code&gt;, next we use the  &lt;code&gt;UnarchiveFile&lt;/code&gt; method from the &lt;code&gt;NSKeyedUnarchiver&lt;/code&gt; type to get an &lt;code&gt;NSObject&lt;/code&gt;.  We finally cast the &lt;code&gt;NSObject&lt;/code&gt; as an &lt;code&gt;SKEmitterNode&lt;/code&gt; before it is returned.&lt;/p&gt;

&lt;p&gt;The function shown above is added as a static extension method to the &lt;code&gt;SKEmitterNode&lt;/code&gt;.  We could of also added this using a module or even just a simple function but at the moment we don&amp;rsquo;t have a clear view of any other extensions that we might need so we&amp;rsquo;ll just keep it tucked up in the &lt;code&gt;SKEmitterNode&lt;/code&gt; type for now.&lt;/p&gt;

&lt;p&gt;We can now use this function to load and add our star-field to our scene.  Add this piece of code before the spaceship code we added previously:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;use stars = SKEmitterNode.fromResource &amp;quot;Stars&amp;quot;
stars.Position &amp;lt;- PointF(scene.Frame.GetMidX(), scene.Frame.GetMaxY())
scene.AddChild(stars)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its pretty simple now we have the helper function to load the star-field as a resource.  Notice we add the star-field as a child of the scene and position it at the middle X coordinate of the screen (&lt;code&gt;scene.Frame.GetMidX()&lt;/code&gt;) and the maximum Y coordinate (&lt;code&gt;scene.Frame.GetMaxY()&lt;/code&gt;).  This places the star-field centrally at the top of the screen.&lt;/p&gt;

&lt;p&gt;We can now go ahead and add our exhaust plume in the same way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;use flame = SKEmitterNode.fromResource &amp;quot;Fire&amp;quot;
flame.Position &amp;lt;- PointF(0.f, -60.f)
sprite.AddChild(flame)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only difference here is we position the exhaust at location X = 0.0, Y = -60.0 and add the exhaust as a child of the spaceship.  This means that the exhaust is offset -60.0 in the Y axis from the spaceships location, this is because child nodes inherit their parents coordinate system.  This makes groups of sprites easy to animate and manipulate as you don&amp;rsquo;t have to work out all the offsets.&lt;/p&gt;

&lt;p&gt;If we run our demo now it starts to look more interesting:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lh6.googleusercontent.com/-cyiCu4dZOW4/Uj3QKqZINOI/AAAAAAAABuE/FAoU_bizdUk/w698-h1238-no/exhaust&amp;#43;and&amp;#43;starfield.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;That&amp;rsquo;s all for now, I hope you have enjoyed this little look at particles in SpriteKit.  If you want to download the demo project you can find it in my &lt;a href=&#34;https://github.com/7sharp9/SpriteKit-Fsharp-Samples&#34;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

&lt;hr style=&#34;margin: 1em 0&#34;&gt;
&lt;h1 id=&#34;essential-listening&#34;&gt;Essential listening:&lt;/h1&gt;


&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/0/05/Foo_Fighters_Wasting_Light_Album_Cover.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Foo Fighters - Wasting Light&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Foo Fighters - Wasting Light&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/4/43/AIC_Unplugged.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Alice In Chains - Unplugged&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Alice In Chains - Unplugged&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/2/2d/PearlJam-Ten2.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Pearl Jam - Ten&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Pearl Jam - Ten&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;




</description>
    </item>
    
    <item>
      <title>iOS async revisited</title>
      <link>http://7sharpnine.com/2013/04/18/2013-04-18-ios-async-revisited/</link>
      <pubDate>Thu, 18 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2013/04/18/2013-04-18-ios-async-revisited/</guid>
      <description>

&lt;p&gt;In this post weare going to look as async again, but from the perspective of F#.&lt;/p&gt;

&lt;h3 id=&#34;xamarin-evolve-2013&#34;&gt;Xamarin Evolve 2013&lt;/h3&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://blog.xamarin.com/wp-content/uploads/2013/04/Screen-Shot-2013-04-03-at-11.07.21-AM.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;br /&gt;
I have been watching the Xamarin Evolve conference this week and it was good to see Miguel announce full support for F#.  Those that follow me on twitter etc, will know that I have been doing F# for quite a while in MonoDevelop and Xamarin Studio.  The new support currently entails some new project templates so that you can easily create epic new F# Apps without having to refer to my blog.  While its sad that my content now falls into the archives its nice to get official support announced in such a grand fashion.  &lt;!-- more --&gt;&lt;/p&gt;

&lt;h3 id=&#34;f-async&#34;&gt;F# Async&lt;/h3&gt;

&lt;p&gt;Kudos to Miguel for covering some history of C#&amp;rsquo;s async feature right back down to its F# heritage too, which appeared in 2007, thanks to the work of Don Syme and the F# team.  You can read more about that on &lt;a href=&#34;http://blogs.msdn.com/b/dsyme/archive/2013/03/24/asynchronous-programming-from-f-to-python.aspx&#34;&gt;Don Syme&amp;rsquo;s blog&lt;/a&gt; or have a look at the research paper &lt;a href=&#34;http://research.microsoft.com/apps/pubs/default.aspx?id=147194&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So the highly anticipated async await model in C# that&amp;rsquo;s just gone beta in Xamarin addin channel?  We&amp;rsquo;ve had it for ages in F#!  In fact, I suspect you will have been able to use it for quite some time, even before I started hacking together support for F# in iOS!  Anyway, that&amp;rsquo;s enough of the smugness :-) lets get on and see what it looks like using some of the code from the previous post as a reference.&lt;/p&gt;

&lt;p&gt;Ill include the C# version first so that you can see the difference rather than having to open my last post.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Asynchronous HTTP request
public async void HttpSample ()
{
    Application.Busy ();
    var request = WebRequest.Create (Application.WisdomUrl);

    //async await version
    try{
        var response = await request.GetResponseAsync();
        Application.Done ();
        ad.RenderRssStream(response.GetResponseStream());
    } catch {
        // Error
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the advantages of the F# Async model is it&amp;rsquo;s composable nature and controllability.  The key to F# async is that its defined with F#&amp;rsquo;s &lt;a href=&#34;http://msdn.microsoft.com/en-gb/library/dd233182.aspx&#34;&gt;computation expression&lt;/a&gt; syntax:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Computation expressions in F# provide a convenient syntax for writing computations that can be sequenced and combined using control flow constructs and bindings.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are several built in workflows: &lt;a href=&#34;http://msdn.microsoft.com/en-gb/library/dd233209.aspx&#34;&gt;Sequences&lt;/a&gt;, &lt;a href=&#34;http://msdn.microsoft.com/en-gb/library/dd233250.aspx&#34;&gt;Asynchronous Workflows&lt;/a&gt;, and &lt;a href=&#34;http://msdn.microsoft.com/en-gb/library/hh225374.aspx&#34;&gt;Query Expressions&lt;/a&gt;.  Whenever you use a computation expression it is as follows:- &lt;code&gt;builder-name { expression }&lt;/code&gt;.  With that tiny bit of background, lets look at the corresponding F# async code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member x.HttpSample() =
    Application.Busy() 
    let request = WebRequest.Create(Application.WisdomUrl )
    
    //F# async version
    async {try let! response = request.AsyncGetResponse()
               Application.Done()
               ad(response.GetResponseStream())
           with ex -&amp;gt; () } |&amp;gt; Async.Start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see there is quite a similarity between this snippet and the C# one and you should be able to figure out what&amp;rsquo;s happening given the knowledge from the previous post.&lt;/p&gt;

&lt;p&gt;One of the first things you will notice the builder - &lt;code&gt;async { ...&lt;/code&gt;, followed by the &lt;code&gt;let!&lt;/code&gt; statement.  You can think of the &lt;code&gt;let!&lt;/code&gt; as the C# equivalent of await.  &lt;code&gt;let!&lt;/code&gt; starts the computation &lt;code&gt;request.AsyncGetResponse()&lt;/code&gt;, and then the thread is suspended until the result is available, at this point execution continues to the next statment, which in this case is &lt;code&gt;Application.Done()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Those of you comparing the difference will notice that in the C# version after &lt;code&gt;Application.Done();&lt;/code&gt; we call &lt;code&gt;ad.RenderRssStream(response.GetResponseStream())&lt;/code&gt; but in the F# version we simply call &lt;code&gt;ad(response.GetResponseStream())&lt;/code&gt;.  If we take a quick look at the constructors for the types that hold these methods I can show you the difference a bit better:&lt;/p&gt;

&lt;p&gt;The C# version looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class DotNet 
{
	AppDelegate ad;

	public DotNet (AppDelegate ad)
	{
		this.ad = ad;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The F# one I can show on a single line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type DotNet(ad: Stream -&amp;gt; unit) =
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main difference is that The C# version has the entire &lt;code&gt;AppDelegate&lt;/code&gt; class is passed in, whereas the F# version just takes a function with the signature &lt;code&gt;Stream -&amp;gt; unit&lt;/code&gt;.  In fact the F# version doesn&amp;rsquo;t even need to be placed inside a type like the C# version, we can use a &lt;a href=&#34;http://msdn.microsoft.com/en-gb/library/dd233221.aspx&#34;&gt;module&lt;/a&gt;, again Ill quote from MSDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the context of the F# language, a module is a grouping of F# code, such as values, types, and function values, in an F# program. Grouping code in modules helps keep related code together and helps avoid name conflicts in your program.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;f-modules&#34;&gt;F# Modules&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module DotNet&#39; =
    let HttpSample(ad) =
            Application.Busy() 
            let request = WebRequest.Create(Application.WisdomUrl )
            
            //F# async version
            async {try let! response = request.AsyncGetResponse()
                       Application.Done()
                       ad(response.GetResponseStream())
                   with ex -&amp;gt; () } |&amp;gt; Async.Start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we want to call this code we can open the module like you would a namespace:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open DotNet
HttpSample(ad)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or access it fully qualified by including the &lt;code&gt;module&lt;/code&gt; name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;DotNet.HttpSample(ad)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How would this code look from the context of this sample application?&lt;/p&gt;

&lt;p&gt;Here is a snipped from the AppDelegate code which makes use of this module&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// This method is invoked when the application has loaded its UI and its ready to run
override x.FinishedLaunching (app:UIApplication, options:NSDictionary) =
    x.window.AddSubview (x.navigationController.View)
    x.button1.TouchDown.Add 
        (fun _ -&amp;gt;  if not UIApplication.SharedApplication.NetworkActivityIndicatorVisible then           
                       match x.stack.SelectedRow() with
                       | 0 -&amp;gt; DotNet.HttpSample x.RenderRssStream
                       | 1 -&amp;gt; DotNet.HttpSecureSample x.RenderStream
                       | _ -&amp;gt; (new Cocoa(x.RenderRssStream)).HttpSample() |&amp;gt; ignore )    
    TableViewSelector.Configure (x.stack, [|&amp;quot;http  - WebRequest&amp;quot;
                                            &amp;quot;https - WebRequest&amp;quot;
                                            &amp;quot;http  - NSUrlConnection&amp;quot; |] )                    
    x.window.MakeKeyAndVisible()
    true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a few departures from the C# sample code which Ill include below now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// This method is invoked when the application has loaded its UI and its ready to run
public override bool FinishedLaunching (UIApplication app, NSDictionary options)
{
  window.AddSubview (navigationController.View);

  button1.TouchDown += Button1TouchDown;
  TableViewSelector.Configure (this.stack, new string [] {
    &amp;quot;http  - WebRequest&amp;quot;,
    &amp;quot;https - WebRequest&amp;quot;,
    &amp;quot;http  - NSUrlConnection&amp;quot;
  });

  window.MakeKeyAndVisible ();

  return true;
}

void Button1TouchDown (object sender, EventArgs e)
{
  // Do not queue more than one request
  if (UIApplication.SharedApplication.NetworkActivityIndicatorVisible)
    return;

  switch (stack.SelectedRow ()){
  case 0:
    new DotNet (this).HttpSample ();
    break;

  case 1:
    new DotNet (this).HttpSecureSample ();
    break;

  case 2:
    new Cocoa (this).HttpSample ();
    break;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Firstly we are using an lambda expression for the event handler via the Add method rather than the += handler which we use in C#.  We are also using F#&amp;rsquo;s awesome &lt;a href=&#34;http://msdn.microsoft.com/en-gb/library/dd547125.aspx&#34;&gt;pattern matching&lt;/a&gt; feature on the results of &lt;code&gt;x.stack.SelectedRow()&lt;/code&gt;.  This allows you to encode complex logic and also have the compiler assist you by catching non covered cases.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to leave it there for now as I don&amp;rsquo;t want to bombard any newcomers with tons of new F# features, and I also don&amp;rsquo;t want to teach any of my regular F# followers how to suck eggs.  If anyone has a preference for more in depth comparisons to the C# version then let me know then I can tailor that into further posts on the subject.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

&lt;hr style=&#34;margin: 1em 0&#34;&gt;
&lt;h1 id=&#34;essential-listening&#34;&gt;Essential listening:&lt;/h1&gt;


&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/b/b4/PerpetualBurn.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Jason Becker - Perpetual Burn&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Jason Becker - Perpetual Burn&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/d/dc/Megadeth-RustInPeace.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Megadeth - Rust In Peace&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Megadeth - Rust In Peace&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://www.metal-archives.com/images/4/6/3/9/4639.jpg?3304&#34; style=&#34;margin: 0&#34;
                 alt=&#34;&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;




</description>
    </item>
    
    <item>
      <title>A little bit of iOS async</title>
      <link>http://7sharpnine.com/2013/04/16/2013-04-16-a-little-bit-of-ios-async/</link>
      <pubDate>Tue, 16 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2013/04/16/2013-04-16-a-little-bit-of-ios-async/</guid>
      <description>&lt;p&gt;I was going to title this post as &amp;lsquo;Now for something completely different&amp;rsquo; but felt that a little bit too &lt;a href=&#34;http://en.wiktionary.org/wiki/Pythonesque&#34;&gt;Pythonesque&lt;/a&gt;, and when I thought about it a bit it isn&amp;rsquo;t really completely just slightly different, namely C# rather than my usual F# posts.  &lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;Right, enough of the waffling, this post is a little tour into the relatively unknown area of async on iOS.  Xamarin announced the alpha preview of async await on March 11th this year (2013).  There are a couple of blog post floating around on the net if you look around, Rodrigo Kumpera posted a small example &lt;a href=&#34;http://blog.xamarin.com/brave-new-async-mobile-world/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m no stranger to async, I have spent a great deal of time over the years debugging and refining &lt;a href=&#34;http://msdn.microsoft.com/en-GB/library/system.iasyncresult.aspx&#34;&gt;IAsyncResult&lt;/a&gt; style procedures and found Jeffrey Richter and Joe Duffy&amp;rsquo;s books below to be an excellent reference for those interested.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/0735667454/ref=as_li_ss_il?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0735667454&amp;linkCode=as2&amp;tag=blacguitandge-20&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&amp;ASIN=0735667454&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=US&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=blacguitandge-20&#34; &gt;&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=blacguitandge-20&amp;l=as2&amp;o=1&amp;a=0735667454&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/032143482X/ref=as_li_ss_il?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=032143482X&amp;linkCode=as2&amp;tag=blacguitandge-20&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&amp;ASIN=032143482X&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=US&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=blacguitandge-20&#34; &gt;&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=blacguitandge-20&amp;l=as2&amp;o=1&amp;a=032143482X&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you looking for a book on TPL/parallel programming then Parallel Programming with Microsoft .NET by Stephen Toub et al. is also a good read.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/0735651590/ref=as_li_ss_il?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0735651590&amp;linkCode=as2&amp;tag=blacguitandge-20&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&amp;ASIN=0735651590&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=US&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=blacguitandge-20&#34; &gt;&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=blacguitandge-20&amp;l=as2&amp;o=1&amp;a=0735651590&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Anyway, enough of the book references lets look at an iOS example of async using the &lt;a href=&#34;https://github.com/xamarin/monotouch-samples&#34;&gt;MonoTouch samples&lt;/a&gt; from Xamarin as a reference.&lt;/p&gt;

&lt;p&gt;We are going to use the &lt;a href=&#34;https://github.com/xamarin/monotouch-samples/tree/master/HttpClient&#34;&gt;HttpSample&lt;/a&gt;.  Its a relatively simple example that has several buttons which trigger an asynchronous request for data, when the data is returned it&amp;rsquo;s simply rendered onto the screen.&lt;/p&gt;

&lt;p&gt;Lets look at the first asynchronous call in the &lt;a href=&#34;https://github.com/xamarin/monotouch-samples/blob/master/HttpClient/DotNet.cs&#34;&gt;DotNet.cs&lt;/a&gt; file, the &lt;code&gt;HttpSample&lt;/code&gt;  method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Asynchronous HTTP request
public void HttpSample ()
{
	Application.Busy ();
	var request = WebRequest.Create (Application.WisdomUrl);
	request.BeginGetResponse (FeedDownloaded, request);
}

// Invoked when we get the stream back from the twitter feed
// We parse the RSS feed and push the data into a table.
void FeedDownloaded (IAsyncResult result)
{
	Application.Done ();
	var request = result.AsyncState as HttpWebRequest;
	
	try {
    		var response = request.EndGetResponse (result);
		    ad.RenderRssStream (response.GetResponseStream ());
	} catch {
		// Error				
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To convert this to the async await style all we have to do is use the async and await keywords (surprise surprise!), and in this instance use the new &lt;strong&gt;Async&lt;/strong&gt; suffixed methods on the &lt;code&gt;WebRequest&lt;/code&gt; class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Asynchronous HTTP request
public async void HttpSample ()
{
	Application.Busy ();
	var request = WebRequest.Create (Application.WisdomUrl);

	//async await version
	try{
		var response = await request.GetResponseAsync();
		Application.Done ();
	    ad.RenderRssStream(response.GetResponseStream());
	} catch {
		// Error
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see the &lt;code&gt;request.BeginGetResponse&lt;/code&gt; method has been changed to &lt;code&gt;await request.GetResponseAsync()&lt;/code&gt; and the callback method &lt;code&gt;FeedDownloaded&lt;/code&gt; which was passed into the &lt;code&gt;BeginGetRespose&lt;/code&gt; method has now been assimilated into the &lt;code&gt;HttpSample&lt;/code&gt; method.  The await keyword is acting as a wait point or suspension while the asynchronous method completes.  As soon the asynchronous call completes then processing continues to the line below, much in the same way that the callback code is executed in the IAsyncResult version.  For an in depth description then you can take a look at the &lt;a href=&#34;http://msdn.microsoft.com/en-gb/library/vstudio/hh191443.aspx&#34;&gt;MSDN documentation&lt;/a&gt; on the subject.&lt;/p&gt;

&lt;p&gt;You could add a WebException to the catch block here, you would expect on situations like network outage which would result in DNS lookup failures from the async call.&lt;/p&gt;

&lt;p&gt;We can look at the next asynchronous method too the &amp;lsquo;HttpSecureSample&amp;rsquo; method&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Asynchornous HTTPS request
public void HttpSecureSample ()
{
	var https = (HttpWebRequest) WebRequest.Create (&amp;quot;https://gmail.com&amp;quot;);

	// To not depend on the root certficates, we will accept any certificates:
	ServicePointManager.ServerCertificateValidationCallback = (sender, cert, chain, ssl) =&amp;gt;  true;

	https.BeginGetResponse (GmailDownloaded, https);
}

// This sample just gets the result from calling https://gmail.com, an HTTPS secure 
// connection, we do not attempt to parse the output, but merely dump it as text
void GmailDownloaded (IAsyncResult result)
{
	Application.Done ();
	var request = result.AsyncState as HttpWebRequest;

	try {
    		var response = request.EndGetResponse (result);
		    ad.RenderStream (response.GetResponseStream ());
	} catch {
		// Error
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets have a look at the async await version of that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Asynchornous HTTPS request
public async void HttpSecureSample ()
{
	var https = (HttpWebRequest) WebRequest.Create (&amp;quot;https://gmail.com&amp;quot;);

	// To not depend on the root certficates, we will accept any certificates:
	ServicePointManager.ServerCertificateValidationCallback = (sender, cert, chain, ssl) =&amp;gt;  true;

    try {
			var response = await https.GetResponseAsync();
			Application.Done ();
			ad.RenderRssStream (response.GetResponseStream ());
	} catch {
		// Error
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this situation there was also a version of the IAsyncResult Begin/End pattern that had been converted to async - &lt;code&gt;https.GetResponseAsync()&lt;/code&gt; and we also had to add the &lt;code&gt;async&lt;/code&gt; keyword to the &lt;code&gt;HttpSecureSample&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;For the situations where there is no &lt;strong&gt;Async&lt;/strong&gt; suffixed method available you can build your own using the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.threading.tasks.taskfactory.fromasync.aspx&#34;&gt;Task.Factory.FromAsync&lt;/a&gt; methods.  I wont go into the details of that here but if anyone wants any information on that then just give me a shout and I can revisit in in a future post.&lt;/p&gt;

&lt;p&gt;Ah yes, I almost forgot, there are some common pitfalls of using async await and Tomas Petricek posted a good compilation of them the other day: &lt;a href=&#34;http://tomasp.net/blog/csharp-async-gotchas.aspx&#34;&gt;C# async gotchas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

&lt;hr style=&#34;margin: 1em 0&#34;&gt;
&lt;h1 id=&#34;essential-listening&#34;&gt;Essential listening:&lt;/h1&gt;


&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/6/69/Silence_Followed_By_a_Deafening_Roar_album.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Paul Gilbert - Silence Followed By A Deafening Roar&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Paul Gilbert - Silence Followed By A Deafening Roar&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/0/0d/FooFighters-TheColourAndTheShape.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;FooFighters - The Colour And The Shape&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;FooFighters - The Colour And The Shape&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;




</description>
    </item>
    
    <item>
      <title>MonoTouch and F# part II</title>
      <link>http://7sharpnine.com/2013/02/07/2013-02-04-monotouch-and-fsharp-part-ii/</link>
      <pubDate>Thu, 07 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2013/02/07/2013-02-04-monotouch-and-fsharp-part-ii/</guid>
      <description>

&lt;p&gt;In the last post we left at the point where everything was running fine and dandy on the Simulator.  So what happens if we compile for the real hardware?&lt;/p&gt;

&lt;p&gt;Lets change the active configuration to &lt;code&gt;Debug|iPhone&lt;/code&gt; and hit build, what do we get?&lt;!-- more --&gt;&lt;/p&gt;

&lt;h3 id=&#34;boom&#34;&gt;Boom!&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Error MT2002: Could not resolve: FSharp.Core, Version=4.3.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a (MT2002) (singleview)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So I guess we need to tell it where the FSharp.Core.dll is, lets add a reference to it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/Libraries/FrameWorks/Mono.FrameWork/Libraries/mono/Microsoft F#/v4.0/Fsharp.Core.dll
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now try and build &amp;hellip; another weird error:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;unknown-file(1,1): Error FS2020: The assembly &amp;lsquo;F#/v4.0/FSharp.Core.dll&amp;rsquo; is listed on the command line. Assemblies should be referenced using a command line flag such as &amp;lsquo;-r&amp;rsquo;. (FS2020) (singleview)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hmmm, lets look in the F# compiler source, were going to have to break out the big guns for this one.&lt;/p&gt;

&lt;p&gt;What we need to do is look at the different targets that are available.  I remember seeing different targets when I was nosing through the source files a while ago.  Also if you look at the &lt;code&gt;readme.md&lt;/code&gt; file that comes with the open source compiler:&lt;/p&gt;

&lt;p&gt;You can also build FSharp.Core for: .NET 2.0, Mono 2.1, Silverlight 5.0, Portable Profile47 (net4+sl4+wp71+win8) and XNA 4.0 for Xbox 360 profiles:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msbuild fsharp-library-build.proj /p:TargetFramework=net20 
msbuild fsharp-library-build.proj /p:TargetFramework=mono21
msbuild fsharp-library-build.proj /p:TargetFramework=portable-net4+sl4+wp71+win8
msbuild fsharp-library-build.proj /p:TargetFramework=sl5
msbuild fsharp-library-build.proj /p:TargetFramework=net40-xna40-xbox360
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So lets build the &lt;code&gt;mono21&lt;/code&gt; target with &lt;code&gt;xbuild&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xbuild fsharp-library-build.proj /p:TargetFramework=mono21
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that&amp;rsquo;s build lets reference the output and see what happens:&lt;/p&gt;

&lt;p&gt;Arrgh another error this time relating the the version of the framework that we have compiled against.&lt;/p&gt;

&lt;p&gt;If you read the documentation for &lt;a href=&#34;http://xamarin.com/monotouch&#34;&gt;MonoTouch&lt;/a&gt; in a little more detail you will discover that a different mscorlib is required.  We need to modify this in the build script:&lt;/p&gt;

&lt;p&gt;Open up &lt;code&gt;FSharp.Source.Targets&lt;/code&gt; and find the &lt;code&gt;&amp;lt;PropertyGroup Condition=&amp;quot;&#39;$(TargetFramework)&#39;==&#39;mono21&#39;&amp;quot;&amp;gt;&lt;/code&gt; section, add the following after the &lt;code&gt;&amp;lt;DefineConstants&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;OtherFlags&amp;gt;$(OtherFlags) --simpleresolution -r:&amp;quot;/Developer/MonoTouch/usr/lib/mono/2.1/mscorlib-runtime.dll&amp;quot;  &amp;lt;/OtherFlags&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Right, fingers crossed&amp;hellip;&lt;/p&gt;

&lt;p&gt;Sigh, another error:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Error MT2002: Can not resolve reference: System.Reflection.Emit.AssemblyBuilder (MT2002) (singleview)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Were getting closer though.&lt;/p&gt;

&lt;p&gt;Lets look at the &lt;code&gt;&amp;lt;DefineConstants/&amp;gt;&lt;/code&gt; that are declared in the build file, if you have a quick look you will notice that there is one called &lt;code&gt;FX_NO_REFLECTION_EMIT&lt;/code&gt; that&amp;rsquo;s what we need so that &lt;code&gt;Reflection.Emit&lt;/code&gt; is not included.  MonoTouch does not support &lt;code&gt;Reflection.Emit&lt;/code&gt; due to the meta data not being available once the code have been compiled with the &lt;a href=&#34;http://www.mono-project.com/AOT&#34;&gt;AOT compiler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lets add that constant to the end of the rest:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;DefineConstants&amp;gt;$(DefineConstants);FX_NO_REFLECTION_EMIT&amp;lt;/DefineConstants&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we rebuild &lt;code&gt;Fsharp.Core&lt;/code&gt; again with &lt;code&gt;xbuild&lt;/code&gt; and rebind the reference in our test project&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;wow-it-works&#34;&gt;Wow it works!&lt;/h3&gt;

&lt;p&gt;You should now have a working hello world application that can be deployed and run on real hardware.&lt;/p&gt;

&lt;h2 id=&#34;final-words&#34;&gt;Final Words&lt;/h2&gt;

&lt;p&gt;As this is just a documented hackathon I have mainly brain dumped what I remembered doing after the fact, so some steps may be slightly different.  As soon as time permits Ill be adding a couple of project templates to the &lt;a href=&#34;https://github.com/fsharp/fsharpbinding&#34;&gt;FSharpBinding&lt;/a&gt; to allow building F# MonoTouch libraries and applications.&lt;/p&gt;

&lt;p&gt;I also have some ideas for dealing with the UI and tooling with &lt;a href=&#34;https://developer.apple.com/technologies/tools/&#34;&gt;Xcode&lt;/a&gt; but Ill need a little time to investigate to see if it&amp;rsquo;s a viable option&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;hr style=&#34;margin: 1em 0&#34;&gt;
&lt;h1 id=&#34;essential-listening&#34;&gt;Essential listening:&lt;/h1&gt;


&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/4/44/Soilscars.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Soil - Scars&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Soil - Scars&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/e/e9/AlbinoSlug.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Buckethead - Albino Slug&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Buckethead - Albino Slug&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;



&lt;br /&gt;
Until next time!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MonoTouch and F# part I</title>
      <link>http://7sharpnine.com/2013/02/03/2013-02-03-monotouch-and-fsharp-part-i/</link>
      <pubDate>Sun, 03 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2013/02/03/2013-02-03-monotouch-and-fsharp-part-i/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://xamarin.com/monotouch&#34;&gt;MonoTouch&lt;/a&gt; and F# that would be a cool duo right?&lt;/p&gt;

&lt;p&gt;Well let me explain what needs to be done and why to get this pair working together.&lt;/p&gt;

&lt;p&gt;I heard rumours a while ago that F# and &lt;a href=&#34;http://xamarin.com/monotouch&#34;&gt;MonoTouch&lt;/a&gt; would not play together nicely because of &lt;a href=&#34;http://docs.xamarin.com/ios/about/limitations&#34;&gt;limitations&lt;/a&gt; in the ahead of time compilation &lt;a href=&#34;http://www.mono-project.com/AOT&#34;&gt;(AOT)&lt;/a&gt;.  So I thought I would either prove or disprove this with some concentrated hacking.  How hard can it be?&lt;/p&gt;

&lt;p&gt;As my good friend and colleague Dr. Kewin would quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“No problem can withstand the assault of sustained thinking.”—Voltaire&lt;!-- more --&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;These are the same as MonoTouch, I&amp;rsquo;m using a Mac and MonoDevelop at the moment.  You would need a Mac anyway to be able to do the compile and deploy to an iOS device.  &lt;a href=&#34;https://developer.apple.com/technologies/tools/&#34;&gt;Xcode&lt;/a&gt; with an Apple profile and certificates are required for code signing etc.&lt;/p&gt;

&lt;h2 id=&#34;first-steps&#34;&gt;First steps&lt;/h2&gt;

&lt;p&gt;So how do we tackle this?&lt;/p&gt;

&lt;p&gt;First lets look at the &lt;strong&gt;C# Single View&lt;/strong&gt; MonoTouch project file (&lt;code&gt;.csproj&lt;/code&gt;) up to the end of the first PropertyGroup:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;Project DefaultTargets=&amp;quot;Build&amp;quot; ToolsVersion=&amp;quot;4.0&amp;quot; xmlns=&amp;quot;http://schemas.microsoft.com/developer/msbuild/2003&amp;quot;&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;Configuration Condition=&amp;quot; &#39;$(Configuration)&#39; == &#39;&#39; &amp;quot;&amp;gt;Debug&amp;lt;/Configuration&amp;gt;
    &amp;lt;Platform Condition=&amp;quot; &#39;$(Platform)&#39; == &#39;&#39; &amp;quot;&amp;gt;iPhoneSimulator&amp;lt;/Platform&amp;gt;
    &amp;lt;ProductVersion&amp;gt;10.0.0&amp;lt;/ProductVersion&amp;gt;
    &amp;lt;SchemaVersion&amp;gt;2.0&amp;lt;/SchemaVersion&amp;gt;
    &amp;lt;ProjectGuid&amp;gt;{822346B5-6805-42FD-9B6A-65446A688E63}&amp;lt;/ProjectGuid&amp;gt;
    &amp;lt;ProjectTypeGuids&amp;gt;{6BC8ED88-2882-458C-8E55-DFD12B67127B};
                      {FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}&amp;lt;/ProjectTypeGuids&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;RootNamespace&amp;gt;HelloWorld&amp;lt;/RootNamespace&amp;gt;
    &amp;lt;AssemblyName&amp;gt;HelloWorld&amp;lt;/AssemblyName&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The bits we are interested in are the &lt;strong&gt;ProjectTypeGuids&lt;/strong&gt;.  Visual Studio/MonoDevelop projects use these guid&amp;rsquo;s to identify the type of the project.  If you do a bit of Googling &lt;em&gt;(or Binging&amp;hellip;)&lt;/em&gt; you would find that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;6BC8ED88-2882-458C-8E55-DFD12B67127B&lt;/strong&gt;  is a MonoTouch project type guid&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FAE04EC0-301F-11D3-BF4B-00C04F79EFBC&lt;/strong&gt;  is a C# project type guid&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The F# project type guid is &lt;strong&gt;F2A71F9B-5D33-465A-A702-920D77279786&lt;/strong&gt;.  We can now replace &lt;strong&gt;FAE04EC0-301F-11D3-BF4B-00C04F79EFBC&lt;/strong&gt; with the F# one.  For a comprehensive list of project type guid&amp;rsquo;s have a look at &lt;a href=&#34;http://workblog.pilin.name/2012/11/visual-studio-project-type-guids.html&#34;&gt;Mikhail Pilin&amp;rsquo;s blog&lt;/a&gt;.  Next scroll down to the bottom of the project file and update the  &lt;Import Project=&#34;$(MSBuildBinPath)\Microsoft.CSharp.targets&#34; /&gt; to &lt;Import Project=&#34;$(MSBuildExtensionsPath32)\..\Microsoft F#\v4.0\Microsoft.FSharp.Targets&#34; /&gt;.  the final step on the project file is to change the project file extension from &lt;code&gt;.csproj&lt;/code&gt; to &lt;code&gt;.fsproj&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The last of the tweaking is to open up the &lt;code&gt;.sln&lt;/code&gt; file and make a slight change to that too:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Microsoft Visual Studio Solution File, Format Version 11.00
# Visual Studio 2010
Project(&amp;quot;{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}&amp;quot;) = &amp;quot;singleview&amp;quot;, &amp;quot;singleview\singleview.fsproj&amp;quot;, &amp;quot;{4465399C-4EE8-4F60-AD9A-EB9AEDD1C5BF}&amp;quot;
EndProject
Global
...snip...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modify the  Project sections Guid &lt;strong&gt;FAE04EC0-301F-11D3-BF4B-00C04F79EFBC&lt;/strong&gt; to the F# project type Guid &lt;strong&gt;4925A630-B079-445d-BCD4-3A9C94FE9307&lt;/strong&gt;.  If you forget this step then MonoDevelop will get really confused and try to compile the F# project with the C# compiler.&lt;/p&gt;

&lt;h2 id=&#34;code-changes&#34;&gt;Code Changes&lt;/h2&gt;

&lt;p&gt;For the sake of simplicity I&amp;rsquo;m going to port the C# code verbatim showing the C# code first then the F# code.  The easiest way would probably be to change all the  C# files to have the &lt;code&gt;.fs&lt;/code&gt; extension and edit them in place, remembering to also update the entries in the &lt;code&gt;.fsproj&lt;/code&gt; file too this only takes a second to do.&lt;/p&gt;

&lt;p&gt;I know what you are going to say: &amp;ldquo;Why didn&amp;rsquo;t you just create a nice project template for us all to use?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I am, I am, patience!&lt;/p&gt;

&lt;p&gt;A number of people wanted to know what I did to get things going so this is my documented &amp;lsquo;hack-a-thon&amp;rsquo; if you like.  The project template will be along shortly.  Lets move along to the code changes.&lt;/p&gt;

&lt;h2 id=&#34;viewcontroller&#34;&gt;ViewController&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Drawing;
using MonoTouch.Foundation;
using MonoTouch.UIKit;

namespace singleview
{
	public partial class singleviewViewController : UIViewController
	{
		public singleviewViewController () : base (&amp;quot;singleviewViewController&amp;quot;, null)
		{
		}
		
		public override void DidReceiveMemoryWarning ()
		{
			// Releases the view if it doesn&#39;t have a superview.
			base.DidReceiveMemoryWarning ();
			// Release any cached data, images, etc that aren&#39;t in use.
		}
		
		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			// Perform any additional setup after loading the view, typically from a nib.
		}
		
		public override void ViewDidUnload ()
		{
			base.ViewDidUnload ();
			// Clear any references to subviews of the main view in order to
			// allow the Garbage Collector to collect them sooner.
			// e.g. myOutlet.Dispose (); myOutlet = null;
			ReleaseDesignerOutlets ();
		}
		
		public override bool ShouldAutorotateToInterfaceOrientation (UIInterfaceOrientation toInterfaceOrientation)
		{
			// Return true for supported orientations
			return (toInterfaceOrientation != UIInterfaceOrientation.PortraitUpsideDown);
		}
	}
}

// This file has been generated automatically by MonoDevelop to store outlets and
// actions made in the Xcode designer. If it is removed, they will be lost.
// Manual changes to this file may not be handled correctly.
using MonoTouch.Foundation;

namespace singleview
{
	[Register (&amp;quot;singleviewViewController&amp;quot;)]
	partial class singleviewViewController
	{
		void ReleaseDesignerOutlets ()
		{
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;namespace Singleview

open System
open System.Drawing
open MonoTouch.Foundation
open MonoTouch.UIKit

[&amp;lt;Register (&amp;quot;singleviewViewController&amp;quot;)&amp;gt;]
type singleviewViewController() =
    inherit UIViewController(&amp;quot;singleviewViewController&amp;quot;, null)
        
    let ReleaseDesignerOutlets() = ( (* No outlets to release  *))

    override x.DidReceiveMemoryWarning() =
    // Releases the view if it doesn&#39;t have a superview.
        base.DidReceiveMemoryWarning();
        // Release any cached data, images, etc that aren&#39;t in use.

    override x.ViewDidLoad() =
        base.ViewDidLoad()
        // Perform any additional setup after loading the view, typically from a nib.

    override x.ViewDidUnload() =
        base.ViewDidUnload()
        // Clear any references to subviews of the main view in order to
        // allow the Garbage Collector to collect them sooner.
        // e.g. myOutlet.Dispose (); myOutlet = null;
        ReleaseDesignerOutlets()

    override x.ShouldAutorotateToInterfaceOrientation(toInterfaceOrientation) =
        // Return true for supported orientations
        toInterfaceOrientation &amp;lt;&amp;gt; UIInterfaceOrientation.PortraitUpsideDown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On looking at this section you will notice that there is no partial class in the F# version, that&amp;rsquo;s because F# doesn&amp;rsquo;t have any notion of partial classes.  In this simple project we don&amp;rsquo;t actually have any interaction with the UI so designer interaction is a moot point at the moment.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.fsproj&lt;/code&gt; file still needs to be edited to remove the nested partial class that is present in the C# version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   &amp;lt;Compile Include=&amp;quot;singleviewViewController.designer.cs&amp;quot;&amp;gt;
      &amp;lt;DependentUpon&amp;gt;singleviewViewController.cs&amp;lt;/DependentUpon&amp;gt;
    &amp;lt;/Compile&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simply remove the &lt;code&gt;DependUpon&lt;/code&gt; element and just use the name &lt;code&gt;singleviewViewController.fs&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Compile&amp;gt;singleviewViewController.fs/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The lack of partial classes in F# makes the tooling available for UI designer a pain to integrate tightly into F# without a bit of work work &lt;em&gt;(I have some ideas on that that I&amp;rsquo;m currently experimenting with that Ill return to after finishing this article)&lt;/em&gt;.  Currently MonoTouch uses the Xcodes interface designer to build the UI which is stored in a xib file.  This is simply a file describing the user interface and its interaction points.  The Properties of the UI are called &lt;code&gt;Outlets&lt;/code&gt; and events spawned from the UI are called &lt;code&gt;Actions&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;appdelegate&#34;&gt;AppDelegate&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using System.Linq;
using MonoTouch.Foundation;
using MonoTouch.UIKit;

namespace singleview
{
	// The UIApplicationDelegate for the application. This class is responsible for launching the 
	// User Interface of the application, as well as listening (and optionally responding) to 
	// application events from iOS.
	[Register (&amp;quot;AppDelegate&amp;quot;)]
	public partial class AppDelegate : UIApplicationDelegate
	{
		// class-level declarations
		UIWindow window;
		singleviewViewController viewController;

		// This method is invoked when the application has loaded and is ready to run. In this 
		// method you should instantiate the window, load the UI into it and then make the window visible.
		// You have 17 seconds to return from this method, or iOS will terminate your application.
		public override bool FinishedLaunching (UIApplication app, NSDictionary options)
		{
			window = new UIWindow (UIScreen.MainScreen.Bounds);
			
			viewController = new singleviewViewController ();
			window.RootViewController = viewController;
			window.MakeKeyAndVisible ();
			
			return true;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;namespace Singleview
open System
open System.Collections.Generic
open MonoTouch.Foundation
open MonoTouch.UIKit

// The UIApplicationDelegate for the application. This class is responsible for launching the 
// User Interface of the application, as well as listening (and optionally responding) to application events from iOS.
[&amp;lt;Register (&amp;quot;AppDelegate&amp;quot;)&amp;gt;]
type AppDelegate() =
    inherit UIApplicationDelegate()
    
    let mutable window = Unchecked.defaultof&amp;lt;_&amp;gt;
    let mutable viewController = Unchecked.defaultof&amp;lt;_&amp;gt;

    // This method is invoked when the application has loaded and is ready to run. In this 
    // method you should instantiate the window, load the UI into it and then make the window visible.
    // You have 17 seconds to return from this method, or iOS will terminate your application.
    override x.FinishedLaunching ( app: UIApplication,  options: NSDictionary) =
        window &amp;lt;- new UIWindow(UIScreen.MainScreen.Bounds)
        viewController &amp;lt;- new singleviewViewController()
        window.RootViewController &amp;lt;- viewController
        window.MakeKeyAndVisible()
        true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code is pretty similar between the two implementations, with the F# version omitting the type annotations, semicolons and curly braces.  The other area to notice is that the &lt;code&gt;mutable&lt;/code&gt; variable declarations for the &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;viewController&lt;/code&gt; bindings.  The C# implementation defaults to mutable variables whereas F# defaults to the safer immutable ones.&lt;/p&gt;

&lt;h2 id=&#34;program-main&#34;&gt;Program/main&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using System.Linq;
using MonoTouch.Foundation;
using MonoTouch.UIKit;

namespace singleview
{
	public class Application
	{
		// This is the main entry point of the application.
		static void Main (string[] args)
		{
			// if you want to use a different Application Delegate class from &amp;quot;AppDelegate&amp;quot;
			// you can specify it here.
			UIApplication.Main (args, null, &amp;quot;AppDelegate&amp;quot;);
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module main
open System
open System.Collections.Generic
open MonoTouch.Foundation
open MonoTouch.UIKit

    [&amp;lt;EntryPoint&amp;gt;]
    let main( args) = 
        UIApplication.Main (args, null, &amp;quot;AppDelegate&amp;quot;)
        0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main thing you will notice is that the F# code is terser, again dropping the type annotations, semicolons and curly braces.  Oh, I also called the entry point main.  To be precise it&amp;rsquo;s a function called main in a module named main, there&amp;rsquo;s no need to create a class or type for this.&lt;/p&gt;

&lt;h2 id=&#34;the-xib-file&#34;&gt;The Xib file&lt;/h2&gt;

&lt;p&gt;In C# MonoToch projects the &lt;code&gt;xib&lt;/code&gt; file is compiled and embedded for you as part of the build process, unfortunately this is not currently possible in F# so we have to do it manually.  In an ideal world this would all be done by the F# project at build time and this is something that I&amp;rsquo;m working on too.  In the mean time we have to do it manually so open up your trusty friend the &lt;code&gt;Terminal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to split the command line into separate parts due to its size:&lt;/p&gt;

&lt;p&gt;First of all we invoke the &lt;code&gt;ibtool&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/Applications/Xcode.app/Contents/Developer/usr/bin/ibtool --errors --warnings --notices --output-format human-readable-text --compile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Followed by name of the &lt;code&gt;.nib&lt;/code&gt; file you want to compile to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;/yourPath/singleviewViewController.nib&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The path of the &lt;code&gt;.xib&lt;/code&gt; you want to compile from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;/yourPath/singleviewViewController.xib&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally the sdk that you want to use for compilation, in this instance it is The iPhoneSimulator6.0.sdk as we are targetting the simulator:
    &amp;ndash;sdk &amp;ldquo;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.0.sdk&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Once you have compiled to a &lt;code&gt;.nib&lt;/code&gt; file include it in the project, set the build action to &lt;code&gt;Content&lt;/code&gt;.  You can still include the &lt;code&gt;.xib&lt;/code&gt; version within the project if you want but you would have to set the build action to &lt;code&gt;None&lt;/code&gt;.  Currently the F# binding does not support the build action of &lt;code&gt;Interface Definition&lt;/code&gt; if it did then we probably wouldn&amp;rsquo;t have to go through the manual compilation process either.&lt;/p&gt;

&lt;p&gt;That ought to do it, everything should now work on the simulator.  If you try to compile to a real phone then everything will quickly come grinding to a halt but Ill explain all of that next time and how to resolve it too.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

&lt;hr style=&#34;margin: 1em 0&#34;&gt;
&lt;h1 id=&#34;essential-listening&#34;&gt;Essential listening:&lt;/h1&gt;


&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/5/5f/MegadethThirteen.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Megadeth - TH1RT3EN&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Megadeth - TH1RT3EN&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/7/7a/Worship_Music.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Anthrax - Worship Music&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Anthrax - Worship Music&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;




</description>
    </item>
    
  </channel>
</rss>