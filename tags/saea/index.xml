<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Saea on 7sharp9</title>
    <link>http://7sharpnine.com/tags/saea/</link>
    <description>Recent content in Saea on 7sharp9</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Dave Thomas</copyright>
    <lastBuildDate>Fri, 28 Jan 2011 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://7sharpnine.com/tags/saea/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sockets and Bockets 4</title>
      <link>http://7sharpnine.com/2011/01/28/2011-01-28-sockets-and-bockets-part-4/</link>
      <pubDate>Fri, 28 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2011/01/28/2011-01-28-sockets-and-bockets-part-4/</guid>
      <description>Welcome to part 4 If you were looking forward to some exciting new F# code this time your going to be disappointed, however if you are like me and like looking at graphs and stats and digging in deeper into the code then your going to enjoy this, lets get started&amp;hellip;I set up a 5 minute test with 50 clients connecting to the server with a 15ms interval between each one.</description>
    </item>
    
    <item>
      <title>Sockets and Bockets 3</title>
      <link>http://7sharpnine.com/2011/01/20/2011-01-20-sockets-and-bockets-part-3/</link>
      <pubDate>Thu, 20 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2011/01/20/2011-01-20-sockets-and-bockets-part-3/</guid>
      <description>Welcome to part three! As promised heres a description of the inner workings. I&amp;rsquo;m sick to death of typing SocketAsyncEventArgs so from now on I will refer to it as SAEA.BocketPool
The BocketPool has an interesting name and with it an interesting constructor! It takes the following parameters:
number: The number of items to create in the BocketPool. size: The size of each buffer in bytes. callback: A callback function which is invoked whenever the SAEA object completes its operation.</description>
    </item>
    
  </channel>
</rss>