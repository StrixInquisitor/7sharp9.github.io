<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fable on 7sharp9</title>
    <link>http://7sharpnine.com/tags/fable/</link>
    <description>Recent content in Fable on 7sharp9</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Dave Thomas</copyright>
    <lastBuildDate>Mon, 03 Oct 2016 00:32:48 +0100</lastBuildDate>
    <atom:link href="http://7sharpnine.com/tags/fable/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Building a single page application with Elm</title>
      <link>http://7sharpnine.com/2016/10/03/building-an-spa-with-elm/</link>
      <pubDate>Mon, 03 Oct 2016 00:32:48 +0100</pubDate>
      
      <guid>http://7sharpnine.com/2016/10/03/building-an-spa-with-elm/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been meaning to write this for a while but got sidetracked with other things, so this is an experience report of
using Elm to build a single page application.&lt;/p&gt;

&lt;p&gt;First of all you can see the final site &lt;a href=&#34;http://lynseythomas.com&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;basic-structure&#34;&gt;Basic Structure&lt;/h1&gt;

&lt;p&gt;The basic structure is a navigation driven single page application, which also uses &lt;a href=&#34;https://guide.elm-lang.org/architecture/&#34;&gt;The Elm Architecture&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I split the site into separate file mainly based on &lt;a href=&#34;http://blog.jenkster.com/2016/04/how-i-structure-elm-apps.html&#34;&gt;how i structure elm apps&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/krisajenkins&#34;&gt;Kris Jenkins&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;├─ App.elm
├─ Data.elm
├─ Shared.elm
├─ State.elm
├─ Types.elm
├─ View.elm
│
├─ About
│  └─ View.elm
├─ Category
│  └─ View.elm
├─ Contact
│  └─ View.elm
├─ Detail
│  └─ View.elm
├─ Gallery
│  └─ View.elm
└─ Home
   └─ View.elm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think its slightly overkill for a site of this size and complexity but its nice to understand where things will lead
on a bigger site where you have additional files like &lt;code&gt;State.elm&lt;/code&gt;, &lt;code&gt;Types.elm&lt;/code&gt; and &lt;code&gt;Rest.elm&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;One of the things that I did find a annoying at times was if I had &lt;code&gt;About/View.elm&lt;/code&gt; and &lt;code&gt;Category/View.elm&lt;/code&gt; both open in
the tabs of my editor.  Only &lt;code&gt;View.elm&lt;/code&gt; is shown in the tab so I had to hovering on the tab to see the full path or read
the module name at the top of the file.  Renaming the file to &lt;code&gt;AboutView.elm&lt;/code&gt; would mean the import statement would have
to change to &lt;code&gt;import About.AboutView&lt;/code&gt; as Elm enforces the directory name prefix.&lt;/p&gt;

&lt;h1 id=&#34;application-structure&#34;&gt;Application structure&lt;/h1&gt;

&lt;p&gt;As per the &lt;a href=&#34;http://blog.jenkster.com/2016/04/how-i-structure-elm-apps.html&#34;&gt;how i structure elm apps&lt;/a&gt; article my application was structured like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;module Main exposing (..)
import View exposing (rootView)
import Navigation
import State


main : Program Never
main =
    Navigation.program (Navigation.makeParser State.pathParser)
        { init = State.init
        , view = View.rootView
        , update = State.update
        , urlUpdate = State.urlUpdate
        , subscriptions = State.subscriptions
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the main elements of the application are imported and a &lt;code&gt;Navigation.program&lt;/code&gt; is started with the appropriate &lt;code&gt;init&lt;/code&gt;,
&lt;code&gt;view&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;urlUpdate&lt;/code&gt; and &lt;code&gt;subscriptions&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;model-messages-and-types&#34;&gt;Model Messages and types&lt;/h1&gt;

&lt;h2 id=&#34;model&#34;&gt;Model&lt;/h2&gt;

&lt;p&gt;The model is super simple, all that has to be recorded is the current page:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;type alias Model =
    { page : Page }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;messages&#34;&gt;Messages&lt;/h2&gt;

&lt;p&gt;The messages the application will deal with are also pretty simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;type Msg
    = NavigateTo Page
    | NavigateBack
    | GmailCaptcha
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NavigateTo&lt;/code&gt; simply navigates to the page in question.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NavigateBack&lt;/code&gt; just navigates back one page.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GmailCaptcha&lt;/code&gt; displays a captcha request which then shows an email address on success.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Page is just a union type consisting of the pages in the application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;type Page
    = Home
    | About
    | Contact
    | Gallery
    | CategoryDetail CategoryType
    | ItemDetail String
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And &lt;code&gt;CategoryType&lt;/code&gt; another union:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;type CategoryType
    = Perfumes
    | Seasides
    | IllustratedQuotes
    | Bottles
    | Cocktails
    | Architecture
    | VintageCameras
    | Cakes
    | Unknown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Category and Item are simple records:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;type alias Category =
    {categoryType : CategoryType, img : String, description : String}

type alias Item =
    {id : String, title : String, img : String, description : String, category : CategoryType}

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;update&#34;&gt;update&lt;/h1&gt;

&lt;p&gt;All Elm application have an &lt;code&gt;update&lt;/code&gt; function and ours is defined like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd b )
update msg model =
    case msg of
        NavigateTo page -&amp;gt;
            ( model, (Navigation.newUrl &amp;lt;| pageToString page) )

        NavigateBack -&amp;gt;
            model =&amp;gt; (Navigation.back 1)

        GmailCaptcha -&amp;gt;
            ( model, captcha() )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We pattern match on the &lt;code&gt;msg&lt;/code&gt; and either use the commands described in &lt;a href=&#34;#messages&#34;&gt;Messages&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;view&#34;&gt;View&lt;/h1&gt;

&lt;p&gt;The View is quite simple its a virtual dom defined by the following nodes on the `rootView:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;rootView model =
    div [class &amp;quot;container&amp;quot;]
        [
            nav [ class &amp;quot;navbar navbar-light&amp;quot;, attribute &amp;quot;role&amp;quot; &amp;quot;navigation&amp;quot; ]
                [ a [class &amp;quot;pull-xs-left&amp;quot;
                    , href &amp;lt;| toHash Home
                    , onClick&#39; &amp;lt;| NavigateTo Home
                    ]
                    [img [id &amp;quot;logo&amp;quot;, class &amp;quot;img-fluid&amp;quot;, src &amp;quot;/img/logogreen.png&amp;quot;, srcset [&amp;quot;/img/logogreen.png&amp;quot;,&amp;quot;/img/logogreen@2x.png&amp;quot; ] ] []]
                  ,  button [ attribute &amp;quot;aria-controls&amp;quot; &amp;quot;exCollapsingNavbar2&amp;quot;
                            , attribute &amp;quot;aria-expanded&amp;quot; &amp;quot;false&amp;quot;
                            , attribute &amp;quot;aria-label&amp;quot; &amp;quot;Toggle navigation&amp;quot;
                            , class &amp;quot;navbar-toggler hidden-sm-up flex-center&amp;quot;
                            , attribute &amp;quot;data-target&amp;quot; &amp;quot;#exCollapsingNavbar2&amp;quot;
                            , attribute &amp;quot;data-toggle&amp;quot; &amp;quot;collapse&amp;quot;
                            , type&#39; &amp;quot;button&amp;quot;
                            ]
                                [ text &amp;quot;☰&amp;quot; ]
                        
                , div [ class &amp;quot;collapse navbar-toggleable-xs&amp;quot;, id &amp;quot;exCollapsingNavbar2&amp;quot; ]
                    [   ul [ class &amp;quot;nav navbar-nav pull-sm-right text-xs-center&amp;quot; ]
                        [ renderMenuItem model Home &amp;quot;Home&amp;quot;
                        , renderMenuItem model About &amp;quot;About&amp;quot;
                        , renderMenuItem model Gallery &amp;quot;Gallery&amp;quot;
                        , renderMenuItem model Contact &amp;quot;Contact&amp;quot;
                        ]
                    ]
                ]
        , div [class &amp;quot;content container-fluid&amp;quot;] [viewPage model]
        , footer
        ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;renderMenuItem&lt;/code&gt; is just changing a navigations item&amp;rsquo;s style based on the current page so I have omitted that.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;viewPage&lt;/code&gt; is where the view is updated depending on which page is current:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;viewPage model =
    case model.page of
        Home -&amp;gt; getHomePage ()
        About -&amp;gt; getAboutPage ()
        Gallery -&amp;gt; getGalleryAsCards ()
        Contact -&amp;gt; getContactPage () 
        CategoryDetail category -&amp;gt; getCategoryPageCards category
        ItemDetail item -&amp;gt; getItemPage item
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see there is a separate view for each page which in return a list of nodes for that particular view, I wont list
them all as the are relatively similar.&lt;/p&gt;

&lt;p&gt;Heres an example of the &lt;code&gt;Category.View&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;getCategoryPageCards category =
    let
        items =
            List.filter (\c -&amp;gt; c.category == category) Data.items
        colClass =
            case List.length items of
                1 -&amp;gt; &amp;quot;col-xs-12&amp;quot;
                2 -&amp;gt; &amp;quot;col-xs-12 col-sm-6&amp;quot;
                _ -&amp;gt; &amp;quot;col-xs-12 col-sm-6 col-md-4&amp;quot;


        itemMapper item =
            div [ class colClass ]
                [ div [ class &amp;quot;card&amp;quot;]
                    [ a [ noContextMenu
                        , href (toHash &amp;lt;| ItemDetail item.id)
                        , onClick&#39; (NavigateTo &amp;lt;| ItemDetail item.id)
                        ]
                        [ img [ noContextMenu, class &amp;quot;card-img-top img-fluid&amp;quot;, src item.img ] [] ]
                    , div [ class &amp;quot;card-block&amp;quot; ]
                        [ p [ class &amp;quot;card-text&amp;quot; ] [ text item.title ] ]
                    ]
                ]
    in
        div [ class &amp;quot;container-fluid&amp;quot; ]
            [ div [ class &amp;quot;row&amp;quot; ]
                (items |&amp;gt; List.map itemMapper)
            , div [] [ backButton ]
            ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The nodes returned from &lt;code&gt;getCategoryPageCards&lt;/code&gt; are returned as part of &lt;code&gt;viewPage&lt;/code&gt;.  Data.items are filtered by the current
category and mapped into &lt;code&gt;divs&lt;/code&gt; with &lt;code&gt;onClick&lt;/code&gt; navigation to the &lt;code&gt;ItemDetail&lt;/code&gt; page&lt;/p&gt;

&lt;h1 id=&#34;navigation&#34;&gt;Navigation&lt;/h1&gt;

&lt;p&gt;Navigation is handled with Elm &lt;a href=&#34;http://package.elm-lang.org/packages/elm-lang/navigation/latest&#34;&gt;Navigation&lt;/a&gt; which provides the &lt;code&gt;Navigation.program&lt;/code&gt; you saw in &lt;a href=&#34;#application-structure&#34;&gt;Application structure&lt;/a&gt;.&lt;br /&gt;
The program function has been extended with an additional two arguments.&lt;/p&gt;

&lt;p&gt;The first additional argument is a &lt;code&gt;Parser&lt;/code&gt;, there is a utility function called &lt;code&gt;makeParser that allows us to turn a 
browser&lt;/code&gt;Location` into whatever data we want to.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;makeParser : (Location -&amp;gt; a) -&amp;gt; Parser a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the &lt;code&gt;Navigation.program&lt;/code&gt; you can see this used along with the functions below to parse a &lt;code&gt;Location&lt;/code&gt; into a &lt;code&gt;Page&lt;/code&gt;: &lt;code&gt;Navigation.program (Navigation.makeParser State.pathParser)&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;pathParser : Navigation.Location -&amp;gt; Result String Page
pathParser location =
    parse identity pageParser (String.dropLeft 1 location.pathname)


pageParser : UrlParser.Parser (Page -&amp;gt; a) a
pageParser =
    oneOf
        [ format Home (oneOf [ s &amp;quot;home&amp;quot;, s &amp;quot;&amp;quot; ])
        , format About (s &amp;quot;about&amp;quot;)
        , format Shop (s &amp;quot;shop&amp;quot;)
        , format Gallery (s &amp;quot;gallery&amp;quot;)
        , format Contact (s &amp;quot;contact&amp;quot;)
        , format (stringToCategoryType &amp;gt;&amp;gt; CategoryDetail) (s &amp;quot;category&amp;quot; &amp;lt;/&amp;gt; UrlParser.string)
        , format ItemDetail (s &amp;quot;item&amp;quot; &amp;lt;/&amp;gt; UrlParser.string)
        ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This leads nicely into parsing, actually first lets look at &lt;code&gt;urlUpdate&lt;/code&gt; because its pretty simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;urlUpdate : Result a Page -&amp;gt; Model -&amp;gt; ( Model, Cmd c )
urlUpdate result model =
    case result of
        Err _ -&amp;gt;
            ( model, Navigation.modifyUrl (pageToString model.page) )

        Ok page -&amp;gt;
            { model | page = page } =&amp;gt; updateAnalytics (pageToString page)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We pattern match on the &lt;code&gt;result&lt;/code&gt; and if its &lt;code&gt;Ok&lt;/code&gt; we update the models page to the one passed in.  If the result is an
error (&lt;code&gt;Err&lt;/code&gt;) then we modify the url with &lt;code&gt;Navigation.modifyUrl&lt;/code&gt; just pointing it back to the previous page.  &lt;code&gt;pageToString&lt;/code&gt;
simply turns the &lt;code&gt;Page&lt;/code&gt; type back into a string.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to strategically ignore &lt;code&gt;updateAnalytics&lt;/code&gt;
for now as this will be covered later.&lt;/p&gt;

&lt;h1 id=&#34;parsing&#34;&gt;Parsing&lt;/h1&gt;

&lt;p&gt;Parsing is handled with a small parser combinator library &lt;a href=&#34;http://package.elm-lang.org/packages/evancz/url-parser/latest/&#34;&gt;url-parser&lt;/a&gt; in the function above you can see how combinators
are used to parse &lt;code&gt;Navigation&lt;/code&gt; into a &lt;code&gt;Page&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;oneOf&lt;/code&gt; is a combinator that will try to match one of the parsers in a list.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; is a string combinator matching a particular string like &amp;ldquo;home&amp;rdquo;, &amp;ldquo;shop&amp;rdquo; etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;/&amp;gt;&lt;/code&gt; is a combinator that matches a &lt;code&gt;/&lt;/code&gt; character in the location like &lt;code&gt;item/myitem&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UrlParser.string&lt;/code&gt; matches any string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format&lt;/code&gt; Is a combinator that allows you to customise or map another &lt;code&gt;Parser&lt;/code&gt;, here it is used to Parsed output into the union types that represent them.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;google-analytics&#34;&gt;Google Analytics&lt;/h1&gt;

&lt;p&gt;Ok back to &lt;code&gt;updateAnalytics&lt;/code&gt; remember from &lt;code&gt;urlUpdate&lt;/code&gt;?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;{ model | page = page } =&amp;gt; updateAnalytics (pageToString page)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;updateAnalytics&lt;/code&gt; is a function defined as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;port updateAnalytics: String -&amp;gt; Cmd msg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes its just a type signature as this is a &lt;a href=&#34;https://guide.elm-lang.org/interop/javascript.html#ports&#34;&gt;port&lt;/a&gt; where we will be sending information out of our app into the fabulous
JavaScript world, I&amp;rsquo;m glad you can&amp;rsquo;t hear the sarcasm in my voice :-)&lt;/p&gt;

&lt;p&gt;Because this is a single page application we need to provide a way to update Google analytics whenever the page navigation
changes otherwise everything will be displayed as a hit to the root.  Luckily all we need is a call to the normal
Google Analytics script via the port we just set up.&lt;/p&gt;

&lt;p&gt;The JavaScript looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var Elm = require(&#39;./App&#39;);
var app = Elm.Main.embed(document.getElementById(&#39;main&#39;));

app.ports.updateAnalytics.subscribe(function (page) {
    ga(&#39;set&#39;, &#39;page&#39;, page);
    ga(&#39;send&#39;, &#39;pageview&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the fist two lines you can see where Elm is embedded into the the html &lt;code&gt;main&lt;/code&gt; element, the important part is where
&lt;code&gt;app.ports.updateAnalytics.subscribe&lt;/code&gt; is used to subscribe to the port Elm is publishing whenever &lt;code&gt;updateAnalytics&lt;/code&gt; is
being called with the new &lt;code&gt;Page&lt;/code&gt;.  The result of this is we can now use Google Analytics to see exactly what page a user
is visiting.&lt;/p&gt;

&lt;p&gt;Actually the &lt;code&gt;GmailCaptcha&lt;/code&gt; message is the same except it uses a &lt;code&gt;Port&lt;/code&gt; defined like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;port captcha : () -&amp;gt; Cmd msg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then the JavaScript subscription is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;app.ports.captcha.subscribe(function () {
    window.open(&#39;http://www.google.com/recaptcha/mailhide/...&#39;, &#39;&#39;, &#39;toolbar=0,scrollbars=0,location=0,statusbar=0,menubar=0,resizable=0,width=500,height=300&#39;);
    return false;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All that&amp;rsquo;s happening here is that when the &lt;code&gt;GmailCaptcha&lt;/code&gt; message is sent a window is opened via the &lt;code&gt;Port&lt;/code&gt; and JavaScript to allow
the email address to be retrieved.&lt;/p&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;This post never intended to explain in detail about creating the web application more just to expose some of the more
interesting parts and to show how much fun it is working in Elm is.&lt;/p&gt;

&lt;p&gt;I used VSCode with the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=sbrink.elm&#34;&gt;elm addin&lt;/a&gt; to build the entire thing and it worked out wonderfully.&lt;/p&gt;

&lt;h2 id=&#34;comparison-with-fable&#34;&gt;Comparison with Fable&lt;/h2&gt;

&lt;p&gt;This is the bit I was dreading a little.  &lt;a href=&#34;https://fable-compiler.github.io/&#34;&gt;Fable&lt;/a&gt; is a F# -&amp;gt; JavaScript transpiler.  I&amp;rsquo;ve done quite a lot of hacking
with Fable and also made some contributions lately.  I would describe Elm as batteries included, and very slick, and
lovely to work in.  I really love using it!  I really like the great compiler message, I also like the public type
annotations that the Elm compiler nudges you to add.  Its very useful when reading code on-line to know the types on the
publicly exposed parts so that you don&amp;rsquo;t have to use a visual editor to find out.  I could probably write an entire post
comparing the two languages so I&amp;rsquo;ll leave it there for now.&lt;/p&gt;

&lt;h1 id=&#34;so-whats-left&#34;&gt;So whats Left?&lt;/h1&gt;

&lt;p&gt;All that&amp;rsquo;s left is the deployment and hosting side which I&amp;rsquo;ll delve into another time.&lt;/p&gt;

&lt;p&gt;If you have any requests for me to go into parts in more detail please leave a comment or ping me on Twitter and I&amp;rsquo;ll add that in too.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Creating fuse applications with fable</title>
      <link>http://7sharpnine.com/2016/06/07/fable-fuse-template/</link>
      <pubDate>Tue, 07 Jun 2016 13:20:49 +0100</pubDate>
      
      <guid>http://7sharpnine.com/2016/06/07/fable-fuse-template/</guid>
      <description>

&lt;p&gt;So as promised here&amp;rsquo;s a guide to creating your first &lt;strong&gt;fable |&amp;gt; fuse&lt;/strong&gt; application&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve made a template available so this can be tried out quickly and easily, I&amp;rsquo;ll run through the
requirements and describe whats in the template.&lt;/p&gt;

&lt;h1 id=&#34;requirements&#34;&gt;Requirements&lt;/h1&gt;

&lt;p&gt;First of all here are the requirements.&lt;/p&gt;

&lt;h2 id=&#34;yeoman&#34;&gt;Yeoman&lt;/h2&gt;

&lt;p&gt;As &lt;a href=&#34;http://fsprojects.github.io/Fable/&#34;&gt;fable&lt;/a&gt; uses &lt;a href=&#34;https://docs.npmjs.com/getting-started/what-is-npm&#34;&gt;npm modules&lt;/a&gt; for dependencies &lt;strong&gt;fable |&amp;gt; fuse&lt;/strong&gt; template will also be based
on them.  I have used &lt;a href=&#34;http://fsprojects.github.io/Fable/docs.html&#34;&gt;Yeoman&lt;/a&gt; as it&amp;rsquo;s very flexible and works nicely.&lt;/p&gt;

&lt;p&gt;So what you need to get Yeoman is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g yo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then to install the &lt;strong&gt;fable |&amp;gt; fuse&lt;/strong&gt; template for Yeoman:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g generator-fable-fuse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice and easy.&lt;/p&gt;

&lt;h2 id=&#34;fable&#34;&gt;Fable&lt;/h2&gt;

&lt;p&gt;Installing Fable is covered in the &lt;a href=&#34;http://fsprojects.github.io/Fable/docs.html&#34;&gt;Fable documentation&lt;/a&gt;, but it&amp;rsquo;s essentially just another npm install:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g fable-compiler
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;fuse&#34;&gt;Fuse&lt;/h2&gt;

&lt;p&gt;Fuse can be downloaded at their site &lt;a href=&#34;https://www.fusetools.com/downloads&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s pretty much all the requirements, let&amp;rsquo;s try this out!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;creating-a-fable-fuse-application&#34;&gt;Creating a &lt;strong&gt;fable |&amp;gt; fuse&lt;/strong&gt; application?&lt;/h1&gt;

&lt;p&gt;OK, so with everything installed how do you get going?&lt;/p&gt;

&lt;p&gt;This is really easy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir fable-fuse-test
cd fable-fuse-test
yo fable-fuse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then follow the prompts, here&amp;rsquo;s a &lt;a href=&#34;https://asciinema.org&#34;&gt;asciinema&lt;/a&gt; session showing the process:&lt;/p&gt;


&lt;figure class=&#34;8u&#34;&gt;
    &lt;a href=&#34;https://asciinema.org/a/9eqmwurfreaspzsmrm0f5ezc9?size=medium&amp;amp;speed=1.75&#34;&gt;
        &lt;img src=&#34;https://asciinema.org/a/9eqmwurfreaspzsmrm0f5ezc9.png&#34; /&gt;
    &lt;/a&gt;
    
&lt;/figure&gt;


&lt;p&gt;Now that the template has been created let&amp;rsquo;s have a look at whats inside.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;project-structure&#34;&gt;Project Structure&lt;/h1&gt;

&lt;p&gt;The structure of a &lt;strong&gt;fable |&amp;gt; fuse&lt;/strong&gt; application is as follows &lt;em&gt;(Using a project name of test)&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├── App
│   ├── MainView.ux
│   └── test.unoproj
├── build.bat
├── build.sh
├── node_modules
│   ├── fable-core
│   ├── fable-fuse
│   └── fable-import-fetch
├── package.json
└── src
    ├── fableconfig.json
    ├── test.fs
    └── test.fsproj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets go through the root files first&lt;/p&gt;

&lt;h2 id=&#34;package-json&#34;&gt;package.json&lt;/h2&gt;

&lt;p&gt;This file has the dependencies for &lt;code&gt;fable |&amp;gt; fuse&lt;/code&gt;.  Currently these are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fable-core&lt;/strong&gt; : This has the main definitions for Fable.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fable-fuse&lt;/strong&gt; : This has the bindings for the Fuse JavaScript API&amp;rsquo;s.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fable-import-fetch&lt;/strong&gt; : This has the F# bindings for JavaScript Fetch API.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;build-sh-build-bat&#34;&gt;build.sh / build.bat&lt;/h2&gt;

&lt;p&gt;These two files contain the script to transpile the F# source into JavaScript.  So upon typing &lt;code&gt;./build.sh&lt;/code&gt; the F# files
will be transpiled into JavaScript and placed into the &lt;code&gt;App/js&lt;/code&gt; folder.  In addition &lt;a href=&#34;http://fsprojects.github.io/Fable/&#34;&gt;Fable&lt;/a&gt; will continue to watch the
F# files and transpile the files if they change so you get realtime updating of the &lt;a href=&#34;https://www.fusetools.com/&#34;&gt;fuse&lt;/a&gt; application.&lt;/p&gt;

&lt;p&gt;Now the directories:&lt;/p&gt;

&lt;h2 id=&#34;app&#34;&gt;App&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;App&lt;/code&gt; directory has all the necessary files that &lt;a href=&#34;https://www.fusetools.com/&#34;&gt;Fuse&lt;/a&gt; requires to build&lt;/p&gt;

&lt;h3 id=&#34;test-unoproj&#34;&gt;test.unoproj&lt;/h3&gt;

&lt;p&gt;This is the project file for Fuse, it has settings for the different platforms and controls which gets embedded in the application.&lt;/p&gt;

&lt;h3 id=&#34;mainview-ux&#34;&gt;MainView.ux&lt;/h3&gt;

&lt;p&gt;This is the main view markup file for the user interface.&lt;/p&gt;

&lt;h2 id=&#34;src&#34;&gt;src&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;src&lt;/code&gt; folder has all the F# source files that &lt;a href=&#34;http://fsprojects.github.io/Fable/&#34;&gt;Fable&lt;/a&gt; transpiles into JavaScript.&lt;/p&gt;

&lt;h3 id=&#34;fableconfig-json&#34;&gt;fableconfig.json&lt;/h3&gt;

&lt;p&gt;This is the configuration file for Fable which allows you to run scrip before or after compilation and set various defaults.&lt;/p&gt;

&lt;h3 id=&#34;test-fs&#34;&gt;test.fs&lt;/h3&gt;

&lt;p&gt;This is the main source file for F# and is the same as the one you saw in the previous post:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;namespace App
open Fable.Core
open Fuse
open Fable.Import
open Fable.Import.Fetch

module test =
    let data = Observable.create()

    promise {
        let! req = GlobalFetch.fetch (Url &amp;quot;http://az664292.vo.msecnd.net/files/ZjPdBhWNdPRMI4qK-colors.json&amp;quot;)
        let! json = req.json ()
        do (data.value &amp;lt;- json) } |&amp;gt; ignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is fairly easy to follow, the &lt;code&gt;promise&lt;/code&gt; block is a custom &lt;a href=&#34;https://msdn.microsoft.com/visualfsharpdocs/conceptual/computation-expressions-%5Bfsharp%5D&#34;&gt;computation expression&lt;/a&gt; that allows each successful JavaScript
promise to execute before the next promise is ran.  In this example &lt;code&gt;GlobalFetch.fetch&lt;/code&gt; and &lt;code&gt;req.json()&lt;/code&gt; both return JavaScript
promises. The promise block runs the &lt;code&gt;GlobalFetch.fetch&lt;/code&gt; function and if it &lt;em&gt;succeeds&lt;/em&gt; it runs the &lt;code&gt;req.json()&lt;/code&gt;
function.  If that too is successful then the observable value &lt;code&gt;data&lt;/code&gt; is updated to the resulting json data.&lt;/p&gt;

&lt;h2 id=&#34;node-modules&#34;&gt;node-modules&lt;/h2&gt;

&lt;p&gt;These are our dependencies, there&amp;rsquo;s fable-core which is required by &lt;a href=&#34;http://fsprojects.github.io/Fable/&#34;&gt;Fable&lt;/a&gt;, also included are &lt;a href=&#34;https://www.npmjs.com/package/fable-fuse&#34;&gt;fable-fuse&lt;/a&gt; which
are the F# bindings to the Fuse JavaScript libraries, and &lt;a href=&#34;https://www.npmjs.com/package/fable-import-fetch&#34;&gt;fable-import-fetch&lt;/a&gt; which is the F# bindings for the
&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/API/Fetch_API&#34;&gt;Fetch JavaScript API&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;running&#34;&gt;Running&lt;/h1&gt;

&lt;p&gt;To get a &lt;strong&gt;fable |&amp;gt; fuse&lt;/strong&gt; application running all you have to do is run the build script &lt;code&gt;./build&lt;/code&gt; which transpiles the
F# files into JavaScript and then watches for any updates to the F# files.  Running a Fuse application is also really easy,
you can do this from within Atom via the &lt;a href=&#34;https://atom.io/packages/fuse&#34;&gt;plugin&lt;/a&gt;, or sublime via that &lt;a href=&#34;https://github.com/fusetools/Fuse.SublimePlugin&#34;&gt;plugin&lt;/a&gt;, or simply just run
&lt;code&gt;fuse preview ./App/&lt;/code&gt; from the project root.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;any-problems&#34;&gt;Any Problems?&lt;/h1&gt;

&lt;p&gt;If you have any problems with the Yeoman generator for &lt;strong&gt;fable |&amp;gt; fuse&lt;/strong&gt; then please log an issue on its
GitHub repo: &lt;a href=&#34;https://github.com/7sharp9/generator-fable-fuse&#34;&gt;generator-fable-fuse&lt;/a&gt;.  If you have any issues with the fable-fuse module itself then please got an issue
on its GitHub repo: &lt;a href=&#34;https://github.com/7sharp9/fable-fuse&#34;&gt;fable-fuse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have an improvements or suggestions then a PR is very welcome too!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;whats-next&#34;&gt;Whats next?&lt;/h1&gt;

&lt;p&gt;If there is enough interest around using &lt;strong&gt;fable |&amp;gt; fuse&lt;/strong&gt; I&amp;rsquo;ll port some of the more intricate samples from the
&lt;a href=&#34;https://www.fusetools.com/examples&#34;&gt;Fuse examples&lt;/a&gt; over to &lt;strong&gt;fable |&amp;gt; fuse&lt;/strong&gt; and also create a GitHub site with all the content relating to it.&lt;/p&gt;

&lt;p&gt;Let me know what you think!!&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Light The Fuse</title>
      <link>http://7sharpnine.com/2016/06/03/light-the-fuse/</link>
      <pubDate>Fri, 03 Jun 2016 11:21:57 +0100</pubDate>
      
      <guid>http://7sharpnine.com/2016/06/03/light-the-fuse/</guid>
      <description>

&lt;p&gt;In this post Im going to be introducing something new and exciting the combination of F#, Fable and Fuse.  If I was American I might say this was the holy trinity of awesomeness!&lt;/p&gt;

&lt;p&gt;This is the start of an exciting new series on using F# as a transpiling language to &amp;ldquo;light the Fuse&amp;rdquo; (pun intended) on new platform and opportunities for F#.&lt;/p&gt;

&lt;p&gt;OK, so now for the introductions&amp;hellip;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;what-is-fable&#34;&gt;What is Fable&lt;/h1&gt;

&lt;p&gt;Put simply Fable is a transpiler for F# that turn F# into JavaScript.  Lets face it JavaScript is really pervasive but not everyone wants to write it.  You can read about how Fable works &lt;a href=&#34;http://fsprojects.github.io/Fable/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;what-is-fuse&#34;&gt;What is fuse?&lt;/h1&gt;

&lt;p&gt;Taken from their site this is what fuse is in a nutshell:&lt;/p&gt;

&lt;h2 id=&#34;fuse-is-for-mobile-app-designers-and-developers&#34;&gt;FUSE IS FOR MOBILE APP DESIGNERS AND DEVELOPERS&lt;/h2&gt;

&lt;p&gt;Create and update the look and feel for native apps in real time
on multiple devices simultaneously.&lt;/p&gt;

&lt;p&gt;Fuse is a set of tools (currently in beta) that makes design and developing native mobile apps for iOS and Android fast, easy and fun. Fuse is free, and we’re actively working towards making it Open Source as well.&lt;/p&gt;

&lt;p&gt;Fuse introduces UX Markup - a XML-based language for creating truly native, data-driven, responsive, smoothly animated and highly interactive experiences, while sharing most of the code between iOS and Android. UX is easy to learn and incredibly powerful.&lt;/p&gt;

&lt;p&gt;Fuse is fast. Based on Uno, a language which compiles down to pure C++ code, and seamlessly interops with Objective-C (iOS) and Java (Android) where needed. The UI is rendered using native platform controls, OpenGL or a combination (best of both worlds).&lt;/p&gt;

&lt;p&gt;For business logic, Fuse runs JavaScript on a separate thread on both iOS and Android, so your UI is fast and responsive no matter what it is doing. Fuse lets you call seamlessly into C++, Java and Objective-C libraries through Uno when you need it.&lt;/p&gt;

&lt;p&gt;You can read about Fuse in more depth on their site &lt;a href=&#34;https://www.fusetools.com/&#34;&gt;here&lt;/a&gt;, you really should take a look.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;introducing-fable-fuse&#34;&gt;Introducing &lt;strong&gt;Fable |&amp;gt; Fuse&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Fable-Fuse is a set of packages that allows you use power of F# with &lt;a href=&#34;https://www.fusetools.com/&#34;&gt;Fuse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First of all lets have a little look at some declarative UI with Fuse.&lt;/p&gt;

&lt;p&gt;This is taken from the original Fuse Sample titled &lt;strong&gt;&lt;em&gt;Parsing JSON fetched over HTTP&lt;/em&gt;&lt;/strong&gt;   which is located &lt;a href=&#34;https://www.fusetools.com/examples/http-json&#34;&gt;here&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://res.cloudinary.com/fusetools/image/upload/w_450%2Ch_450%2Cdpr_1.0%2Cc_limit/examples/media/4343ca40291fab07d70ef87254204bed_http-json-example.webp&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;pre&gt;&lt;code&gt;&amp;lt;App Theme=&amp;quot;Basic&amp;quot; Background=&amp;quot;#eee&amp;quot;&amp;gt;
    &amp;lt;DockPanel&amp;gt;
        &amp;lt;StatusBarBackground Dock=&amp;quot;Top&amp;quot; /&amp;gt;
        &amp;lt;BottomBarBackground Dock=&amp;quot;Bottom&amp;quot; /&amp;gt;
        &amp;lt;ScrollView&amp;gt;
            &amp;lt;Grid ColumnCount=&amp;quot;2&amp;quot;&amp;gt;
                &amp;lt;JavaScript&amp;gt;
                    var Observable = require(&amp;quot;FuseJS/Observable&amp;quot;);

                    var data = Observable();

                    fetch(&#39;http://az664292.vo.msecnd.net/files/ZjPdBhWNdPRMI4qK-colors.json&#39;)
                        .then(function(response) { return response.json(); })
                        .then(function(responseObject) { data.value = responseObject; });

                    module.exports = {
                        data: data
                    };
                &amp;lt;/JavaScript&amp;gt;
                &amp;lt;Each Items=&amp;quot;{data.colorsArray}&amp;quot;&amp;gt;
                    &amp;lt;DockPanel Height=&amp;quot;120&amp;quot; Margin=&amp;quot;10,0&amp;quot;&amp;gt;
                        &amp;lt;Panel DockPanel.Dock=&amp;quot;Top&amp;quot; Margin=&amp;quot;10&amp;quot; Height=&amp;quot;30&amp;quot;&amp;gt;
                            &amp;lt;Rectangle Layer=&amp;quot;Background&amp;quot; CornerRadius=&amp;quot;10&amp;quot; Fill=&amp;quot;#fff&amp;quot;/&amp;gt;
                            &amp;lt;Text Value=&amp;quot;{colorName}&amp;quot; TextAlignment=&amp;quot;Center&amp;quot; Alignment=&amp;quot;Center&amp;quot; /&amp;gt;
                        &amp;lt;/Panel&amp;gt;

                        &amp;lt;Rectangle Layer=&amp;quot;Background&amp;quot; CornerRadius=&amp;quot;10&amp;quot; Fill=&amp;quot;{hexValue}&amp;quot;/&amp;gt;
                    &amp;lt;/DockPanel&amp;gt;
                &amp;lt;/Each&amp;gt;
            &amp;lt;/Grid&amp;gt;
        &amp;lt;/ScrollView&amp;gt;
    &amp;lt;/DockPanel&amp;gt;
&amp;lt;/App&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the UI mark-up is concise and easy to follow, also notice the JavaScript element which can be in-line, as shown here, or placed in a separate file.  We will place this in a separate file so that we can transpile from F# using &lt;a href=&#34;http://fsprojects.github.io/Fable/&#34;&gt;Fable&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;namespace Program
open Fable.Core
open Fuse
open Fable.Import
open Fable.Import.Fetch

module HttpJson =
    let data = Observable.create()
    promise {
        let! req = GlobalFetch.fetch (Url &amp;quot;http://az664292.vo.msecnd.net/files/ZjPdBhWNdPRMI4qK-colors.json&amp;quot;)
        let! json = req.json ()
        do (data.value &amp;lt;- json) } |&amp;gt; ignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see here there is a custom computation expression that allows you to use JavaScrip promises, you could also use a pipeline oriented definition too, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;GlobalFetch.fetch (Url &amp;quot;http://az664292.vo.msecnd.net/files/ZjPdBhWNdPRMI4qK-colors.json&amp;quot;)
|&amp;gt; Promise.success (fun resp -&amp;gt; resp.json())                                                                          
|&amp;gt; Promise.success (fun json -&amp;gt; data.value &amp;lt;- json) 
|&amp;gt; ignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if you really really wanted to you could integrate this into an F# async with a little helper type extension:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module AsyncExtensions =    
    type Microsoft.FSharp.Control.AsyncBuilder with
        member x.Bind(p, f) = 
            async.Bind (Async.AwaitPromise(p), f)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would allow you to use a promise with an ordinary &lt;code&gt;let!&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;async {
    let! req = GlobalFetch.fetch &amp;quot;http://az664292.vo.msecnd.net/files/ZjPdBhWNdPRMI4qK-colors.json&amp;quot;
    let! json = req.json ()
    do (data.value &amp;lt;- json) } |&amp;gt; Async.Start 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anyway I digress, needless to say there are various options with promises and how to handle them with &lt;strong&gt;Fable |&amp;gt; Fuse&lt;/strong&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://i.imgur.com/P4YcEi7.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;What&amp;rsquo;s more because Fuse and Fable are real-time you can edit the UX definitions and it the application in real-time across multiple devices!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://7sharpnine.com/img/fable-fuse/realtime.gif&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;hr /&gt;

&lt;h2 id=&#34;so-how-do-i-get-started-with-fable-fuse&#34;&gt;So how do I get started with &lt;strong&gt;Fable |&amp;gt; Fuse&lt;/strong&gt; ?&lt;/h2&gt;

&lt;p&gt;Well you&amp;rsquo;ll have to hold your horses, I was so excited to share this introductory post I haven&amp;rsquo;t wrote that part yet.  The package I&amp;rsquo;m working on is still private while I finalise things and make it really easy and friendly to create applications with &lt;strong&gt;Fable |&amp;gt; Fuse&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Stay tuned as there will be more in this series next week as I discuss the more technical aspects and how to create your first &lt;strong&gt;Fable |&amp;gt; Fuse&lt;/strong&gt; application.&lt;/p&gt;

&lt;p&gt;If there is enough interest I will also live stream this on my &lt;a href=&#34;https://www.livecoding.tv/7sharp9/&#34;&gt;livecoding.tv channel&lt;/a&gt;, please subscribe.&lt;/p&gt;

&lt;p&gt;A really big thanks to Alfonso Garcia-Caro (&lt;a href=&#34;https://twitter.com/alfonsogcnunez&#34;&gt;@alfonsogcnunez&lt;/a&gt;) creator of Fable for answering all my annoying questions.  And Lars Thomas Denstad (&lt;a href=&#34;https://twitter.com/COCPORN&#34;&gt;@cocporn&lt;/a&gt;) for help creating the Fuse API bindings for Fable.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>