<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Csharp on 7sharp9</title>
    <link>http://7sharp9.github.io/tags/csharp/</link>
    <description>Recent content in Csharp on 7sharp9</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Dave Thomas</copyright>
    <lastBuildDate>Sun, 01 Jun 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://7sharp9.github.io/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Anything you can do ...</title>
      <link>http://7sharp9.github.io/2014/06/01/2014-06-01-anything-you-can-do/</link>
      <pubDate>Sun, 01 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2014/06/01/2014-06-01-anything-you-can-do/</guid>
      <description>For any of you that are aware of the newly updated Xamarin Web site, you may have seen the following:
 Objective-C was ahead of its time 30 years ago. C# is ahead of its time today. Anything you can do in Objective-C or Java, you can do in C# with Xamarinâ€”usually more succinctly and with fewer bugs.
 What is also true is that F# is way ahead of its time, and you can produce even more succinct code with even fewer bugs than C#!</description>
    </item>
    
    <item>
      <title>Can I have some F# with that?</title>
      <link>http://7sharp9.github.io/2013/06/21/2013-06-21-can-i-have-some-fsharp-with-that/</link>
      <pubDate>Fri, 21 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2013/06/21/2013-06-21-can-i-have-some-fsharp-with-that/</guid>
      <description>There&amp;rsquo;s been a fair bit of activity lately from a project called ScriptCS, it allows you to put together a project using C# as a lightweight scripting language, forgoing the use of Visual Studio which can sometimes be too bloated and bulky.
It also allows you to use C# in a Read Evaluate Print Loop - REPL. This is nothing new to F# and indeed lots of other languages have REPL&amp;rsquo;s too.</description>
    </item>
    
    <item>
      <title>Monster Zero - Revisited</title>
      <link>http://7sharp9.github.io/2013/06/05/2013-06-05-monster-zero-revisited/</link>
      <pubDate>Wed, 05 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2013/06/05/2013-06-05-monster-zero-revisited/</guid>
      <description>This creature is capable of tremendous destruction due to it&amp;rsquo;s size, flight (with the creature&amp;rsquo;s wings also generating hurricane strength winds) and possesses several breath weapons (e.g., heat and energy).
What am I talking about here? Maybe it&amp;rsquo;s Monster Zero or King Ghidorah as it&amp;rsquo;s sometimes known. No it&amp;rsquo;s TPL Dataflow! Yeah, yeah, I have a penchant for being over dramatic and writing quirky intros. This post is about TPL Dataflow otherwise known as TDF.</description>
    </item>
    
    <item>
      <title>Some kind of monster</title>
      <link>http://7sharp9.github.io/2013/06/01/2013-06-01-some-kind-of-monster/</link>
      <pubDate>Sat, 01 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2013/06/01/2013-06-01-some-kind-of-monster/</guid>
      <description>What&amp;rsquo;s 100 meters high and weighs in at around 60,000 tons? No its not Godzilla, its Reactive extensions!
Lately on one of my projects I have been doing a lot of stream manipulation, and although I solved the problem quite easily using F# async workflows, there were other solutions available to help solve the problem. I could of used things like async await, TPL Dataflow(TDF), and Reactive Extensions (Rx).</description>
    </item>
    
    <item>
      <title>I node something (Bout You)</title>
      <link>http://7sharp9.github.io/2013/05/05/2013-05-05-i-node-something/</link>
      <pubDate>Sun, 05 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2013/05/05/2013-05-05-i-node-something/</guid>
      <description>What is Edge.js?  Unless you live in a hole you have probably heard of node.js so I&amp;rsquo;ll not bother to explain what it is or what it does. An interesting project has come to light lately, namely Edge.js. The Edge.js project allows you to connect node.js with .Net.
The creator of Edge.js Tomasz Janczuk sums this up nicely:
 An edge connects two nodes
This edge connects node.js with .</description>
    </item>
    
    <item>
      <title>iOS async revisited</title>
      <link>http://7sharp9.github.io/2013/04/18/2013-04-18-ios-async-revisited/</link>
      <pubDate>Thu, 18 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2013/04/18/2013-04-18-ios-async-revisited/</guid>
      <description>In this post weare going to look as async again, but from the perspective of F#.
Xamarin Evolve 2013    I have been watching the Xamarin Evolve conference this week and it was good to see Miguel announce full support for F#. Those that follow me on twitter etc, will know that I have been doing F# for quite a while in MonoDevelop and Xamarin Studio. The new support currently entails some new project templates so that you can easily create epic new F# Apps without having to refer to my blog.</description>
    </item>
    
    <item>
      <title>A little bit of iOS async</title>
      <link>http://7sharp9.github.io/2013/04/16/2013-04-16-a-little-bit-of-ios-async/</link>
      <pubDate>Tue, 16 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2013/04/16/2013-04-16-a-little-bit-of-ios-async/</guid>
      <description>I was going to title this post as &amp;lsquo;Now for something completely different&amp;rsquo; but felt that a little bit too Pythonesque, and when I thought about it a bit it isn&amp;rsquo;t really completely just slightly different, namely C# rather than my usual F# posts. Right, enough of the waffling, this post is a little tour into the relatively unknown area of async on iOS. Xamarin announced the alpha preview of async await on March 11th this year (2013).</description>
    </item>
    
    <item>
      <title>Whats in your toolbox?</title>
      <link>http://7sharp9.github.io/2012/08/27/2012-08-23-whats-in-your-toolbox/</link>
      <pubDate>Mon, 27 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2012/08/27/2012-08-23-whats-in-your-toolbox/</guid>
      <description>If I walk into my garage now and open up a toolbox, whats inside?
Here&amp;rsquo;s a quick selection:
 Ball-peen hammer Jointer plane 1&amp;frasl;2 inch mortise chisel Soldering iron Set square Low angle block plane Torx screw drivers Hack saw Monkey wrench Pipe cutter  Notice it doesn&amp;rsquo;t just contain:
 A sledge hammer.  Different tools have different purposes, you wouldn&amp;rsquo;t use a hammer and try to cut down a tree, or use a chisel to hammer a nail.</description>
    </item>
    
    <item>
      <title>Back to the Primitive II</title>
      <link>http://7sharp9.github.io/2012/04/22/2012-04-22-back-to-the-primitive-ii/</link>
      <pubDate>Sun, 22 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2012/04/22/2012-04-22-back-to-the-primitive-ii/</guid>
      <description>In the last post I discussed an asynchronous version of the ManualResetEvent and as promised this time we will be looking at an asynchronous version of the AutoResetEvent. I&amp;rsquo;m using Stephen Toubs post as reference and we will be building a version that is functional in style that maps straight into asynchronous work flows without and conversion or adaptors.
What is an AutoResetEvent? An AutoResetEvent can be described as a turnstile mechanism, it lets a single waiting person through before re-latching waiting for the next signal.</description>
    </item>
    
    <item>
      <title>Black-Scholes Taste Test</title>
      <link>http://7sharp9.github.io/2012/03/11/2012-03-10-black-scholes-taste-test/</link>
      <pubDate>Sun, 11 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2012/03/11/2012-03-10-black-scholes-taste-test/</guid>
      <description>In this edition we are going to be doing a taste test, C# vs F#. Oh yeah, if you quickly glanced at the title you may have thought this was a recipe for black scones, as interesting and tasty as that may be, unfortunately its going to be finance related.
I recently presented a paper on the benefits of F#, part of this was a comparison of the famous Black-Scholes equation in both C# and F#.</description>
    </item>
    
    <item>
      <title>From C# to F#: A Developer&#39;s Perspective</title>
      <link>http://7sharp9.github.io/2011/07/16/2011-07-16-from-csharp-to-fsharp-a-developers-perspective/</link>
      <pubDate>Sat, 16 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2011/07/16/2011-07-16-from-csharp-to-fsharp-a-developers-perspective/</guid>
      <description>I recently wrote an article for Developer Fusion on the changes in mindset required when moving from C# to F#.
The article has proved to be more more popular than I envisaged. I think a lot of .Net developers are interested in F# but are unsure on the path to take when trying to accomplish this. For me it was almost a leap of faith, I saw the potential benefits and just jumped right in.</description>
    </item>
    
    <item>
      <title>Sockets and Bockets 1</title>
      <link>http://7sharp9.github.io/2011/01/13/2011-01-13-sockets-and-bockets-1/</link>
      <pubDate>Thu, 13 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2011/01/13/2011-01-13-sockets-and-bockets-1/</guid>
      <description>Welcome to part 1 A while back I read an interesting article by Brian McNamara f-async-on-the-server-side which describes C# and F# versions of a simple asynchronous socket server, one of the driving forces behind the article was how F# can wrap the traditional asynchronous model with Asynchronous Workflows, this produces nice clean simple code compared to the C# version which uses lambda expressions, the code looks quite ugly in this style!</description>
    </item>
    
  </channel>
</rss>