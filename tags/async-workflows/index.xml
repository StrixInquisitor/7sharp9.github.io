<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Async Workflows on 7sharp9</title>
    <link>http://7sharpnine.github.io/tags/async-workflows/</link>
    <description>Recent content in Async Workflows on 7sharp9</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Dave Thomas</copyright>
    <lastBuildDate>Sun, 15 Jul 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://7sharpnine.github.io/tags/async-workflows/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Lurking Horror</title>
      <link>http://7sharpnine.github.io/2012/07/15/2012-07-15-the-lurking-horror/</link>
      <pubDate>Sun, 15 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.github.io/2012/07/15/2012-07-15-the-lurking-horror/</guid>
      <description>Deep in the darkest depths lurks an ancient horror, when the time is right it will rise forth and leave you screaming for mercy and begging for forgiveness&amp;hellip;
 OK, I have a penchant for being over dramatic but in this post I am going to reveal some little known caveats in a well known and much revelled area of F#, agents aka the MailboxProcessor. Gasp!
First let me give you a demonstration:</description>
    </item>
    
    <item>
      <title>FSharp Dataflow agents III</title>
      <link>http://7sharpnine.github.io/2012/02/20/2012-02-19-fsharp-dataflow-agents-iii/</link>
      <pubDate>Mon, 20 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.github.io/2012/02/20/2012-02-19-fsharp-dataflow-agents-iii/</guid>
      <description>This will be the last post on rebuilding the MailboxProcessor using TDF, here&amp;rsquo;s a quick discussion of the missing pieces&amp;hellip;
First, lets start with the simple ones, these don&amp;rsquo;t really require much discussion.
DefaultTimeout let mutable defaultTimeout = Timeout.Infinite member x.DefaultTimeout with get() = defaultTimeout and set(value) = defaultTimeout &amp;lt;- value  This simply provides a mutable property using Timeout.Infinite as a default setting.
CurrentQueueLength member x.CurrentQueueLength() = incomingMessages.Count  Another simple one, this methods uses into the underlying BufferBlock to extract its current queue length using its Count property.</description>
    </item>
    
    <item>
      <title>F# Dataflow Agents Part II</title>
      <link>http://7sharpnine.github.io/2012/01/30/2012-01-24-fsharp-dataflow-agents-ii/</link>
      <pubDate>Mon, 30 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.github.io/2012/01/30/2012-01-24-fsharp-dataflow-agents-ii/</guid>
      <description>Right, no messing about this time, straight to the code.
Construction This is pretty straight forward and I don&amp;rsquo;t want to detract from the important bits of this post, the only thing of note is the cancellationToken which is initialized to a default value using the defaultArg function if the optional parameter cancellationToken is not supplied. The TDF construct that we to use to perform most of the hard work is incomingMessages which is a BufferBlock&amp;lt;&#39;Msg&amp;gt;.</description>
    </item>
    
    <item>
      <title>F# Dataflow Agents Part I</title>
      <link>http://7sharpnine.github.io/2012/01/22/2012-01-22-fsharp-dataflow-agents-i/</link>
      <pubDate>Sun, 22 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.github.io/2012/01/22/2012-01-22-fsharp-dataflow-agents-i/</guid>
      <description>This is going to be a new series on using TPL Dataflow with F#. First a little bit of history and background.
TPL Dataflows heritage and background TPL Dataflow or (TDF) has been around for quite a while, it first surfaced more than a year ago as the successor to the Concurrency and Coordination Runtime (CCR) and with coming release of .Net 4.5 it will be part of the System.</description>
    </item>
    
    <item>
      <title>Fixing a hole...</title>
      <link>http://7sharpnine.github.io/2011/12/11/2011-12-11-fixing-a-hole/</link>
      <pubDate>Sun, 11 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.github.io/2011/12/11/2011-12-11-fixing-a-hole/</guid>
      <description>Due to popular demand&amp;hellip; well, I had a couple of requests anyway :-) Heres a post inspired by my recent encounters profiling some of the code in Fracture-IO. I have recently been profiling the code in fracture to remove any so called low hanging fruits. During this time I also noticed an increase in memory allocation. I remembered I had recently been experimenting in a branch using pipelets as a buffer between the send and receive stages in the Http Server, so I set up a simple test to see if pipelets were contributing to the memory allocation issues I was seeing.</description>
    </item>
    
    <item>
      <title>Agent based scheduling</title>
      <link>http://7sharpnine.github.io/2011/07/03/2011-07-03-agent-based-scheduling/</link>
      <pubDate>Sun, 03 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.github.io/2011/07/03/2011-07-03-agent-based-scheduling/</guid>
      <description>One of the areas that I am very interested in is agents and I have been doing quite a lot of work in this area lately.
Agents can be used for a multitude of different purposes ranging from: isolated message passing, object caching, finite state machines, web crawling, and even reactive user interfaces. One of the ideas that I have been looking into lately is agent based scheduling.SchedulerAgent A simple Agent based scheduler:</description>
    </item>
    
    <item>
      <title> Agents and ObjectPools</title>
      <link>http://7sharpnine.github.io/2011/06/05/2011-06-05-agents-and-objectpools/</link>
      <pubDate>Sun, 05 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.github.io/2011/06/05/2011-06-05-agents-and-objectpools/</guid>
      <description>Everyone knows F# agents are cool right? Well here&amp;rsquo;s yet another example of how versatile they can be&amp;hellip;
There was a series of posts last April by Stephen Toub from the pfxteam at Microsoft. I was reading through some of the posts again the other day and thought some of the ideas presented there would make interesting projects in F# to demonstrate the flexibility and succinctness of the language. I thought the ObjectPool example would make an interesting project in F# using agents aka MailboxProcessors.</description>
    </item>
    
    <item>
      <title>Pipeline processing 3</title>
      <link>http://7sharpnine.github.io/2011/04/04/2011-04-04-pipeline-processing-3/</link>
      <pubDate>Mon, 04 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.github.io/2011/04/04/2011-04-04-pipeline-processing-3/</guid>
      <description>Ok so I have been offline for a while now, what with starting a new financial contract in London and not having any broadband access for a while. I have been working on something, honest!
Since the last post I have been reflecting on the pipeline design and it had a distinct object orientated feel to it that I wasnt happy with, so I have amended the structure of the code and come up with the following which simplifies in some areas and expands in others&amp;hellip;module Pipeline open System.</description>
    </item>
    
    <item>
      <title>Sockets and Bockets 3</title>
      <link>http://7sharpnine.github.io/2011/01/20/2011-01-20-sockets-and-bockets-part-3/</link>
      <pubDate>Thu, 20 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.github.io/2011/01/20/2011-01-20-sockets-and-bockets-part-3/</guid>
      <description>Welcome to part three! As promised heres a description of the inner workings. I&amp;rsquo;m sick to death of typing SocketAsyncEventArgs so from now on I will refer to it as SAEA.BocketPool
The BocketPool has an interesting name and with it an interesting constructor! It takes the following parameters:
number: The number of items to create in the BocketPool. size: The size of each buffer in bytes. callback: A callback function which is invoked whenever the SAEA object completes its operation.</description>
    </item>
    
    <item>
      <title>Sockets and Bockets 2</title>
      <link>http://7sharpnine.github.io/2011/01/14/2011-01-14-sockets-and-bockets-part-2/</link>
      <pubDate>Fri, 14 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.github.io/2011/01/14/2011-01-14-sockets-and-bockets-part-2/</guid>
      <description>Welcome to part two Lets jump in at the deep end and take a look at some code&amp;hellip;
When you look at the method syntax for the xxxAsync methods you will notice they return a boolean value that indicates if the method completed synchronously, this means that you have to check the return value every time you use one of the methods and invoke the callback yourself if it completes synchronously.</description>
    </item>
    
    <item>
      <title>Sockets and Bockets 1</title>
      <link>http://7sharpnine.github.io/2011/01/13/2011-01-13-sockets-and-bockets-1/</link>
      <pubDate>Thu, 13 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.github.io/2011/01/13/2011-01-13-sockets-and-bockets-1/</guid>
      <description>Welcome to part 1 A while back I read an interesting article by Brian McNamara f-async-on-the-server-side which describes C# and F# versions of a simple asynchronous socket server, one of the driving forces behind the article was how F# can wrap the traditional asynchronous model with Asynchronous Workflows, this produces nice clean simple code compared to the C# version which uses lambda expressions, the code looks quite ugly in this style!</description>
    </item>
    
  </channel>
</rss>