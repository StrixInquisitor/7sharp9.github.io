<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memory Fragmentation on 7sharp9</title>
    <link>http://7sharpnine.com/tags/memory-fragmentation/</link>
    <description>Recent content in Memory Fragmentation on 7sharp9</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Dave Thomas</copyright>
    <lastBuildDate>Fri, 28 Jan 2011 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://7sharpnine.com/tags/memory-fragmentation/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sockets and Bockets 4</title>
      <link>http://7sharpnine.com/2011/01/28/2011-01-28-sockets-and-bockets-part-4/</link>
      <pubDate>Fri, 28 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2011/01/28/2011-01-28-sockets-and-bockets-part-4/</guid>
      <description>

&lt;h2 id=&#34;welcome-to-part-4&#34;&gt;Welcome to part 4&lt;/h2&gt;

&lt;p&gt;If you were looking forward to some exciting new F# code this time your going
to be disappointed, however if you are like me and like looking at graphs and
stats and digging in deeper into the code then your going to enjoy this, lets
get started&amp;hellip;&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;I set up a 5 minute test with 50 clients connecting to the server with a 15ms
interval between each one.  Once connected each client receives a 128 byte
message from the server every 100ms so this will be a 500 messages per second
test.  I am going to be using an excellent product called &lt;a href=&#34;http://bit.ly/e4ToaO&#34;&gt;YourKit Profilerfor .NET&lt;/a&gt; it can do both memory and CPU profiling as
well as displaying telemetry for things like thread count, stack contents,
memory allocations etc.  It can be configured to be a lot less intrusive than
a lot of other profilers and I have had a lot of success using it.  You can
download a demo from their site using the link above.  I will be doing some
other articles on using profiling and analysis tools later on so stay tuned
for those too.  All of the graphs and information gathered in this post come
from YourKits output during CPU and memory profiling.&lt;/p&gt;

&lt;p&gt;Before we start here&amp;rsquo;s a reminder of what the client code looks like, this is
a simple test client using Brian&amp;rsquo;s code as mentioned in
&lt;a href=&#34;http://7sharpnine.com/posts/sockets-and-bockets-1/&#34;&gt;Part1&lt;/a&gt; I have highlighted the lines that
have changed below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;    open System.Net
    open System.Net.Sockets  
    let quoteSize = 128  
    type System.Net.Sockets.TcpClient with
      member client.AsyncConnect(server, port, clientIndex) =
        Async.FromBeginEnd(server, port,(client.BeginConnect : IPAddress * int * _ * _ -&amp;gt; _), client.EndConnect)  
    let clientRequestQuoteStream (clientIndex, server, port:int) =
      async {
        let client = new System.Net.Sockets.TcpClient()
        do!  client.AsyncConnect(server,port, clientIndex)
        let stream = client.GetStream()
        let! header = stream.AsyncRead 1 // read header
        while true do
          let! bytes = stream.AsyncRead quoteSize
          if Array.length bytes &amp;lt;&amp;gt; quoteSize then
            printfn &amp;quot;client incorrect checksum&amp;quot;
      }  
    let myLock = new obj()  
    let clientAsync clientIndex =
      async {
        do! Async.Sleep(clientIndex*15)
        if clientIndex % 10 = 0 then
          lock myLock (fun() -&amp;gt; printfn &amp;quot;%d clients...&amp;quot; clientIndex)
        try
          do! clientRequestQuoteStream (clientIndex, IPAddress.Loopback, 10003)
        with e -&amp;gt;
          printfn &amp;quot;CLIENT %d ERROR: %A&amp;quot; clientIndex e
          //raise e
      }  
    Async.Parallel [ for i in 1 .. 50 -&amp;gt; clientAsync i ]
      |&amp;gt; Async.Ignore
      |&amp;gt; Async.Start
    System.Console.ReadKey() |&amp;gt; ignore
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;cpu-and-threading-performance&#34;&gt;CPU and threading performance&lt;/h2&gt;

&lt;p&gt;First of all lets look at the CPU results from the &lt;em&gt;IAsync&lt;/em&gt; pattern:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lh5.googleusercontent.com/-3H8-TiiB-VI/TwYhL2mvYsI/AAAAAAAABQI/z8dmiHBvTJE/mcnamara-cpu1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Heres the same run from the SAEA pattern:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lh3.googleusercontent.com/-yGB2zdE3kGM/TwYhLPrUmLI/AAAAAAAABP8/Y6CIMWOi4Gk/Bocket-cpu2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;You can see that both the number of threads and the amount of CPU is a quite a
lot less in the SAEA pattern.  The spike at the beginning is the allocation of
buffers for the BocketPool.&lt;/p&gt;

&lt;p&gt;Now lets move on to memory and garbage collection.&lt;/p&gt;

&lt;h2 id=&#34;memory-allocation&#34;&gt;Memory Allocation&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s a graph of the heap and process memory allocation in the &lt;strong&gt;IAsync&lt;/strong&gt;
pattern, green is generation 0, blue is generation 1 and orange is the large
object heap.  There&amp;rsquo;s also red for generation 2 but the results are behind the
others and they are only small 0,2 MB peaks at 5 to 15 second intervals.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lh3.googleusercontent.com/-PalohQxAkOg/TwYhL6hR5JI/AAAAAAAABQQ/NtCLYc43OZc/mcnamara-mem1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Heres the same but for the SAEA pattern, there are red peaks every 10- 20
second intervals of 0.2MB hidden under the others.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lh3.googleusercontent.com/-Nadz1nXQ7lg/TwYhLBXMvcI/AAAAAAAABQM/xCfuXkzkekM/Bocket-mem1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;As you can see the heap memory is around half the size and the process memory is 15MB less.&lt;/p&gt;

&lt;h2 id=&#34;memory-hotspots&#34;&gt;Memory Hotspots&lt;/h2&gt;

&lt;p&gt;Finally here&amp;rsquo;s a couple of screen shot of the hot spots for memory allocations
in both implementations&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lh4.googleusercontent.com/-n3QWLgvNjq8/TwYhLX8cIZI/AAAAAAAABQA/LkeRno775Ew/s800/IAsync-hot.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;IAsync&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;figure &gt;
    
        &lt;img src=&#34;https://lh5.googleusercontent.com/-PSX_YUfxkgU/TwYhMr40DTI/AAAAAAAABQY/D8bgLS6kNwc/s800/SAEA-hot.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;SAEA&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;You can clearly the &lt;strong&gt;IAsync&lt;/strong&gt; allocations are not present in the SAEA
implementation and there are 310,188 of them, that&amp;rsquo;s 27% of the total garbage!&lt;/p&gt;

&lt;h2 id=&#34;final-thoughts&#34;&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;The SAEA pattern definitely cuts down on memory and CPU usage, yes it adds a
lot of complexity but if your application is dealing with a very high volume
of traffic or clients and you need optimal performance then I think its the
way to go.&lt;/p&gt;

&lt;p&gt;The optimisations don&amp;rsquo;t stop there either, if you think about it the receive
Bocketpool is not even used here, if we collapsed all of the BocketPools into
a single contiguous store then we would use even less resources, this means we
could support even more clients or throughput.  In a typical high volume
scenario you are looking at doubling your throughput or number of client
connections.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s definitely a lot more or interesting things to explore in this area.&lt;/p&gt;

&lt;p&gt;As usual any comments are welcome.&lt;/p&gt;

&lt;p&gt;See you next time&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sockets and Bockets 3</title>
      <link>http://7sharpnine.com/2011/01/20/2011-01-20-sockets-and-bockets-part-3/</link>
      <pubDate>Thu, 20 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2011/01/20/2011-01-20-sockets-and-bockets-part-3/</guid>
      <description>

&lt;h2 id=&#34;welcome-to-part-three&#34;&gt;Welcome to part three!&lt;/h2&gt;

&lt;p&gt;As promised heres a description of the inner workings.  I&amp;rsquo;m sick to death of
typing SocketAsyncEventArgs so from now on I will refer to it as SAEA.&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BocketPool&lt;/strong&gt;&lt;br /&gt;
The BocketPool has an interesting name and with it an interesting constructor!
It takes the following parameters:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;number&lt;/strong&gt;: The number of items to create in the BocketPool. &lt;strong&gt;size&lt;/strong&gt;: The size of each buffer in bytes. &lt;strong&gt;callback&lt;/strong&gt;: A callback function which is invoked whenever the SAEA object completes its operation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type BocketPool( number, size, callback) as this =
    let number = number
    let size = size
    let totalsize = (number * size)
    let buffer = Array.create totalsize 0uy
    let pool = new BlockingCollection&amp;lt;SocketAsyncEventArgs&amp;gt;(number:int)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;strong&gt;buffer&lt;/strong&gt; is created with a size equal to the (&lt;strong&gt;number&lt;/strong&gt; * &lt;strong&gt;size&lt;/strong&gt;)
in bytes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;do
      let rec loop n =
        match n with
        | x when x &amp;lt; totalsize -&amp;gt;
          let saea = new SocketAsyncEventArgs()
          saea.Completed |&amp;gt; Observable.add callback
          saea.SetBuffer(buffer, n, size)
          this.CheckIn(saea)
          loop (n + size)
        | _ -&amp;gt; ()
      loop 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The tail recursive loop function creates a SAEA object and adds it to the
BlockingCollection(pool).&lt;/p&gt;

&lt;p&gt;The buffer is assigned to each SAEA but each is given a unique offset to use,
this is done by the SetBuffer method.  Using this method of allocation, memory
fragmentation is reduced to a minimum by allowing the same buffer to be
reused.&lt;/p&gt;

&lt;p&gt;We use the pipeline operator to attach the &lt;strong&gt;Completed&lt;/strong&gt; event to the callback
method that is passed in the constructor.&lt;/p&gt;

&lt;p&gt;The CheckIn, CheckOut, and Count methods are simply wrappers around the
BlockingCollection.&lt;/p&gt;

&lt;p&gt;We also implement &lt;strong&gt;IDisposable&lt;/strong&gt; to take care of the disposal of the SAEA in the
BlockingCollection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connection&lt;/strong&gt;&lt;br /&gt;
The main purpose for this type is to encapsulate the sending and receiving of
messages for a particular client. A BocketPool is created for both the send
and receive operations, the receiveCompleted and SentCompleted are invoked
when the respective operations complete.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Send&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member this.Send (msg:byte[]) =
  let s = sendPool.CheckOut()
  Buffer.BlockCopy(msg, 0, s.Buffer, s.Offset, msg.Length)
  socket.SendAsyncSafe(this.sendCompleted, s)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Initially a Bocket is checked out of the sendPool using sendPool.Checkout(),
the &lt;strong&gt;msg&lt;/strong&gt; byte array is copied to the corresponding &lt;strong&gt;Offset&lt;/strong&gt; property of
the SAEA.&lt;/p&gt;

&lt;p&gt;Finally the SendAsyncSafe extension method is called passing in the SAEA and
the callback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sendCompleted&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member this.sendCompleted (args: SocketAsyncEventArgs) =
      try
        match args.LastOperation with
        | SocketAsyncOperation.Send -&amp;gt;
          match args.SocketError with
          | SocketError.Success -&amp;gt;
            ()
          | SocketError.NoBufferSpaceAvailable
          | SocketError.IOPending
          | SocketError.WouldBlock -&amp;gt;
            if not(anyErrors) then
              anyErrors &amp;lt;- true
              failwith &amp;quot;Buffer overflow or send buffer timeout&amp;quot;
          | _ -&amp;gt; args.SocketError.ToString() |&amp;gt; printfn &amp;quot;socket error on send: %s&amp;quot;
        | _ -&amp;gt; failwith &amp;quot;invalid operation, should be receive&amp;quot;
      finally
        sendPool.CheckIn(args)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function matches the LastOperation property of the SAEA using pattern
matching, this ensures that the LastOperation is always SocketError.Success.&lt;/p&gt;

&lt;p&gt;We raise exceptions on NoBufferSpaceAvailable, IOPending, and WouldBlock as
buffer overflows and match any other conditions the wildcard.&lt;/p&gt;

&lt;p&gt;Finally we Check the Bocket back in so that it can be reused.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;receiveCompleted&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member this.receiveCompleted (args: SocketAsyncEventArgs) =
      try
        match args.LastOperation with
        | SocketAsyncOperation.Receive -&amp;gt;
          match args.SocketError with
          | SocketError.Success -&amp;gt;
            socket.ReceiveAsyncSafe( this.receiveCompleted, receivePool.CheckOut())
            let data = Array.create args.BytesTransferred 0uy
            Buffer.BlockCopy(args.Buffer, args.Offset, data, 0, data.Length)
            let client = args.RemoteEndPoint
            args.RemoteEndPoint &amp;lt;- null
            data |&amp;gt; printfn &amp;quot;received data: %A&amp;quot;
          | _ -&amp;gt; args.SocketError.ToString() |&amp;gt; printfn &amp;quot;socket error on receive: %s&amp;quot;
        | _ -&amp;gt; failwith &amp;quot;unknown operation, should be receive&amp;quot;
      finally
        receivePool.CheckIn(args)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function is very similar to the sendCompleted and could probably be
refactored a bit using the &lt;a href=&#34;http://enfranchisedmind.com/blog/posts/the-hole-in-the-middle-
pattern/&#34;&gt;Hole in the middle
pattern&lt;/a&gt;.  Again we check to ensure the last operation was a success, we
checkout another Bocket and start another ReceiveAsyncSafe. This ensures that
the socket can begin another receive operation as soon as possible while we
take the data from the SAEA Buffer, we do this with Buffer.Block copy.&lt;/p&gt;

&lt;p&gt;If this were a fully-fledged API then we would raise an event here so that
users of the component could consume the data.&lt;/p&gt;

&lt;p&gt;In my own component the data is inserted into a series of processing stages
using the &lt;a href=&#34;http://www.cise.ufl.edu/research/ParallelPatterns
/PatternLanguage/AlgorithmStructure/Pipeline.htm&#34;&gt;Pipeline Pattern&lt;/a&gt;, which I will be may
describe in a future post if anyone&amp;rsquo;s interested.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TcpListener&lt;/strong&gt;&lt;br /&gt;
The TcpListener is very similar to the Connection object in that it has a pool
of SAEA objects that are used to accept connection from clients, again a round
of refactoring could be done here to avoid duplication with the Connection
type.  The main difference is that we don&amp;rsquo;t need to use the Buffer on the SAEA
to send anything to the client when it initially connects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;acceptCompleted&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member this.acceptcompleted (args : SocketAsyncEventArgs) =
      try
        match args.LastOperation with
        | SocketAsyncOperation.Accept -&amp;gt;
          match args.SocketError with
          | SocketError.Success -&amp;gt;
            listeningSocket.AcceptAsyncSafe( this.acceptcompleted, acceptPool.Take())
            //create new connection
            let connection = newConnection args.AcceptSocket
            connection.Start()  
            //update stats
            reportConnections   
            //async start of messages to client
            startSending connection  
            //remove the AcceptSocket because we will be reusing args
            args.AcceptSocket &amp;lt;- null
          | _ -&amp;gt; args.SocketError.ToString() |&amp;gt; printfn &amp;quot;socket error on accept: %s&amp;quot;
        | _ -&amp;gt; args.LastOperation |&amp;gt; failwith &amp;quot;Unknown operation, should be accept but was %a&amp;quot;
      finally
        acceptPool.Add(args)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function is similar to the send and receive completed methods in the
Connection type, although this time we create a Connection object and call the
Start function, this puts the Connection into receive mode.&lt;/p&gt;

&lt;p&gt;The reportConnections is called next which simply prints how many clients are
connected, we now start an Asyncronous workflow using the startSending
function.&lt;/p&gt;

&lt;p&gt;Finally we set the AcceptSocket property to null on the SAEA object and add it
back to the BlockingCollection so that it can be reused.&lt;/p&gt;

&lt;p&gt;The purpose of the BlockingCollection here is to have a fixed pool of SAEA
that block when there isn&amp;rsquo;t an SAEA to service the new connection, this could
be a potential issue for the client as it could timeout while waiting for a
connection but this is a far preferable situation than causing your server to
be effectively denied service due to overload.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;startSending&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let startSending connection =
      Async.Start (async {
        try
          use _holder = connection
          do! asyncServiceClient connection
        with e -&amp;gt;
          if not(anyErrors) then
            anyErrors &amp;lt;- true
            Console.WriteLine(&amp;quot;server ERROR&amp;quot;)
          raise e
        } )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function uses the syntactic sugar of the asynchronous workflows to start
an operation on the Thread pool, once queued on the thread pool it is wrapped
in a using block with the &lt;strong&gt;_use &lt;em&gt;holder = connection&lt;/em&gt;&lt;/strong&gt; statement and
asynchronously calls the asyncServiceClient function, this has the effect of
disposing of the Connection type when it exits scope or encounters an
exception.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;asyncServiceClient&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let asyncServiceClient (client: Connection) = async {
      client.Send(header)
      while true do
        do! asyncWriteStockQuote(client) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function sends a one byte header message to the client using the
Connection.Send, followed by calling asyncWriteStockQuote in a continuous
loop.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;asyncWriteStockQuote&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let asyncWriteStockQuote(connection:Connection) = async {
      do! Async.Sleep 1000
      connection.Send(testMessage)
      Interlocked.Increment(&amp;amp;numWritten) |&amp;gt; ignore }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function sleeps for 1000ms and uses the Connection.Send function to sent
a message to the client, the number of results is updated using the
Interlocked class.&lt;/p&gt;

&lt;p&gt;I would like to refer you to &lt;a href=&#34;http://lorgonblog.wordpress.com/2010/03/28/f-async-on-the-server-side/&#34;&gt;Brian McNamara&amp;rsquo;s
post&lt;/a&gt;
that describes this part in more detail.  The only difference in our workflow
is that we don&amp;rsquo;t use a stream operation as we have the SendAsyncSafe function
to do all the work for us.  IDispose is also implemented on this type too as
we have to dispose of the SAEA objects that are used for the asynchronous
accepts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;createTcpSocket&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let createTcpSocket() =
      new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function simply wraps the Sockets class constructor mapping it to: Tcp
protocol, Streaming, and InterNetwork Address type.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;createListener&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let createListener (ip:IPAddress, port, backlog) =
      let s = createTcpSocket()
      s.Bind(new IPEndPoint(ip, port))
      s.Listen(backlog); s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function calls the createTcpSocket function, binds to the IPAddress and
port that are passed in and starts listening for connections.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Start&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member this.start () =
      listeningSocket.AcceptAsyncSafe( this.acceptcompleted, acceptPool.Take())
      while true do
      Thread.Sleep 1000
      let count = Interlocked.Exchange(&amp;amp;numWritten, 0)
      count |&amp;gt; printfn &amp;quot;Quotes per sec: %A&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function starts the whole process of listening for a connection from
clients.  A SAEA is taken from the BlockingCollection and AcceptAsyncSafe is
called.&lt;/p&gt;

&lt;p&gt;I have tried to describe all of the functions that I think merit a description
but I have been involved in this sort of code for years now so if you have any
queries feel free to just drop a comment and I will try to help.&lt;/p&gt;

&lt;p&gt;When looking through the code remember that this is just a demo, I am
currently still working on a few things but may offer the full API available
for download at a later date or put it on GitHub.&lt;/p&gt;

&lt;p&gt;In part four we are going to compare some of the differences in operation
between the xxxAsync and the IAsync pattern, obviously there is a lot more
code and inherent complexity in this implementation but in high volume
situations it makes a lot of difference.&lt;/p&gt;

&lt;p&gt;See you next time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sockets and Bockets 2</title>
      <link>http://7sharpnine.com/2011/01/14/2011-01-14-sockets-and-bockets-part-2/</link>
      <pubDate>Fri, 14 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2011/01/14/2011-01-14-sockets-and-bockets-part-2/</guid>
      <description>

&lt;h3 id=&#34;welcome-to-part-two&#34;&gt;Welcome to part two&lt;/h3&gt;

&lt;p&gt;Lets jump in at the deep end and take a look at some code&amp;hellip;&lt;/p&gt;

&lt;p&gt;When you look at the method syntax for the xxxAsync methods you will notice
they return a boolean value that indicates if the method completed
synchronously, this means that you have to check the return value every time
you use one of the methods and invoke the callback yourself if it completes
synchronously.  In practice this hardly ever happens, and normally only on a
send operation.  But as it is a possibility we will add module with a some
extension methods in to help us out, this will make the code more readable and
avoid unnecessary duplication.&lt;!-- more --&gt;&lt;/p&gt;

&lt;h3 id=&#34;socketextensions&#34;&gt;SocketExtensions&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module SocketExtensions
  open System
  open System.Net
  open System.Net.Sockets  
  type Socket with
    /// extension method to make async based call easier, this ensures the callback always gets
    /// called even if there is an error or the async method completed syncronously
    member s.InvokeAsyncMethod( asyncmethod, callback, args:SocketAsyncEventArgs) =
      let result = asyncmethod args
      if result &amp;lt;&amp;gt; true then callback args
    member s.AcceptAsyncSafe(callback, args) = s.InvokeAsyncMethod(s.AcceptAsync, callback, args)
    member s.ReceiveAsyncSafe(callback, args) = s.InvokeAsyncMethod(s.ReceiveAsync, callback, args)
    member s.SendAsyncSafe(callback, args) = s.InvokeAsyncMethod(s.SendAsync, callback, args)
    member s.DisconnectAsyncSafe(callback, args) = s.InvokeAsyncMethod(s.DisconnectAsync, callback, args)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets get down to business, the next few types have a fair bit of code in
them so I will briefly explain each type in turn:&lt;/p&gt;

&lt;h3 id=&#34;bocketpool&#34;&gt;BocketPool&lt;/h3&gt;

&lt;p&gt;A BocketPool is a combination of a
&lt;a href=&#34;http://msdn.microsoft.com/en-
us/library/system.net.sockets.socketasynceventargs.aspx&#34;&gt;SocketAsyncEventArgs&lt;/a&gt; object and a chunk of
memory allocated in an array.  The array is sliced up into sections and
allocated for each send or receive operation by setting a start and end index
using &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb549836.aspx&#34;&gt;SetBuffer()&lt;/a&gt;.
If you remember last time I mentioned that a lot of memory fragmentation can
occur during sending and receiving due to continuously allocating memory
buffers on the Socket object, this is primarily done through the BeginSend and
BeginReceive methods passing in a byte array.  Using the BocketPool it a great
way of reducing the amount of garbage collection during heavy traffic.&lt;/p&gt;

&lt;p&gt;The other major difference with SocketAsyncEventArgs is the way in which you
make the send and receive calls, heres the general flow that occurs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a SocketAsyncEventArgs object or get one from a pool.&lt;/li&gt;
&lt;li&gt;Allocate an array to the buffer.&lt;/li&gt;
&lt;li&gt;Allocate an offset and length to the buffer.&lt;/li&gt;
&lt;li&gt;Allocate a callback method.&lt;/li&gt;
&lt;li&gt;Call Socket.xxxAsync passing in the SocketAsyncEventArgs, the operation will complete and invoke the callback.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What we are going to do is wrap the whole creation, array allocation, and
offsetting to the BocketPool:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;namespace Fes
  open System
  open System.Net.Sockets
  open System.Collections.Concurrent  
  type BocketPool( number, size, callback) as this =
    let number = number
    let size = size
    let totalsize = (number * size)
    let buffer = Array.create totalsize 0uy
    let pool = new BlockingCollection&amp;lt;SocketAsyncEventArgs&amp;gt;(number:int)
    let mutable disposed = false
    let cleanUp() =
      if not disposed then
        disposed &amp;lt;- true
        pool.CompleteAdding()
        while pool.Count &amp;gt; 1 do
          (pool.Take() :&amp;gt; IDisposable).Dispose()
        pool.Dispose()
    do
      let rec loop n =
        match n with
        | x when x &amp;lt; totalsize -&amp;gt;
          let saea = new SocketAsyncEventArgs()
          saea.Completed |&amp;gt; Observable.add( fun saea -&amp;gt; (callback saea))
          saea.SetBuffer(buffer, n, size)
          this.CheckIn(saea)
          loop (n + size)
        | _ -&amp;gt; ()
      loop 0
    member this.CheckOut()=
      pool.Take()
    member this.CheckIn(saea)=
      pool.Add(saea)
    member this.Count =
      pool.Count
    interface IDisposable with
      member this.Dispose() = cleanUp()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next up we have to look at the Connection and the Tcplistener types as two
interconnected entities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The TcpListener listens for a connection on a socket and port number.&lt;/li&gt;
&lt;li&gt;The client connects to the server.&lt;/li&gt;
&lt;li&gt;An accept socket is allocated to the client, at this point we have one socket for the server and once for each client.&lt;/li&gt;
&lt;li&gt;We also need to allocate a BocketPool for send and receive operation for each client
To simplify things we are going to encapsulate the accept socket management
into a type, it will also need a corresponding BocketPool to service any send
and receive operations to and from the client&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;connection&#34;&gt;Connection&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;namespace Fes
  open System
  open System.Net
  open System.Net.Sockets
  open System.Collections.Generic
  open System.Collections.Concurrent
  open System.Threading
  open SocketExtensions  
  type Connection(maxreceives, maxsends, size, socket:Socket) as this =
    let socket = socket
    let maxreceives = maxreceives
    let maxsends = maxsends
    let sendPool = new BocketPool(maxsends, size, this.sendCompleted )
    let receivePool = new BocketPool(maxreceives, size, this.receiveCompleted)
    let mutable disposed = false
    let mutable anyErrors = false  
    let cleanUp() =
      if not disposed then
        disposed &amp;lt;- true
        socket.Shutdown(SocketShutdown.Both)
        socket.Disconnect(false)
        socket.Close()
        (sendPool :&amp;gt; IDisposable).Dispose()
        (receivePool :&amp;gt; IDisposable).Dispose()  
    member this.Start() =
      socket.ReceiveAsyncSafe(this.receiveCompleted, receivePool.CheckOut())  
    member this.Stop() =
      socket.Close(2)  
    member this.receiveCompleted (args: SocketAsyncEventArgs) =
      try
        match args.LastOperation with
        | SocketAsyncOperation.Receive -&amp;gt;
          match args.SocketError with
          | SocketError.Success -&amp;gt;
            socket.ReceiveAsyncSafe( this.receiveCompleted, receivePool.CheckOut())
            let data = Array.create args.BytesTransferred 0uy
            Buffer.BlockCopy(args.Buffer, args.Offset, data, 0, data.Length)
            let client = args.RemoteEndPoint
            args.RemoteEndPoint &amp;lt;- null
            data |&amp;gt; printfn &amp;quot;received data: %A&amp;quot;
          | _ -&amp;gt; args.SocketError.ToString() |&amp;gt; printfn &amp;quot;socket error on receive: %s&amp;quot;
        | _ -&amp;gt; failwith &amp;quot;unknown operation, should be receive&amp;quot;
      finally
        receivePool.CheckIn(args)  
    member this.sendCompleted (args: SocketAsyncEventArgs) =
      try
        match args.LastOperation with
        | SocketAsyncOperation.Send -&amp;gt;
          match args.SocketError with
          | SocketError.Success -&amp;gt; ()
          | SocketError.NoBufferSpaceAvailable
          | SocketError.IOPending
          | SocketError.WouldBlock -&amp;gt;
            if not(anyErrors) then
              anyErrors &amp;lt;- true
              failwith &amp;quot;Buffer overflow or send buffer timeout&amp;quot;
          | _ -&amp;gt; args.SocketError.ToString() |&amp;gt; printfn &amp;quot;socket error on send: %s&amp;quot;
        | _ -&amp;gt; failwith &amp;quot;invalid operation, should be receive&amp;quot;
      finally
        sendPool.CheckIn(args)  
    member this.Send (msg:byte[]) =
      let s = sendPool.CheckOut()
      Buffer.BlockCopy(msg, 0, s.Buffer, s.Offset, msg.Length)
      socket.SendAsyncSafe(this.sendCompleted, s)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally here&amp;rsquo;s the TcpListener type.  It is responsible for creating an
initial Connection object for each client and starts asynchronous sending
messages to that client once a second, also notice that there is another
BlockingCollection involved, this is somewhat simpler than the usage in the
bocketPool as we have no buffer to manage here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;It is possible to fill the initial Buffer property, this causes the buffer to be sent to the client as soon as it has connected to the server, this can be useful to sent initial data to the client, such as protocol definitions etc)&lt;/em&gt;
A finite number of connections can occur before blocking will occur depending
on the number of AsyncEventArgs in the collection, this stops potential denial
of service attacks due to too many connection being made.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tcplistener&#34;&gt;TcpListener&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;namespace Fes
  open System
  open System.Net
  open System.Net.Sockets
  open System.Collections.Generic
  open System.Collections.Concurrent
  open System.Threading
  open SocketExtensions  
  type TcpListener(maxaccepts, maxsends, maxreceives, size, port, backlog) as this =  
    let createTcpSocket() =
      new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp)  
    let createListener (ip:IPAddress, port, backlog) =
      let s = createTcpSocket()
      s.Bind(new IPEndPoint(ip, port))
      s.Listen(backlog); s  
    let listeningSocket = createListener( IPAddress.Loopback, port, backlog)  
    let initPool (maxinpool, callback) =
      let pool = new BlockingCollection&amp;lt;SocketAsyncEventArgs&amp;gt;(maxinpool:int)
      let rec loop n =
        match n with
        | x when x &amp;lt; maxinpool -&amp;gt;
          let saea = new SocketAsyncEventArgs()
          saea.Completed |&amp;gt; Observable.add callback
          pool.Add saea
          loop (n+1)
        | _ -&amp;gt; ()
      loop 0
      pool  
    let acceptPool = initPool (maxaccepts, this.acceptcompleted)
    let newConnection socket = new Connection (maxreceives, maxsends, size, socket)
    let testMessage = Array.init&amp;lt;byte&amp;gt; 128 (fun _ -&amp;gt; 1uy)
    let header = Array.init&amp;lt;byte&amp;gt; 1 (fun _ -&amp;gt; 1uy)
    let mutable disposed = false  
    //mutable state from original
    let mutable anyErrors = false
    let mutable requestCount = 0
    let mutable numWritten = 0  
    //async code from original
    let asyncWriteStockQuote(connection:Connection) = async {
      do! Async.Sleep 1000
      connection.Send(testMessage)
      Interlocked.Increment(&amp;amp;numWritten) |&amp;gt; ignore }  
    //async code from original
    let asyncServiceClient (client: Connection) = async {
      client.Send(header)
      while true do
        do! asyncWriteStockQuote(client) }  
    let startSending connection =
      Async.Start (async {
        try
          use _holder = connection
          do! asyncServiceClient connection
        with e -&amp;gt;
          if not(anyErrors) then
            anyErrors &amp;lt;- true
            Console.WriteLine(&amp;quot;server ERROR&amp;quot;)
          raise e
        } )  
    let reportConnections =
      Interlocked.Increment(&amp;amp;requestCount) |&amp;gt; ignore
      if requestCount % 1000 = 0 then
        requestCount |&amp;gt; printfn &amp;quot;%A Clients accepted&amp;quot;  
    let cleanUp() =
      if not disposed then
        disposed &amp;lt;- true
        listeningSocket.Shutdown(SocketShutdown.Both)
        listeningSocket.Disconnect(false)
        listeningSocket.Close()  
    member this.acceptcompleted (args : SocketAsyncEventArgs) =
      try
        match args.LastOperation with
        | SocketAsyncOperation.Accept -&amp;gt;
          match args.SocketError with
          | SocketError.Success -&amp;gt;
            listeningSocket.AcceptAsyncSafe( this.acceptcompleted, acceptPool.Take())
            //create new connection
            let connection = newConnection args.AcceptSocket
            connection.Start()  
            //update stats
            reportConnections   
            //async start of messages to client
            startSending connection  
            //remove the AcceptSocket because we will be reusing args
            args.AcceptSocket &amp;lt;- null
          | _ -&amp;gt; args.SocketError.ToString() |&amp;gt; printfn &amp;quot;socket error on accept: %s&amp;quot;
        | _ -&amp;gt; args.LastOperation |&amp;gt; failwith &amp;quot;Unknown operation, should be accept but was %a&amp;quot;
      finally
        acceptPool.Add(args)  
    member this.start () =
      listeningSocket.AcceptAsyncSafe( this.acceptcompleted, acceptPool.Take())
      while true do
      Thread.Sleep 1000
      let count = Interlocked.Exchange(&amp;amp;numWritten, 0)
      count |&amp;gt; printfn &amp;quot;Quotes per sec: %A&amp;quot;  
    member this.Close() =
      cleanUp()  
    interface IDisposable with
      member this.Dispose() = cleanUp()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its a fair bit of code to take in at once, so Ill leave you with it to ponder
over.  Ill be explaining all of the interesting bits in more detail in part
three&amp;hellip;&lt;/p&gt;

&lt;p&gt;Please feel free to leave any comments you have, especially on better use of
functional constructs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sockets and Bockets 1</title>
      <link>http://7sharpnine.com/2011/01/13/2011-01-13-sockets-and-bockets-1/</link>
      <pubDate>Thu, 13 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2011/01/13/2011-01-13-sockets-and-bockets-1/</guid>
      <description>

&lt;h3 id=&#34;welcome-to-part-1&#34;&gt;Welcome to part 1&lt;/h3&gt;

&lt;p&gt;A while back I read an interesting article by &lt;em&gt;Brian McNamara&lt;/em&gt; &lt;a href=&#34;http://lorgonblog.wordpress.com/2010/03/28/f-async-on-the-server-side/&#34;&gt;f-async-on-the-server-side&lt;/a&gt;
which describes C# and F# versions of a simple asynchronous
socket server, one of the driving forces behind the article was how F# can
wrap the traditional asynchronous model with &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/dd233250.aspx&#34;&gt;Asynchronous Workflows&lt;/a&gt;, this
produces nice clean simple code compared to the C# version which uses lambda
expressions, the code looks quite ugly in this style!  However thats not the
end of the story, a lot of memory fragmentation can occur using the APM model
when there is a high throughput, so I thought I would see if I could take this
a step further&amp;hellip;&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;There are some lesser known methods that were added to the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.aspx&#34;&gt;Socket&lt;/a&gt;
class in .Net 2.0 SP1: ReceiveAsync, SendAsync, ConnectAsync and DisconnectAsync.
These methods use an event driven model and &lt;strong&gt;do not&lt;/strong&gt; result in the creation
of AsyncResult objects, these are created on every asynchronous call in the
traditional Socket Begin/End methods.  Once you have thousands of clients
sending and receiving thousands of messages all of the object creation can
really have an adverse effect on performance on the garbage collected, you
will regularly see the AsyncResult objects hitting Generation 1 and 2.&lt;/p&gt;

&lt;p&gt;To use the xxxAsync methods you have pass a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.net.sockets.socketasynceventargs.aspx&#34;&gt;SocketAsyncEventArgs&lt;/a&gt;object which is
assigned callback method and a buffer, the callback method called
asynchronously when the operation completes and is passed the corresponding
SocketAsyncEventArgs object, this allows you query the buffer in a receive
operation.&lt;/p&gt;

&lt;p&gt;The scope of this series of articles is to initially replicate Brian&amp;rsquo;s demo
using F# and a pool of SocketAsyncEventArgs and a contiguous block of memory
to hold the data being sent and received on the Socket, this again further
reduces memory fragmentation on the send and receive buffers.&lt;/p&gt;

&lt;p&gt;I have successfully developed an enterprise server for a client using this
method, it processed thousands of simultaneous connected clients and messages,
key components in the system were the High performance sockets, a pipeline
processor and a highly efficiency means of data compaction, I will only be
including the High performance sockets in this series but the other components
will be at a later date in separate articles.  Interestingly all of the code
was originally developed in c# but had a distinctly functional style, even the
Pipeline Processing is reminiscent of functional composition using the F#
pipeline operator &lt;strong&gt;|&amp;gt;&lt;/strong&gt; although an analogue of attach and detach was used
which in itself is declarative.&lt;/p&gt;

&lt;p&gt;Although there is no code in this article there is plenty in the next!&lt;/p&gt;

&lt;p&gt;Please feel free to leave comments or add any suggestions, hope to see you
next time&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>