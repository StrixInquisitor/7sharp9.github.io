<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fuse on 7sharp9</title>
    <link>http://7sharpnine.com/tags/fuse/</link>
    <description>Recent content in Fuse on 7sharp9</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Dave Thomas</copyright>
    <lastBuildDate>Tue, 07 Jun 2016 13:20:49 +0100</lastBuildDate>
    <atom:link href="http://7sharpnine.com/tags/fuse/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Creating fuse applications with fable</title>
      <link>http://7sharpnine.com/2016/06/07/fable-fuse-template/</link>
      <pubDate>Tue, 07 Jun 2016 13:20:49 +0100</pubDate>
      
      <guid>http://7sharpnine.com/2016/06/07/fable-fuse-template/</guid>
      <description>

&lt;p&gt;So as promised here&amp;rsquo;s a guide to creating your first &lt;strong&gt;fable |&amp;gt; fuse&lt;/strong&gt; application&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve made a template available so this can be tried out quickly and easily, I&amp;rsquo;ll run through the
requirements and describe whats in the template.&lt;/p&gt;

&lt;h1 id=&#34;requirements&#34;&gt;Requirements&lt;/h1&gt;

&lt;p&gt;First of all here are the requirements.&lt;/p&gt;

&lt;h2 id=&#34;yeoman&#34;&gt;Yeoman&lt;/h2&gt;

&lt;p&gt;As &lt;a href=&#34;http://fsprojects.github.io/Fable/&#34;&gt;fable&lt;/a&gt; uses &lt;a href=&#34;https://docs.npmjs.com/getting-started/what-is-npm&#34;&gt;npm modules&lt;/a&gt; for dependencies &lt;strong&gt;fable |&amp;gt; fuse&lt;/strong&gt; template will also be based
on them.  I have used &lt;a href=&#34;http://fsprojects.github.io/Fable/docs.html&#34;&gt;Yeoman&lt;/a&gt; as it&amp;rsquo;s very flexible and works nicely.&lt;/p&gt;

&lt;p&gt;So what you need to get Yeoman is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g yo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then to install the &lt;strong&gt;fable |&amp;gt; fuse&lt;/strong&gt; template for Yeoman:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g generator-fable-fuse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice and easy.&lt;/p&gt;

&lt;h2 id=&#34;fable&#34;&gt;Fable&lt;/h2&gt;

&lt;p&gt;Installing Fable is covered in the &lt;a href=&#34;http://fsprojects.github.io/Fable/docs.html&#34;&gt;Fable documentation&lt;/a&gt;, but it&amp;rsquo;s essentially just another npm install:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g fable-compiler
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;fuse&#34;&gt;Fuse&lt;/h2&gt;

&lt;p&gt;Fuse can be downloaded at their site &lt;a href=&#34;https://www.fusetools.com/downloads&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s pretty much all the requirements, let&amp;rsquo;s try this out!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;creating-a-fable-fuse-application&#34;&gt;Creating a &lt;strong&gt;fable |&amp;gt; fuse&lt;/strong&gt; application?&lt;/h1&gt;

&lt;p&gt;OK, so with everything installed how do you get going?&lt;/p&gt;

&lt;p&gt;This is really easy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir fable-fuse-test
cd fable-fuse-test
yo fable-fuse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then follow the prompts, here&amp;rsquo;s a &lt;a href=&#34;https://asciinema.org&#34;&gt;asciinema&lt;/a&gt; session showing the process:&lt;/p&gt;


&lt;figure class=&#34;8u&#34;&gt;
    &lt;a href=&#34;https://asciinema.org/a/9eqmwurfreaspzsmrm0f5ezc9?size=medium&amp;amp;speed=1.75&#34;&gt;
        &lt;img src=&#34;https://asciinema.org/a/9eqmwurfreaspzsmrm0f5ezc9.png&#34; /&gt;
    &lt;/a&gt;
    
&lt;/figure&gt;


&lt;p&gt;Now that the template has been created let&amp;rsquo;s have a look at whats inside.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;project-structure&#34;&gt;Project Structure&lt;/h1&gt;

&lt;p&gt;The structure of a &lt;strong&gt;fable |&amp;gt; fuse&lt;/strong&gt; application is as follows &lt;em&gt;(Using a project name of test)&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├── App
│   ├── MainView.ux
│   └── test.unoproj
├── build.bat
├── build.sh
├── node_modules
│   ├── fable-core
│   ├── fable-fuse
│   └── fable-import-fetch
├── package.json
└── src
    ├── fableconfig.json
    ├── test.fs
    └── test.fsproj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets go through the root files first&lt;/p&gt;

&lt;h2 id=&#34;package-json&#34;&gt;package.json&lt;/h2&gt;

&lt;p&gt;This file has the dependencies for &lt;code&gt;fable |&amp;gt; fuse&lt;/code&gt;.  Currently these are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fable-core&lt;/strong&gt; : This has the main definitions for Fable.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fable-fuse&lt;/strong&gt; : This has the bindings for the Fuse JavaScript API&amp;rsquo;s.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fable-import-fetch&lt;/strong&gt; : This has the F# bindings for JavaScript Fetch API.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;build-sh-build-bat&#34;&gt;build.sh / build.bat&lt;/h2&gt;

&lt;p&gt;These two files contain the script to transpile the F# source into JavaScript.  So upon typing &lt;code&gt;./build.sh&lt;/code&gt; the F# files
will be transpiled into JavaScript and placed into the &lt;code&gt;App/js&lt;/code&gt; folder.  In addition &lt;a href=&#34;http://fsprojects.github.io/Fable/&#34;&gt;Fable&lt;/a&gt; will continue to watch the
F# files and transpile the files if they change so you get realtime updating of the &lt;a href=&#34;https://www.fusetools.com/&#34;&gt;fuse&lt;/a&gt; application.&lt;/p&gt;

&lt;p&gt;Now the directories:&lt;/p&gt;

&lt;h2 id=&#34;app&#34;&gt;App&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;App&lt;/code&gt; directory has all the necessary files that &lt;a href=&#34;https://www.fusetools.com/&#34;&gt;Fuse&lt;/a&gt; requires to build&lt;/p&gt;

&lt;h3 id=&#34;test-unoproj&#34;&gt;test.unoproj&lt;/h3&gt;

&lt;p&gt;This is the project file for Fuse, it has settings for the different platforms and controls which gets embedded in the application.&lt;/p&gt;

&lt;h3 id=&#34;mainview-ux&#34;&gt;MainView.ux&lt;/h3&gt;

&lt;p&gt;This is the main view markup file for the user interface.&lt;/p&gt;

&lt;h2 id=&#34;src&#34;&gt;src&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;src&lt;/code&gt; folder has all the F# source files that &lt;a href=&#34;http://fsprojects.github.io/Fable/&#34;&gt;Fable&lt;/a&gt; transpiles into JavaScript.&lt;/p&gt;

&lt;h3 id=&#34;fableconfig-json&#34;&gt;fableconfig.json&lt;/h3&gt;

&lt;p&gt;This is the configuration file for Fable which allows you to run scrip before or after compilation and set various defaults.&lt;/p&gt;

&lt;h3 id=&#34;test-fs&#34;&gt;test.fs&lt;/h3&gt;

&lt;p&gt;This is the main source file for F# and is the same as the one you saw in the previous post:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;namespace App
open Fable.Core
open Fuse
open Fable.Import
open Fable.Import.Fetch

module test =
    let data = Observable.create()

    promise {
        let! req = GlobalFetch.fetch (Url &amp;quot;http://az664292.vo.msecnd.net/files/ZjPdBhWNdPRMI4qK-colors.json&amp;quot;)
        let! json = req.json ()
        do (data.value &amp;lt;- json) } |&amp;gt; ignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is fairly easy to follow, the &lt;code&gt;promise&lt;/code&gt; block is a custom &lt;a href=&#34;https://msdn.microsoft.com/visualfsharpdocs/conceptual/computation-expressions-%5Bfsharp%5D&#34;&gt;computation expression&lt;/a&gt; that allows each successful JavaScript
promise to execute before the next promise is ran.  In this example &lt;code&gt;GlobalFetch.fetch&lt;/code&gt; and &lt;code&gt;req.json()&lt;/code&gt; both return JavaScript
promises. The promise block runs the &lt;code&gt;GlobalFetch.fetch&lt;/code&gt; function and if it &lt;em&gt;succeeds&lt;/em&gt; it runs the &lt;code&gt;req.json()&lt;/code&gt;
function.  If that too is successful then the observable value &lt;code&gt;data&lt;/code&gt; is updated to the resulting json data.&lt;/p&gt;

&lt;h2 id=&#34;node-modules&#34;&gt;node-modules&lt;/h2&gt;

&lt;p&gt;These are our dependencies, there&amp;rsquo;s fable-core which is required by &lt;a href=&#34;http://fsprojects.github.io/Fable/&#34;&gt;Fable&lt;/a&gt;, also included are &lt;a href=&#34;https://www.npmjs.com/package/fable-fuse&#34;&gt;fable-fuse&lt;/a&gt; which
are the F# bindings to the Fuse JavaScript libraries, and &lt;a href=&#34;https://www.npmjs.com/package/fable-import-fetch&#34;&gt;fable-import-fetch&lt;/a&gt; which is the F# bindings for the
&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/API/Fetch_API&#34;&gt;Fetch JavaScript API&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;running&#34;&gt;Running&lt;/h1&gt;

&lt;p&gt;To get a &lt;strong&gt;fable |&amp;gt; fuse&lt;/strong&gt; application running all you have to do is run the build script &lt;code&gt;./build&lt;/code&gt; which transpiles the
F# files into JavaScript and then watches for any updates to the F# files.  Running a Fuse application is also really easy,
you can do this from within Atom via the &lt;a href=&#34;https://atom.io/packages/fuse&#34;&gt;plugin&lt;/a&gt;, or sublime via that &lt;a href=&#34;https://github.com/fusetools/Fuse.SublimePlugin&#34;&gt;plugin&lt;/a&gt;, or simply just run
&lt;code&gt;fuse preview ./App/&lt;/code&gt; from the project root.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;any-problems&#34;&gt;Any Problems?&lt;/h1&gt;

&lt;p&gt;If you have any problems with the Yeoman generator for &lt;strong&gt;fable |&amp;gt; fuse&lt;/strong&gt; then please log an issue on its
GitHub repo: &lt;a href=&#34;https://github.com/7sharp9/generator-fable-fuse&#34;&gt;generator-fable-fuse&lt;/a&gt;.  If you have any issues with the fable-fuse module itself then please got an issue
on its GitHub repo: &lt;a href=&#34;https://github.com/7sharp9/fable-fuse&#34;&gt;fable-fuse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have an improvements or suggestions then a PR is very welcome too!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;whats-next&#34;&gt;Whats next?&lt;/h1&gt;

&lt;p&gt;If there is enough interest around using &lt;strong&gt;fable |&amp;gt; fuse&lt;/strong&gt; I&amp;rsquo;ll port some of the more intricate samples from the
&lt;a href=&#34;https://www.fusetools.com/examples&#34;&gt;Fuse examples&lt;/a&gt; over to &lt;strong&gt;fable |&amp;gt; fuse&lt;/strong&gt; and also create a GitHub site with all the content relating to it.&lt;/p&gt;

&lt;p&gt;Let me know what you think!!&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Light The Fuse</title>
      <link>http://7sharpnine.com/2016/06/03/light-the-fuse/</link>
      <pubDate>Fri, 03 Jun 2016 11:21:57 +0100</pubDate>
      
      <guid>http://7sharpnine.com/2016/06/03/light-the-fuse/</guid>
      <description>

&lt;p&gt;In this post Im going to be introducing something new and exciting the combination of F#, Fable and Fuse.  If I was American I might say this was the holy trinity of awesomeness!&lt;/p&gt;

&lt;p&gt;This is the start of an exciting new series on using F# as a transpiling language to &amp;ldquo;light the Fuse&amp;rdquo; (pun intended) on new platform and opportunities for F#.&lt;/p&gt;

&lt;p&gt;OK, so now for the introductions&amp;hellip;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;what-is-fable&#34;&gt;What is Fable&lt;/h1&gt;

&lt;p&gt;Put simply Fable is a transpiler for F# that turn F# into JavaScript.  Lets face it JavaScript is really pervasive but not everyone wants to write it.  You can read about how Fable works &lt;a href=&#34;http://fsprojects.github.io/Fable/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;what-is-fuse&#34;&gt;What is fuse?&lt;/h1&gt;

&lt;p&gt;Taken from their site this is what fuse is in a nutshell:&lt;/p&gt;

&lt;h2 id=&#34;fuse-is-for-mobile-app-designers-and-developers&#34;&gt;FUSE IS FOR MOBILE APP DESIGNERS AND DEVELOPERS&lt;/h2&gt;

&lt;p&gt;Create and update the look and feel for native apps in real time
on multiple devices simultaneously.&lt;/p&gt;

&lt;p&gt;Fuse is a set of tools (currently in beta) that makes design and developing native mobile apps for iOS and Android fast, easy and fun. Fuse is free, and we’re actively working towards making it Open Source as well.&lt;/p&gt;

&lt;p&gt;Fuse introduces UX Markup - a XML-based language for creating truly native, data-driven, responsive, smoothly animated and highly interactive experiences, while sharing most of the code between iOS and Android. UX is easy to learn and incredibly powerful.&lt;/p&gt;

&lt;p&gt;Fuse is fast. Based on Uno, a language which compiles down to pure C++ code, and seamlessly interops with Objective-C (iOS) and Java (Android) where needed. The UI is rendered using native platform controls, OpenGL or a combination (best of both worlds).&lt;/p&gt;

&lt;p&gt;For business logic, Fuse runs JavaScript on a separate thread on both iOS and Android, so your UI is fast and responsive no matter what it is doing. Fuse lets you call seamlessly into C++, Java and Objective-C libraries through Uno when you need it.&lt;/p&gt;

&lt;p&gt;You can read about Fuse in more depth on their site &lt;a href=&#34;https://www.fusetools.com/&#34;&gt;here&lt;/a&gt;, you really should take a look.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;introducing-fable-fuse&#34;&gt;Introducing &lt;strong&gt;Fable |&amp;gt; Fuse&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Fable-Fuse is a set of packages that allows you use power of F# with &lt;a href=&#34;https://www.fusetools.com/&#34;&gt;Fuse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First of all lets have a little look at some declarative UI with Fuse.&lt;/p&gt;

&lt;p&gt;This is taken from the original Fuse Sample titled &lt;strong&gt;&lt;em&gt;Parsing JSON fetched over HTTP&lt;/em&gt;&lt;/strong&gt;   which is located &lt;a href=&#34;https://www.fusetools.com/examples/http-json&#34;&gt;here&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://res.cloudinary.com/fusetools/image/upload/w_450%2Ch_450%2Cdpr_1.0%2Cc_limit/examples/media/4343ca40291fab07d70ef87254204bed_http-json-example.webp&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;pre&gt;&lt;code&gt;&amp;lt;App Theme=&amp;quot;Basic&amp;quot; Background=&amp;quot;#eee&amp;quot;&amp;gt;
    &amp;lt;DockPanel&amp;gt;
        &amp;lt;StatusBarBackground Dock=&amp;quot;Top&amp;quot; /&amp;gt;
        &amp;lt;BottomBarBackground Dock=&amp;quot;Bottom&amp;quot; /&amp;gt;
        &amp;lt;ScrollView&amp;gt;
            &amp;lt;Grid ColumnCount=&amp;quot;2&amp;quot;&amp;gt;
                &amp;lt;JavaScript&amp;gt;
                    var Observable = require(&amp;quot;FuseJS/Observable&amp;quot;);

                    var data = Observable();

                    fetch(&#39;http://az664292.vo.msecnd.net/files/ZjPdBhWNdPRMI4qK-colors.json&#39;)
                        .then(function(response) { return response.json(); })
                        .then(function(responseObject) { data.value = responseObject; });

                    module.exports = {
                        data: data
                    };
                &amp;lt;/JavaScript&amp;gt;
                &amp;lt;Each Items=&amp;quot;{data.colorsArray}&amp;quot;&amp;gt;
                    &amp;lt;DockPanel Height=&amp;quot;120&amp;quot; Margin=&amp;quot;10,0&amp;quot;&amp;gt;
                        &amp;lt;Panel DockPanel.Dock=&amp;quot;Top&amp;quot; Margin=&amp;quot;10&amp;quot; Height=&amp;quot;30&amp;quot;&amp;gt;
                            &amp;lt;Rectangle Layer=&amp;quot;Background&amp;quot; CornerRadius=&amp;quot;10&amp;quot; Fill=&amp;quot;#fff&amp;quot;/&amp;gt;
                            &amp;lt;Text Value=&amp;quot;{colorName}&amp;quot; TextAlignment=&amp;quot;Center&amp;quot; Alignment=&amp;quot;Center&amp;quot; /&amp;gt;
                        &amp;lt;/Panel&amp;gt;

                        &amp;lt;Rectangle Layer=&amp;quot;Background&amp;quot; CornerRadius=&amp;quot;10&amp;quot; Fill=&amp;quot;{hexValue}&amp;quot;/&amp;gt;
                    &amp;lt;/DockPanel&amp;gt;
                &amp;lt;/Each&amp;gt;
            &amp;lt;/Grid&amp;gt;
        &amp;lt;/ScrollView&amp;gt;
    &amp;lt;/DockPanel&amp;gt;
&amp;lt;/App&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the UI mark-up is concise and easy to follow, also notice the JavaScript element which can be in-line, as shown here, or placed in a separate file.  We will place this in a separate file so that we can transpile from F# using &lt;a href=&#34;http://fsprojects.github.io/Fable/&#34;&gt;Fable&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;namespace Program
open Fable.Core
open Fuse
open Fable.Import
open Fable.Import.Fetch

module HttpJson =
    let data = Observable.create()
    promise {
        let! req = GlobalFetch.fetch (Url &amp;quot;http://az664292.vo.msecnd.net/files/ZjPdBhWNdPRMI4qK-colors.json&amp;quot;)
        let! json = req.json ()
        do (data.value &amp;lt;- json) } |&amp;gt; ignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see here there is a custom computation expression that allows you to use JavaScrip promises, you could also use a pipeline oriented definition too, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;GlobalFetch.fetch (Url &amp;quot;http://az664292.vo.msecnd.net/files/ZjPdBhWNdPRMI4qK-colors.json&amp;quot;)
|&amp;gt; Promise.success (fun resp -&amp;gt; resp.json())                                                                          
|&amp;gt; Promise.success (fun json -&amp;gt; data.value &amp;lt;- json) 
|&amp;gt; ignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if you really really wanted to you could integrate this into an F# async with a little helper type extension:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module AsyncExtensions =    
    type Microsoft.FSharp.Control.AsyncBuilder with
        member x.Bind(p, f) = 
            async.Bind (Async.AwaitPromise(p), f)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would allow you to use a promise with an ordinary &lt;code&gt;let!&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;async {
    let! req = GlobalFetch.fetch &amp;quot;http://az664292.vo.msecnd.net/files/ZjPdBhWNdPRMI4qK-colors.json&amp;quot;
    let! json = req.json ()
    do (data.value &amp;lt;- json) } |&amp;gt; Async.Start 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anyway I digress, needless to say there are various options with promises and how to handle them with &lt;strong&gt;Fable |&amp;gt; Fuse&lt;/strong&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://i.imgur.com/P4YcEi7.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;What&amp;rsquo;s more because Fuse and Fable are real-time you can edit the UX definitions and it the application in real-time across multiple devices!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://7sharpnine.com/img/fable-fuse/realtime.gif&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;hr /&gt;

&lt;h2 id=&#34;so-how-do-i-get-started-with-fable-fuse&#34;&gt;So how do I get started with &lt;strong&gt;Fable |&amp;gt; Fuse&lt;/strong&gt; ?&lt;/h2&gt;

&lt;p&gt;Well you&amp;rsquo;ll have to hold your horses, I was so excited to share this introductory post I haven&amp;rsquo;t wrote that part yet.  The package I&amp;rsquo;m working on is still private while I finalise things and make it really easy and friendly to create applications with &lt;strong&gt;Fable |&amp;gt; Fuse&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Stay tuned as there will be more in this series next week as I discuss the more technical aspects and how to create your first &lt;strong&gt;Fable |&amp;gt; Fuse&lt;/strong&gt; application.&lt;/p&gt;

&lt;p&gt;If there is enough interest I will also live stream this on my &lt;a href=&#34;https://www.livecoding.tv/7sharp9/&#34;&gt;livecoding.tv channel&lt;/a&gt;, please subscribe.&lt;/p&gt;

&lt;p&gt;A really big thanks to Alfonso Garcia-Caro (&lt;a href=&#34;https://twitter.com/alfonsogcnunez&#34;&gt;@alfonsogcnunez&lt;/a&gt;) creator of Fable for answering all my annoying questions.  And Lars Thomas Denstad (&lt;a href=&#34;https://twitter.com/COCPORN&#34;&gt;@cocporn&lt;/a&gt;) for help creating the Fuse API bindings for Fable.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>