<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Types on 7sharp9</title>
    <link>http://7sharpnine.com/tags/types/</link>
    <description>Recent content in Types on 7sharp9</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Dave Thomas</copyright>
    <lastBuildDate>Mon, 30 Mar 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://7sharpnine.com/tags/types/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Are you my type?</title>
      <link>http://7sharpnine.com/2015/03/30/2015-03-30-are-you-my-type/</link>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2015/03/30/2015-03-30-are-you-my-type/</guid>
      <description>&lt;p&gt;Did you know there was more to the type matching operator than just pattern matching and exception handling?&lt;/p&gt;

&lt;p&gt;The type matching operator is defined thus: &lt;code&gt;:?&lt;/code&gt;  It can be used by &lt;a href=&#34;https://msdn.microsoft.com/en-gb/library/dd547125.aspx&#34;&gt;pattern matching&lt;/a&gt; to match on a specific type.  For example, you might want to test that an object is a certain type or deal with an object being one of several different types.  Pattern matching on types is your friend here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;match symbolUse.Symbol with
| :? FSharpMemberOrFunctionOrValue
| :? FSharpUnionCase
| :? FSharpEntity
| :? FSharpField
| :? FSharpGenericParameter
| :? FSharpActivePatternCase
| :? FSharpParameter
| :? FSharpStaticParameter -&amp;gt;
    match getSymbolDeclarationLocation symbolUse currentFile solution with
    | SymbolDeclarationLocation.External -&amp;gt; false
    | SymbolDeclarationLocation.Unknown -&amp;gt; false
    | _ -&amp;gt; true
| _ -&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;During pattern matching you can also use the &lt;code&gt;as&lt;/code&gt; assignment operator to assign a named binding to the match so you can use it directly.  This is somewhat akin to using &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;as&lt;/code&gt; in C#, or using an &lt;code&gt;as&lt;/code&gt; and then a &lt;code&gt;null&lt;/code&gt; check.  Yuck!  None of that kind of thing in F#:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let isPrivateToFile = 
    match symbolUse.Symbol with
    | :? FSharpMemberOrFunctionOrValue as m -&amp;gt; not m.IsModuleValueOrMember
    | :? FSharpEntity as m -&amp;gt; m.Accessibility.IsPrivate
    | :? FSharpGenericParameter -&amp;gt; true
    | :? FSharpUnionCase as m -&amp;gt; m.Accessibility.IsPrivate
    | :? FSharpField as m -&amp;gt; m.Accessibility.IsPrivate
    | _ -&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It can also be used in &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/dd233194.aspx&#34;&gt;exception handing&lt;/a&gt; to match a specific type of exception, as in this example where &lt;code&gt;TimeoutExceptions&lt;/code&gt; are caught:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member x.GetDeclarationSymbols(line, col, lineStr) = 
    match infoOpt with 
    | None -&amp;gt; None
    | Some (checkResults, parseResults) -&amp;gt; 
        let longName,residue = Parsing.findLongIdentsAndResidue(col, lineStr)
        // Get items &amp;amp; generate output
        try
            let results = 
                Async.RunSynchronously (checkResults.GetDeclarationListSymbols(Some parseResults, line, col, lineStr, longName, residue, fun _ -&amp;gt; false), timeout = ServiceSettings.blockingTimeout )
            Some (results, residue)
        with :? TimeoutException -&amp;gt; None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A final use for &lt;code&gt;:?&lt;/code&gt; that people either don&amp;rsquo;t tend to use or know about, is during a normal expression assignment.  In this example &lt;code&gt;item :? DotNetProject&lt;/code&gt; would evaluate to true when &lt;code&gt;item&lt;/code&gt; is a &lt;code&gt;DotNetProject&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;override x.SupportsItem(item:IBuildTarget) =
    item :? DotNetProject
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although not used that often I find the &lt;code&gt;:?&lt;/code&gt; operator to be really useful.&lt;/p&gt;

&lt;p&gt;As usual F# helps to keep things short, succinct, and sweet!&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

&lt;hr style=&#34;margin: 1em 0&#34;&gt;
&lt;h1 id=&#34;essential-listening&#34;&gt;Essential listening:&lt;/h1&gt;


&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/5/51/Artofrebellioncover.JPG&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Suicidal Tendencies - The Art Of Rebellion&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Suicidal Tendencies - The Art Of Rebellion&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/7/78/Riseagainsttheblackmarket.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Rise Against - The Black Market&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Rise Against - The Black Market&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;




</description>
    </item>
    
  </channel>
</rss>