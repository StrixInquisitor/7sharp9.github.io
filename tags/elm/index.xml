<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elm on 7sharp9</title>
    <link>http://7sharpnine.com/tags/elm/</link>
    <description>Recent content in Elm on 7sharp9</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Dave Thomas</copyright>
    <lastBuildDate>Mon, 03 Oct 2016 00:32:48 +0100</lastBuildDate>
    <atom:link href="http://7sharpnine.com/tags/elm/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Building a single page application with Elm</title>
      <link>http://7sharpnine.com/2016/10/03/building-an-spa-with-elm/</link>
      <pubDate>Mon, 03 Oct 2016 00:32:48 +0100</pubDate>
      
      <guid>http://7sharpnine.com/2016/10/03/building-an-spa-with-elm/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been meaning to write this for a while but got sidetracked with other things, so this is an experience report of
using Elm to build a single page application.&lt;/p&gt;

&lt;p&gt;First of all you can see the final site &lt;a href=&#34;http://lynseythomas.com&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;basic-structure&#34;&gt;Basic Structure&lt;/h1&gt;

&lt;p&gt;The basic structure is a navigation driven single page application, which also uses &lt;a href=&#34;https://guide.elm-lang.org/architecture/&#34;&gt;The Elm Architecture&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I split the site into separate file mainly based on &lt;a href=&#34;http://blog.jenkster.com/2016/04/how-i-structure-elm-apps.html&#34;&gt;how i structure elm apps&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/krisajenkins&#34;&gt;Kris Jenkins&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;├─ App.elm
├─ Data.elm
├─ Shared.elm
├─ State.elm
├─ Types.elm
├─ View.elm
│
├─ About
│  └─ View.elm
├─ Category
│  └─ View.elm
├─ Contact
│  └─ View.elm
├─ Detail
│  └─ View.elm
├─ Gallery
│  └─ View.elm
└─ Home
   └─ View.elm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think its slightly overkill for a site of this size and complexity but its nice to understand where things will lead
on a bigger site where you have additional files like &lt;code&gt;State.elm&lt;/code&gt;, &lt;code&gt;Types.elm&lt;/code&gt; and &lt;code&gt;Rest.elm&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;One of the things that I did find a annoying at times was if I had &lt;code&gt;About/View.elm&lt;/code&gt; and &lt;code&gt;Category/View.elm&lt;/code&gt; both open in
the tabs of my editor.  Only &lt;code&gt;View.elm&lt;/code&gt; is shown in the tab so I had to hovering on the tab to see the full path or read
the module name at the top of the file.  Renaming the file to &lt;code&gt;AboutView.elm&lt;/code&gt; would mean the import statement would have
to change to &lt;code&gt;import About.AboutView&lt;/code&gt; as Elm enforces the directory name prefix.&lt;/p&gt;

&lt;h1 id=&#34;application-structure&#34;&gt;Application structure&lt;/h1&gt;

&lt;p&gt;As per the &lt;a href=&#34;http://blog.jenkster.com/2016/04/how-i-structure-elm-apps.html&#34;&gt;how i structure elm apps&lt;/a&gt; article my application was structured like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;module Main exposing (..)
import View exposing (rootView)
import Navigation
import State


main : Program Never
main =
    Navigation.program (Navigation.makeParser State.pathParser)
        { init = State.init
        , view = View.rootView
        , update = State.update
        , urlUpdate = State.urlUpdate
        , subscriptions = State.subscriptions
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the main elements of the application are imported and a &lt;code&gt;Navigation.program&lt;/code&gt; is started with the appropriate &lt;code&gt;init&lt;/code&gt;,
&lt;code&gt;view&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;urlUpdate&lt;/code&gt; and &lt;code&gt;subscriptions&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;model-messages-and-types&#34;&gt;Model Messages and types&lt;/h1&gt;

&lt;h2 id=&#34;model&#34;&gt;Model&lt;/h2&gt;

&lt;p&gt;The model is super simple, all that has to be recorded is the current page:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;type alias Model =
    { page : Page }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;messages&#34;&gt;Messages&lt;/h2&gt;

&lt;p&gt;The messages the application will deal with are also pretty simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;type Msg
    = NavigateTo Page
    | NavigateBack
    | GmailCaptcha
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NavigateTo&lt;/code&gt; simply navigates to the page in question.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NavigateBack&lt;/code&gt; just navigates back one page.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GmailCaptcha&lt;/code&gt; displays a captcha request which then shows an email address on success.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Page is just a union type consisting of the pages in the application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;type Page
    = Home
    | About
    | Contact
    | Gallery
    | CategoryDetail CategoryType
    | ItemDetail String
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And &lt;code&gt;CategoryType&lt;/code&gt; another union:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;type CategoryType
    = Perfumes
    | Seasides
    | IllustratedQuotes
    | Bottles
    | Cocktails
    | Architecture
    | VintageCameras
    | Cakes
    | Unknown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Category and Item are simple records:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;type alias Category =
    {categoryType : CategoryType, img : String, description : String}

type alias Item =
    {id : String, title : String, img : String, description : String, category : CategoryType}

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;update&#34;&gt;update&lt;/h1&gt;

&lt;p&gt;All Elm application have an &lt;code&gt;update&lt;/code&gt; function and ours is defined like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd b )
update msg model =
    case msg of
        NavigateTo page -&amp;gt;
            ( model, (Navigation.newUrl &amp;lt;| pageToString page) )

        NavigateBack -&amp;gt;
            model =&amp;gt; (Navigation.back 1)

        GmailCaptcha -&amp;gt;
            ( model, captcha() )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We pattern match on the &lt;code&gt;msg&lt;/code&gt; and either use the commands described in &lt;a href=&#34;#messages&#34;&gt;Messages&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;view&#34;&gt;View&lt;/h1&gt;

&lt;p&gt;The View is quite simple its a virtual dom defined by the following nodes on the `rootView:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;rootView model =
    div [class &amp;quot;container&amp;quot;]
        [
            nav [ class &amp;quot;navbar navbar-light&amp;quot;, attribute &amp;quot;role&amp;quot; &amp;quot;navigation&amp;quot; ]
                [ a [class &amp;quot;pull-xs-left&amp;quot;
                    , href &amp;lt;| toHash Home
                    , onClick&#39; &amp;lt;| NavigateTo Home
                    ]
                    [img [id &amp;quot;logo&amp;quot;, class &amp;quot;img-fluid&amp;quot;, src &amp;quot;/img/logogreen.png&amp;quot;, srcset [&amp;quot;/img/logogreen.png&amp;quot;,&amp;quot;/img/logogreen@2x.png&amp;quot; ] ] []]
                  ,  button [ attribute &amp;quot;aria-controls&amp;quot; &amp;quot;exCollapsingNavbar2&amp;quot;
                            , attribute &amp;quot;aria-expanded&amp;quot; &amp;quot;false&amp;quot;
                            , attribute &amp;quot;aria-label&amp;quot; &amp;quot;Toggle navigation&amp;quot;
                            , class &amp;quot;navbar-toggler hidden-sm-up flex-center&amp;quot;
                            , attribute &amp;quot;data-target&amp;quot; &amp;quot;#exCollapsingNavbar2&amp;quot;
                            , attribute &amp;quot;data-toggle&amp;quot; &amp;quot;collapse&amp;quot;
                            , type&#39; &amp;quot;button&amp;quot;
                            ]
                                [ text &amp;quot;☰&amp;quot; ]
                        
                , div [ class &amp;quot;collapse navbar-toggleable-xs&amp;quot;, id &amp;quot;exCollapsingNavbar2&amp;quot; ]
                    [   ul [ class &amp;quot;nav navbar-nav pull-sm-right text-xs-center&amp;quot; ]
                        [ renderMenuItem model Home &amp;quot;Home&amp;quot;
                        , renderMenuItem model About &amp;quot;About&amp;quot;
                        , renderMenuItem model Gallery &amp;quot;Gallery&amp;quot;
                        , renderMenuItem model Contact &amp;quot;Contact&amp;quot;
                        ]
                    ]
                ]
        , div [class &amp;quot;content container-fluid&amp;quot;] [viewPage model]
        , footer
        ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;renderMenuItem&lt;/code&gt; is just changing a navigations item&amp;rsquo;s style based on the current page so I have omitted that.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;viewPage&lt;/code&gt; is where the view is updated depending on which page is current:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;viewPage model =
    case model.page of
        Home -&amp;gt; getHomePage ()
        About -&amp;gt; getAboutPage ()
        Gallery -&amp;gt; getGalleryAsCards ()
        Contact -&amp;gt; getContactPage () 
        CategoryDetail category -&amp;gt; getCategoryPageCards category
        ItemDetail item -&amp;gt; getItemPage item
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see there is a separate view for each page which in return a list of nodes for that particular view, I wont list
them all as the are relatively similar.&lt;/p&gt;

&lt;p&gt;Heres an example of the &lt;code&gt;Category.View&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;getCategoryPageCards category =
    let
        items =
            List.filter (\c -&amp;gt; c.category == category) Data.items
        colClass =
            case List.length items of
                1 -&amp;gt; &amp;quot;col-xs-12&amp;quot;
                2 -&amp;gt; &amp;quot;col-xs-12 col-sm-6&amp;quot;
                _ -&amp;gt; &amp;quot;col-xs-12 col-sm-6 col-md-4&amp;quot;


        itemMapper item =
            div [ class colClass ]
                [ div [ class &amp;quot;card&amp;quot;]
                    [ a [ noContextMenu
                        , href (toHash &amp;lt;| ItemDetail item.id)
                        , onClick&#39; (NavigateTo &amp;lt;| ItemDetail item.id)
                        ]
                        [ img [ noContextMenu, class &amp;quot;card-img-top img-fluid&amp;quot;, src item.img ] [] ]
                    , div [ class &amp;quot;card-block&amp;quot; ]
                        [ p [ class &amp;quot;card-text&amp;quot; ] [ text item.title ] ]
                    ]
                ]
    in
        div [ class &amp;quot;container-fluid&amp;quot; ]
            [ div [ class &amp;quot;row&amp;quot; ]
                (items |&amp;gt; List.map itemMapper)
            , div [] [ backButton ]
            ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The nodes returned from &lt;code&gt;getCategoryPageCards&lt;/code&gt; are returned as part of &lt;code&gt;viewPage&lt;/code&gt;.  Data.items are filtered by the current
category and mapped into &lt;code&gt;divs&lt;/code&gt; with &lt;code&gt;onClick&lt;/code&gt; navigation to the &lt;code&gt;ItemDetail&lt;/code&gt; page&lt;/p&gt;

&lt;h1 id=&#34;navigation&#34;&gt;Navigation&lt;/h1&gt;

&lt;p&gt;Navigation is handled with Elm &lt;a href=&#34;http://package.elm-lang.org/packages/elm-lang/navigation/latest&#34;&gt;Navigation&lt;/a&gt; which provides the &lt;code&gt;Navigation.program&lt;/code&gt; you saw in &lt;a href=&#34;#application-structure&#34;&gt;Application structure&lt;/a&gt;.&lt;br /&gt;
The program function has been extended with an additional two arguments.&lt;/p&gt;

&lt;p&gt;The first additional argument is a &lt;code&gt;Parser&lt;/code&gt;, there is a utility function called &lt;code&gt;makeParser that allows us to turn a 
browser&lt;/code&gt;Location` into whatever data we want to.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;makeParser : (Location -&amp;gt; a) -&amp;gt; Parser a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the &lt;code&gt;Navigation.program&lt;/code&gt; you can see this used along with the functions below to parse a &lt;code&gt;Location&lt;/code&gt; into a &lt;code&gt;Page&lt;/code&gt;: &lt;code&gt;Navigation.program (Navigation.makeParser State.pathParser)&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;pathParser : Navigation.Location -&amp;gt; Result String Page
pathParser location =
    parse identity pageParser (String.dropLeft 1 location.pathname)


pageParser : UrlParser.Parser (Page -&amp;gt; a) a
pageParser =
    oneOf
        [ format Home (oneOf [ s &amp;quot;home&amp;quot;, s &amp;quot;&amp;quot; ])
        , format About (s &amp;quot;about&amp;quot;)
        , format Shop (s &amp;quot;shop&amp;quot;)
        , format Gallery (s &amp;quot;gallery&amp;quot;)
        , format Contact (s &amp;quot;contact&amp;quot;)
        , format (stringToCategoryType &amp;gt;&amp;gt; CategoryDetail) (s &amp;quot;category&amp;quot; &amp;lt;/&amp;gt; UrlParser.string)
        , format ItemDetail (s &amp;quot;item&amp;quot; &amp;lt;/&amp;gt; UrlParser.string)
        ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This leads nicely into parsing, actually first lets look at &lt;code&gt;urlUpdate&lt;/code&gt; because its pretty simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;urlUpdate : Result a Page -&amp;gt; Model -&amp;gt; ( Model, Cmd c )
urlUpdate result model =
    case result of
        Err _ -&amp;gt;
            ( model, Navigation.modifyUrl (pageToString model.page) )

        Ok page -&amp;gt;
            { model | page = page } =&amp;gt; updateAnalytics (pageToString page)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We pattern match on the &lt;code&gt;result&lt;/code&gt; and if its &lt;code&gt;Ok&lt;/code&gt; we update the models page to the one passed in.  If the result is an
error (&lt;code&gt;Err&lt;/code&gt;) then we modify the url with &lt;code&gt;Navigation.modifyUrl&lt;/code&gt; just pointing it back to the previous page.  &lt;code&gt;pageToString&lt;/code&gt;
simply turns the &lt;code&gt;Page&lt;/code&gt; type back into a string.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to strategically ignore &lt;code&gt;updateAnalytics&lt;/code&gt;
for now as this will be covered later.&lt;/p&gt;

&lt;h1 id=&#34;parsing&#34;&gt;Parsing&lt;/h1&gt;

&lt;p&gt;Parsing is handled with a small parser combinator library &lt;a href=&#34;http://package.elm-lang.org/packages/evancz/url-parser/latest/&#34;&gt;url-parser&lt;/a&gt; in the function above you can see how combinators
are used to parse &lt;code&gt;Navigation&lt;/code&gt; into a &lt;code&gt;Page&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;oneOf&lt;/code&gt; is a combinator that will try to match one of the parsers in a list.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; is a string combinator matching a particular string like &amp;ldquo;home&amp;rdquo;, &amp;ldquo;shop&amp;rdquo; etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;/&amp;gt;&lt;/code&gt; is a combinator that matches a &lt;code&gt;/&lt;/code&gt; character in the location like &lt;code&gt;item/myitem&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UrlParser.string&lt;/code&gt; matches any string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format&lt;/code&gt; Is a combinator that allows you to customise or map another &lt;code&gt;Parser&lt;/code&gt;, here it is used to Parsed output into the union types that represent them.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;google-analytics&#34;&gt;Google Analytics&lt;/h1&gt;

&lt;p&gt;Ok back to &lt;code&gt;updateAnalytics&lt;/code&gt; remember from &lt;code&gt;urlUpdate&lt;/code&gt;?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;{ model | page = page } =&amp;gt; updateAnalytics (pageToString page)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;updateAnalytics&lt;/code&gt; is a function defined as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;port updateAnalytics: String -&amp;gt; Cmd msg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes its just a type signature as this is a &lt;a href=&#34;https://guide.elm-lang.org/interop/javascript.html#ports&#34;&gt;port&lt;/a&gt; where we will be sending information out of our app into the fabulous
JavaScript world, I&amp;rsquo;m glad you can&amp;rsquo;t hear the sarcasm in my voice :-)&lt;/p&gt;

&lt;p&gt;Because this is a single page application we need to provide a way to update Google analytics whenever the page navigation
changes otherwise everything will be displayed as a hit to the root.  Luckily all we need is a call to the normal
Google Analytics script via the port we just set up.&lt;/p&gt;

&lt;p&gt;The JavaScript looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;var Elm = require(&#39;./App&#39;);
var app = Elm.Main.embed(document.getElementById(&#39;main&#39;));

app.ports.updateAnalytics.subscribe(function (page) {
    ga(&#39;set&#39;, &#39;page&#39;, page);
    ga(&#39;send&#39;, &#39;pageview&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the fist two lines you can see where Elm is embedded into the the html &lt;code&gt;main&lt;/code&gt; element, the important part is where
&lt;code&gt;app.ports.updateAnalytics.subscribe&lt;/code&gt; is used to subscribe to the port Elm is publishing whenever &lt;code&gt;updateAnalytics&lt;/code&gt; is
being called with the new &lt;code&gt;Page&lt;/code&gt;.  The result of this is we can now use Google Analytics to see exactly what page a user
is visiting.&lt;/p&gt;

&lt;p&gt;Actually the &lt;code&gt;GmailCaptcha&lt;/code&gt; message is the same except it uses a &lt;code&gt;Port&lt;/code&gt; defined like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;port captcha : () -&amp;gt; Cmd msg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then the JavaScript subscription is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;app.ports.captcha.subscribe(function () {
    window.open(&#39;http://www.google.com/recaptcha/mailhide/...&#39;, &#39;&#39;, &#39;toolbar=0,scrollbars=0,location=0,statusbar=0,menubar=0,resizable=0,width=500,height=300&#39;);
    return false;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All that&amp;rsquo;s happening here is that when the &lt;code&gt;GmailCaptcha&lt;/code&gt; message is sent a window is opened via the &lt;code&gt;Port&lt;/code&gt; and JavaScript to allow
the email address to be retrieved.&lt;/p&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;This post never intended to explain in detail about creating the web application more just to expose some of the more
interesting parts and to show how much fun it is working in Elm is.&lt;/p&gt;

&lt;p&gt;I used VSCode with the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=sbrink.elm&#34;&gt;elm addin&lt;/a&gt; to build the entire thing and it worked out wonderfully.&lt;/p&gt;

&lt;h2 id=&#34;comparison-with-fable&#34;&gt;Comparison with Fable&lt;/h2&gt;

&lt;p&gt;This is the bit I was dreading a little.  &lt;a href=&#34;https://fable-compiler.github.io/&#34;&gt;Fable&lt;/a&gt; is a F# -&amp;gt; JavaScript transpiler.  I&amp;rsquo;ve done quite a lot of hacking
with Fable and also made some contributions lately.  I would describe Elm as batteries included, and very slick, and
lovely to work in.  I really love using it!  I really like the great compiler message, I also like the public type
annotations that the Elm compiler nudges you to add.  Its very useful when reading code on-line to know the types on the
publicly exposed parts so that you don&amp;rsquo;t have to use a visual editor to find out.  I could probably write an entire post
comparing the two languages so I&amp;rsquo;ll leave it there for now.&lt;/p&gt;

&lt;h1 id=&#34;so-whats-left&#34;&gt;So whats Left?&lt;/h1&gt;

&lt;p&gt;All that&amp;rsquo;s left is the deployment and hosting side of thing which I&amp;rsquo;ll delve into that another time.&lt;/p&gt;

&lt;p&gt;If you have any requests for me to go into parts in more detail please leave a comment or ping me on Twitter and I&amp;rsquo;ll add that in too.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Elmtastic Updates</title>
      <link>http://7sharpnine.com/2016/06/30/elmtastic-updates/</link>
      <pubDate>Thu, 30 Jun 2016 13:53:45 +0100</pubDate>
      
      <guid>http://7sharpnine.com/2016/06/30/elmtastic-updates/</guid>
      <description>

&lt;p&gt;With the release of Elm 0.17 there were some fundamental changes to the Elm language.  This post
is my attempt to help those that may be struggling with these changes&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve played with lots of new languages over the last year or so namely Elixir, Rust, and Elm.  Elm
and Elixir have been my favorites and I hope to cover those much more in this and future blog posts.&lt;/p&gt;

&lt;h1 id=&#34;so-whats-new-in-elm-0-17-why-do-i-need-to-upgrade-anything&#34;&gt;So whats new in Elm 0.17 why do I need to upgrade anything?&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ll summarise here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Signals have been removed (Hence some upgrade is required if you had any code using signals.)&lt;/li&gt;
&lt;li&gt;Faster HTML renderer&lt;/li&gt;
&lt;li&gt;Libraries for geolocation, page visibility, and web sockets&lt;/li&gt;
&lt;li&gt;Generated JS is smaller and works with Google&amp;rsquo;s Closure Compiler&lt;/li&gt;
&lt;li&gt;Generated JS works with RequireJS and CommonJS&lt;/li&gt;
&lt;li&gt;Features in place for services like GraphQL and Elixir Phoenix&lt;/li&gt;
&lt;li&gt;Improved documentation at guide.elm-lang.org&lt;/li&gt;
&lt;li&gt;Helpful messages when decoding JSON fails&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The big things are that are going to throw a spanner in the works are Signals have been removed
and the following packages have moved around:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;evancz/elm-html    -&amp;gt; elm-lang/html
evancz/elm-svg     -&amp;gt; elm-lang/svg
evancz/virtual-dom -&amp;gt; elm-lang/virtual-dom
evancz/start-app   -&amp;gt; elm-lang/html
evancz/elm-effects -&amp;gt; elm-lang/core
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be sure to read the &lt;a href=&#34;http://elm-lang.org/blog/farewell-to-frp&#34;&gt;official post&lt;/a&gt; on the subject for the full information.&lt;/p&gt;

&lt;h2 id=&#34;how-do-i-upgrade-are-there-any-resources-to-help&#34;&gt;How Do I upgrade?  Are there any resources to help?&lt;/h2&gt;

&lt;p&gt;There are a few guides already that do help, the &lt;a href=&#34;https://github.com/elm-lang/elm-platform/blob/master/upgrade-docs/0.17.md&#34;&gt;official upgrade plan&lt;/a&gt; is
really useful as is &lt;a href=&#34;http://www.lambdacat.com/migrating-from-elm-0-16-to-0-17-from-startapp/&#34;&gt;migrating from elm 0.16 to 0.17&lt;/a&gt; and I would advise that
you read the official plan before this or any other guides.  Hopefully my whistle stop
tour of upgrading an existing package may be of help.&lt;/p&gt;

&lt;h2 id=&#34;example-upgrade&#34;&gt;Example Upgrade&lt;/h2&gt;

&lt;p&gt;Lets take the &lt;a href=&#34;https://github.com/Fresheyeball/elm-sprite&#34;&gt;elm-sprite&lt;/a&gt; package as an example, its fairly simple with only a few
dependencies.&lt;/p&gt;

&lt;h3 id=&#34;elm-package-json&#34;&gt;elm.package.json&lt;/h3&gt;

&lt;p&gt;Lets look at the elm.package.json file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;summary&amp;quot;: &amp;quot;Simple sprite rendering for elm-html&amp;quot;,
    &amp;quot;repository&amp;quot;: &amp;quot;https://github.com/Fresheyeball/elm-sprite.git&amp;quot;,
    &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;,
    &amp;quot;source-directories&amp;quot;: [
        &amp;quot;src&amp;quot;
    ],
    &amp;quot;exposed-modules&amp;quot;: [
        &amp;quot;Sprite&amp;quot;
    ],
    &amp;quot;dependencies&amp;quot;: {
        &amp;quot;elm-lang/core&amp;quot;: &amp;quot;3.0.0 &amp;lt;= v &amp;lt; 4.0.0&amp;quot;
    },
    &amp;quot;elm-version&amp;quot;: &amp;quot;0.16.0 &amp;lt;= v &amp;lt; 0.17.0&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to update the dependencies for &lt;code&gt;elm-lang/core&lt;/code&gt; to &lt;code&gt;4.0.1 &amp;lt;= v &amp;lt; 5.0.0&lt;/code&gt;
and &lt;code&gt;elm-version&lt;/code&gt; to &lt;code&gt;0.17.0 &amp;lt;= v &amp;lt; 0.18.0&lt;/code&gt;.  Pretty easy in terms of dependencies.&lt;/p&gt;

&lt;h3 id=&#34;sprite-elm&#34;&gt;Sprite.elm&lt;/h3&gt;

&lt;p&gt;This ones pretty easy, the only thing to change is the module definition which is
using an obsolete syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;module Sprite (..) where
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now becomes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;module Sprite exposing (..)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Actually the Elm compiler does a fantastic job here by actually telling us what the problem is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;-- SYNTAX PROBLEM --------------------------------------------------- Sprite.elm

I ran into something unexpected when parsing your code!

1| module Sprite (..) where
                 ^
I am looking for one of the following things:

    something like `exposing (..)` which replaced `where` in 0.17
    whitespace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So that was pretty painless, lets have a look at the example file: &lt;code&gt;One.elm&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;one-elm&#34;&gt;One.elm&lt;/h3&gt;

&lt;p&gt;This ones a bit more tricky as there are signals involved and packages that have moved about.&lt;br /&gt;
Lets have a look at the changes needed.&lt;/p&gt;

&lt;p&gt;First of all lets address the obsolete &lt;code&gt;where&lt;/code&gt; syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;module One exposing (..)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to remove the &lt;code&gt;Signal&lt;/code&gt;, &lt;code&gt;Html.Events&lt;/code&gt; and &lt;code&gt;Effects&lt;/code&gt; imports packages, let&amp;rsquo;s remove these:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;import Signal exposing (message, Address)
import Html.Events exposing (on, targetValue)
import Effects exposing (Effects, none)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to address the changes in the Time package as &lt;code&gt;fps&lt;/code&gt; is no longer available, we can use milliseconds instead.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;import Time exposing (Time, millisecond)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to adjust the &lt;code&gt;StartpApp&lt;/code&gt; import and use &lt;code&gt;Html.App&lt;/code&gt; instead.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;import Html.App as Html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So all in all the imports section will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;module One exposing (..)

import Html exposing (..)
import Html.App as Html
import Time exposing (Time, millisecond)
import Html.Attributes as A
import Sprite exposing (..)
import Array
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;action&#34;&gt;Action&lt;/h3&gt;

&lt;p&gt;The first thing we will tackle is the Action which flows though this application.  It now looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;type Action
    = Tick Time
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As &lt;code&gt;Action&lt;/code&gt; has now been replaced with &lt;code&gt;Msg&lt;/code&gt; so we need to change this to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;type Msg
  = Tick Time
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;init&#34;&gt;init&lt;/h3&gt;

&lt;p&gt;Next lets look at the init function its signature is slightly different now.  &lt;code&gt;Html.Program&lt;/code&gt; now &lt;a href=&#34;http://package.elm-lang.org/packages/elm-lang/html/1.1.0/Html-App#program&#34;&gt;starts the application&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;init : (model, Cmd msg)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So rather than:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;init : Sprite {}
init =
   { sheet = &amp;quot;https://10firstgames.files.wordpress.com/2012/02/actionstashhd.png&amp;quot;
     , rows = 16
     , columns = 16
     , size = ( 2048, 2048 )
     , frame = 0
     , dope = idle
     }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will now become:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;init : (Sprite {}, Cmd Msg)
init = (
  { sheet = &amp;quot;https://10firstgames.files.wordpress.com/2012/02/actionstashhd.png&amp;quot;
    , rows = 16
    , columns = 16
    , size = ( 2048, 2048 )
    , frame = 0
    , dope = idle
    } , Cmd.none)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;view&#34;&gt;view&lt;/h3&gt;

&lt;p&gt;This is what view looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;view : Address Action -&amp;gt; Sprite {} -&amp;gt; Html
view address s =
    let
        onInput address contentToValue =
            on
                &amp;quot;input&amp;quot;
                targetValue
                (message address &amp;lt;&amp;lt; contentToValue)
    in
        div
            []
            [ node
                &amp;quot;sprite&amp;quot;
                [ A.style (sprite s) ]
                []
            ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At first glance this looks a bit more complex but when you look at the code a little
more you come to realise that the &lt;code&gt;onInput&lt;/code&gt; function is not even used anymore this is
just dead code.  So no all that remains is to change &lt;code&gt;view&lt;/code&gt; to match the new Elm 0.17
architecture, so instead of &lt;code&gt;Address Action -&amp;gt; Sprite {} -&amp;gt; Html&lt;/code&gt; it will now be
&lt;code&gt;Sprite {} -&amp;gt; Html Msg&lt;/code&gt; as &lt;code&gt;Address&lt;/code&gt; and &lt;code&gt;Action&lt;/code&gt; are now no longer needed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;view : Sprite {} -&amp;gt; Html Msg
view s =
  div
      []
      [
        node
          &amp;quot;sprite&amp;quot;
          [ A.style (sprite s)]
          []
      ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;update&#34;&gt;update&lt;/h3&gt;

&lt;p&gt;Ok, now for &lt;code&gt;update&lt;/code&gt; lets have a look at that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;update : Action -&amp;gt; Sprite {} -&amp;gt; ( Sprite {}, Effects Action )
update action s =
    let
        s&#39; =
            case action of
                Tick _ -&amp;gt;
                    advance s
    in
        ( s&#39;, none )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;update&lt;/code&gt; now has a signature of &lt;code&gt;msg -&amp;gt; model -&amp;gt; (model, Cmd msg)&lt;/code&gt; so all we really have
to do is replace &lt;code&gt;Action&lt;/code&gt; with &lt;code&gt;Msg&lt;/code&gt;, and &lt;code&gt;Effects Action&lt;/code&gt; with &lt;code&gt;Cmd Msg&lt;/code&gt;.  Finally I
change the return to: &lt;code&gt;Cmd.none&lt;/code&gt; which was previously &lt;code&gt;Effects.none&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;update : Msg -&amp;gt; Sprite {} -&amp;gt; (Sprite {}, Cmd Msg)
update action s =
    let
        s&#39; =
            case action of
                Tick _ -&amp;gt;
                    advance s
    in
        ( s&#39;, Cmd.none )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;subs&#34;&gt;subs&lt;/h3&gt;

&lt;p&gt;This part is new, with the old 0.16 based version there was a signal which was mapping
time to a sprite update:&lt;code&gt;[ Signal.map Tick (fps 30) ]&lt;/code&gt;.  Now that we will be using
subscriptions this is a simple function like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;subs : Sprite {} -&amp;gt; Sub Msg
subs model =
  Time.every (millisecond * 33) Tick
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So every 33 milliseconds (30 frames per second) we are sending a Tick command to the update function.&lt;/p&gt;

&lt;h3 id=&#34;application-start&#34;&gt;application start&lt;/h3&gt;

&lt;p&gt;The last part is the application start, heres what it looks like in 0.16:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;app : StartApp.App (Sprite {})
app =
    StartApp.start
        { view = view
        , update = update
        , init = ( init, none )
        , inputs = [ Signal.map Tick (fps 30) ]
        }


main : Signal Html
main =
    app.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the &lt;code&gt;signal&lt;/code&gt; I talked about above.  This whole section has now become a lot simpler in Elm 0.17.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elm&#34;&gt;main : Program Never
main =
  Html.program
    { view = view
    , update = update
    , init = init
    , subscriptions = subs
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;StartApp&lt;/code&gt; has now become &lt;code&gt;Html.App&lt;/code&gt; which we aliased to &lt;code&gt;Html&lt;/code&gt; at the beginning &lt;code&gt;import Html.App as Html&lt;/code&gt;
and we use the &lt;code&gt;program&lt;/code&gt; function to feed in all the functions we just declared.&lt;/p&gt;

&lt;p&gt;Ok, we&amp;rsquo;re all done, hopefully someone found this useful!&lt;/p&gt;

&lt;p&gt;One tip I can give is to update the function signatures for each function first and it should make
things a little clearer on what you need to do.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
  </channel>
</rss>