<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Agents on 7sharp9</title>
    <link>http://7sharpnine.com/tags/agents/</link>
    <description>Recent content in Agents on 7sharp9</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Dave Thomas</copyright>
    <lastBuildDate>Sun, 15 Jul 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://7sharpnine.com/tags/agents/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Lurking Horror</title>
      <link>http://7sharpnine.com/2012/07/15/2012-07-15-the-lurking-horror/</link>
      <pubDate>Sun, 15 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2012/07/15/2012-07-15-the-lurking-horror/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Deep in the darkest depths lurks an ancient horror, when the time is right it will rise forth and leave you screaming for mercy and begging for forgiveness&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OK, I have a penchant for being over dramatic but in this post I am going to reveal some little known caveats in a well known and much revelled area of F#, agents aka the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ee370357&#34; title=&#34;Control.MailboxProcessor&amp;lt;&#39;Msg&amp;gt;&#34;&gt;&lt;code&gt;MailboxProcessor&lt;/code&gt;&lt;/a&gt;. Gasp!&lt;/p&gt;

&lt;p&gt;First let me give you a demonstration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System
open System.Diagnostics
type internal BadAgentMessage =
  | Message of string * int
  | Lock
  | Unlock
   
type BadAgent() =
  
  let agent = MailboxProcessor.Start(fun agent -&amp;gt;
    let sw = Stopwatch()
    let rec waiting () =
      agent.Scan(function
        | Unlock -&amp;gt; Some(working ())
        | _ -&amp;gt; None)
 
    and working() = async {
      let! msg = agent.Receive()
      match msg with
      | Lock -&amp;gt;   return! waiting()
      | Unlock -&amp;gt; return! working()
      | Message (msg, iter) -&amp;gt;
          if iter = 0 then sw.Start()
          if iter % 10000 = 0
            then sw.Stop()
                 printfn &amp;quot;%s : %i in: %fms&amp;quot; msg iter sw.Elapsed.TotalMilliseconds
                 sw.Restart()
          return! working() }
    working())      
 
  member x.Msg(msg) = agent.Post(Message msg)
  member x.Lock() = agent.Post(Lock)
  member x.Unlock() = agent.Post(Unlock)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;BadAgentMessage&lt;/code&gt; type defines a discriminated union that we are going to use for the agents message interface.  This is comprised of three elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Message:&lt;/strong&gt;  This will just be a simple &lt;code&gt;string&lt;/code&gt;-based message and an &lt;code&gt;int&lt;/code&gt; used as a counter.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lock:&lt;/strong&gt;  This is used to stop message processing within the agent by causing it to wait for an &lt;code&gt;Unlock&lt;/code&gt; message to arrive.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unlock:&lt;/strong&gt;  This message is used to resume the processing within the agent, effectively exiting the locked state.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have two main sections to the agents body which I will describe below.&lt;/p&gt;

&lt;h3 id=&#34;working&#34;&gt;working&lt;/h3&gt;

&lt;p&gt;The purpose of the &lt;code&gt;working&lt;/code&gt; function is to dequeue the messages from the agent and process them with pattern matching; &lt;code&gt;let! msg = agent.Receive()&lt;/code&gt; is used to get the next message which is then pattern matched to be one of the three messages types of the &lt;code&gt;BadAgentMessage&lt;/code&gt;.  When the &lt;code&gt;Lock&lt;/code&gt; message is encountered &lt;code&gt;return! waiting()&lt;/code&gt; is used to place the agent in a state where it is waiting for an &lt;code&gt;Unlock&lt;/code&gt; message to arrive.  An &lt;code&gt;Unlock&lt;/code&gt; message simply resumes processing by calling &lt;code&gt;return! working()&lt;/code&gt;.  The only real purpose of the &lt;code&gt;Unlock&lt;/code&gt; message is to exit from the locked state that is introduced by the &lt;code&gt;Lock&lt;/code&gt; message.  The &lt;code&gt;Message&lt;/code&gt; message simply starts a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.diagnostics.stopwatch.aspx&#34; title=&#34;StopWatch&#34;&gt;&lt;code&gt;StopWatch&lt;/code&gt;&lt;/a&gt; on the first operation by using the Messages counter, and then stops it again on the 10,000th operation.  At this point the time taken is also printed to the console and the &lt;code&gt;StopWatch&lt;/code&gt; is restarted before resuming the main processing loop by calling &lt;code&gt;return! working()&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;waiting&#34;&gt;waiting&lt;/h3&gt;

&lt;p&gt;This function is using the agents &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ee370554.aspx&#34; title=&#34;MailboxProcessor.Scan&#34;&gt;&lt;code&gt;Scan&lt;/code&gt;&lt;/a&gt; function to wait for an &lt;code&gt;Unlock&lt;/code&gt; message to arrive, once it does it puts the agent back into normal operation by calling returning &lt;code&gt;Some(working())&lt;/code&gt; from the &lt;code&gt;Scan&lt;/code&gt;function.  If the message does not match an &lt;code&gt;Unlock&lt;/code&gt; message then &lt;code&gt;None&lt;/code&gt; is returned and the agent simply waits for the next message before trying again.&lt;/p&gt;

&lt;p&gt;The rest of the agent is just ancillary member functions to allow easy sending of the three message types.&lt;/p&gt;

&lt;h3 id=&#34;test-harness&#34;&gt;Test Harness&lt;/h3&gt;

&lt;p&gt;And here&amp;rsquo;s a very simple test harness:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let ba = BadAgent()
 
printfn &amp;quot;Press and key to start&amp;quot;
Console.ReadLine() |&amp;gt; ignore
let dump number =
    for i in 0 .. number do
        ba.Msg(&amp;quot;A message&amp;quot;, i)
 
ta.Lock()
dump 200000
ta.Unlock()
 
Console.ReadLine() |&amp;gt; ignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK, so this is a very synthetic test but I just wanted to highlight some of the internal behaviour.  If I run this code I get the following console output:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lh5.googleusercontent.com/-chMoEOya7CE/T_tRraiW_eI/AAAAAAAABbY/wsQkWbm4DJM/s677/ConsoleTimes.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;You can see that the time to process the first 10,000 messages is 3083ms then it steadily decreases until the last 10,000 messages are processed in 94ms.  The processing time for 10,000 messages is about 33 times slower at the beginning than as it is at the end.  Why?&lt;/p&gt;

&lt;h2 id=&#34;opening-it-up&#34;&gt;Opening it up&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at some of the internals of the &lt;code&gt;MailboxProcessor&lt;/code&gt; to understand what&amp;rsquo;s going on.  First of all the core functionality is actually contained within the &lt;code&gt;Mailbox&lt;/code&gt; type with the &lt;code&gt;MailboxProcessor&lt;/code&gt; acting as an augmenter.  &lt;code&gt;TryPostAndReply&lt;/code&gt;, &lt;code&gt;PostAndReply&lt;/code&gt;, &lt;code&gt;PostAndTryAsyncReply&lt;/code&gt;, and &lt;code&gt;PostAndAsyncReply&lt;/code&gt; all add a single functionality to the &lt;code&gt;Mailbox&lt;/code&gt; type; the ability to synchronously or asynchronously reply to a message once it arrives.  &lt;code&gt;TryPostAndReply&lt;/code&gt; and &lt;code&gt;PostAndReply&lt;/code&gt; both wait synchronously for a message to arrive before replying, whereas &lt;code&gt;PostAndTryAsyncReply&lt;/code&gt; and &lt;code&gt;PostAndAsyncReply&lt;/code&gt; both reply asynchronously.  This functionality is achieved with the use of the &lt;code&gt;ResultCell&lt;/code&gt; and &lt;code&gt;AsyncReplyChannel&lt;/code&gt; types.  For an in-depth discussion on this you might want to refer to my earlier series which describes implementing the &lt;code&gt;MailboxProcessor&lt;/code&gt; with &lt;a href=&#34;http://msdn.microsoft.com/en-us/devlabs/gg585582.aspx&#34; title=&#34;TPL Dataflow&#34;&gt;TPL Dataflow&lt;/a&gt; (see &lt;a href=&#34;http://7sharpnine.com/2012/01/22/2012-01-22-fsharp-dataflow-agents-i/&#34; title=&#34;FSharp Dataflow agents - Part 1&#34;&gt;Part 1&lt;/a&gt;, &lt;a href=&#34;http://7sharpnine.com/2012/01/30/2012-01-24-fsharp-dataflow-agents-ii/&#34; title=&#34;FSharp Dataflow agents - Part 2&#34;&gt;Part 2&lt;/a&gt; and &lt;a href=&#34;http://7sharpnine.com/2012/02/20/2012-02-19-fsharp-dataflow-agents-iii/&#34; title=&#34;FSharp Dataflow agents - Part 3&#34;&gt;Part 3&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Below are some snippets of code from the &lt;code&gt;Mailbox&lt;/code&gt; type you might want to take a peek yourself at the &lt;a href=&#34;https://github.com/fsharp/fsharp/blob/master/src/fsharp/FSharp.Core/control.fs#L1854&#34; title=&#34;Mailbox code&#34;&gt;FSharp repository&lt;/a&gt; over at &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; for a closer inspection, be warned thought there is a lot of code in there!&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the initial type definition for the &lt;code&gt;Mailbox&lt;/code&gt;, you can see that  there are two mutable fields:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type Mailbox&amp;lt;&#39;Msg&amp;gt;() = 
    let mutable inboxStore  = null
    let mutable arrivals = new Queue&amp;lt;&#39;Msg&amp;gt;()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;inboxStore&lt;/code&gt; is a generic List type &lt;code&gt;System.Collection.Generic.List&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;arrivals&lt;/code&gt; is a &lt;code&gt;System.Collections.Generic.Queue&amp;lt;T&amp;gt;&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;For now the &lt;code&gt;inboxStore&lt;/code&gt; is null and is only ever assigned via &lt;code&gt;Scan&lt;/code&gt; or &lt;code&gt;TryScan&lt;/code&gt; and this is done indirectly via the &lt;code&gt;inbox&lt;/code&gt; member shown here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member x.inbox =
    match inboxStore with
    | null -&amp;gt; inboxStore &amp;lt;- new System.Collections.Generic.List&amp;lt;&#39;Msg&amp;gt;(1) // ResizeArray
    | _ -&amp;gt; ()
    inboxStore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Understanding the code in the &lt;code&gt;Mailbox&lt;/code&gt; can be difficult given the amount of code, so I&amp;rsquo;ll highlight the key functions in the sections below to make it a little easier.&lt;/p&gt;

&lt;h3 id=&#34;scan-tryscan&#34;&gt;Scan / TryScan&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Scan&lt;/code&gt; is just an async wrapper around &lt;code&gt;TryScan&lt;/code&gt;. If &lt;code&gt;TryScan&lt;/code&gt; returns None an exception is raised, if not then the result from &lt;code&gt;TryScan&lt;/code&gt; is returned.&lt;/p&gt;

&lt;p&gt;So now lets take a look at the source of &lt;code&gt;TryScan&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member x.TryScan ((f: &#39;Msg -&amp;gt; (Async&amp;lt;&#39;T&amp;gt;) option), timeout) : Async&amp;lt;&#39;T option&amp;gt; =
    let rec scan() =
        async { match x.scanArrivals(f) with
                | None -&amp;gt; // Deschedule and wait for a message. When it comes, rescan the arrivals
                          let! ok = waitOne(timeout)
                          if ok then return! scan() else return None
                | Some resP -&amp;gt; let! res = resP
                               return Some(res) }
    // Look in the inbox first
    async { match x.scanInbox(f,0) with
            | None  -&amp;gt; return! scan()
            | Some resP -&amp;gt; let! res = resP
                           return Some(res) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see here that an &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/dd233250.aspx&#34; title=&#34;async workflows&#34;&gt;async workflow&lt;/a&gt; is declared that first pattern matches on &lt;code&gt;x.scanInbox&lt;/code&gt;, passing in the predicate scan function &lt;code&gt;f&lt;/code&gt; and the literal &lt;code&gt;0&lt;/code&gt;.  If &lt;code&gt;None&lt;/code&gt; is returned then there is no match and the recursive function &lt;code&gt;scan&lt;/code&gt; is returned.  This time the function &lt;code&gt;x.scanArrivals&lt;/code&gt; is be called, again passing in the predicate function &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An interesting point to note, is that each message that arrives that doesn&amp;rsquo;t match the predicate &lt;code&gt;f&lt;/code&gt; resets the  timer: &lt;code&gt;let! ok = waitOne(timeout)&lt;/code&gt;, this means that any number of trivial messages that arrive keep the &lt;code&gt;TryScan&lt;/code&gt; function running.  This was also mentioned by Jon Harrop in a Stackoverflow question entitled &lt;a href=&#34;http://stackoverflow.com/a/4891920/607275&#34; title=&#34;How to use TryScan in F# properly&#34;&gt;How to use TryScan in F# properly&lt;/a&gt;.  Jon also mentions locking which I will address in the &lt;code&gt;scanArrivals&lt;/code&gt; section below.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So what&amp;rsquo;s the difference between &lt;code&gt;scanArrivals&lt;/code&gt; and &lt;code&gt;scanInbox&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scanInbox&lt;/code&gt; operates on the &lt;code&gt;inboxStore&lt;/code&gt; which you might recall is a &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; type, whereas &lt;code&gt;scanArrivals&lt;/code&gt; operates on &lt;code&gt;arrivals&lt;/code&gt; which is a &lt;code&gt;Queue&amp;lt;T&amp;gt;&lt;/code&gt; type.  The big difference between these two is that as messages first arrive in the Mailbox they end up in the arrivals queue first, and when messages are not matched by the predicate function &lt;code&gt;f&lt;/code&gt; they are added to the &lt;code&gt;inboxStore&lt;/code&gt;, hence the need to always check the &lt;code&gt;inboxStore&lt;/code&gt; before the &lt;code&gt;arrivals&lt;/code&gt; queue otherwise previously unmatched scan messages would not be processed correctly.  You might be asking yourself why not use a &lt;code&gt;Queue&amp;lt;T&amp;gt;&lt;/code&gt; for both the &lt;code&gt;inbox&lt;/code&gt; and the &lt;code&gt;arrivals&lt;/code&gt;?  It comes down to the fact that it&amp;rsquo;s not possible to easily use a &lt;code&gt;Queue&amp;lt;T&amp;gt;&lt;/code&gt; for &lt;code&gt;arrivals&lt;/code&gt; because of the way that Scan works.  At any point in the queue there could do a potential match so each item would have to be dequeued and processed separately, an indexed &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; type is the best fit for this situation.&lt;/p&gt;

&lt;h3 id=&#34;scanarrivals-scanarrivalsunsafe&#34;&gt;scanArrivals / scanArrivalsUnsafe&lt;/h3&gt;

&lt;p&gt;Lets look at the &lt;code&gt;scanArrivals&lt;/code&gt; function, it&amp;rsquo;s just a lock construct around the &lt;code&gt;scanArrivals&lt;/code&gt; function.  This leads to an important point, the scan function is operating under a lock, which effectively means that end user code is also executed under the lock and if you hold onto the lock for any length of time then there will be significant blocking of the normal receive mechanism due to it also using the same lock when receiving.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member x.scanArrivalsUnsafe(f) =
    if arrivals.Count = 0 then None
    else let msg = arrivals.Dequeue()
         match f msg with
         | None -&amp;gt;
             x.inbox.Add(msg);
             x.scanArrivalsUnsafe(f)
         | res -&amp;gt; res
 
// Lock the arrivals queue while we scan that
member x.scanArrivals(f) = lock syncRoot (fun () -&amp;gt; x.scanArrivalsUnsafe(f))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we pause for a second and review the &lt;code&gt;MailBoxProcessor&lt;/code&gt; documentation on &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ee353583.aspx&#34; title=&#34;MSDN: F# MailbocProcessor&#34;&gt;MSDN&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For each agent, at most one concurrent reader may be active, so no more than one concurrent call to Receive, TryReceive, Scan or TryScan may be active.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Obeying this rule should ensure that no deadlock situations will arise but lock contentions can still arise as messages will still be being posted to the mailbox, which will in turn attempt to acquire the same &lt;code&gt;syncRoot&lt;/code&gt; lock.&lt;/p&gt;

&lt;p&gt;Lets move onto the next function, I have saved this one for last as its the most interesting.&lt;/p&gt;

&lt;h3 id=&#34;scaninbox&#34;&gt;scanInbox&lt;/h3&gt;

&lt;p&gt;A quick glance at &lt;code&gt;scanInbox&lt;/code&gt; reveals another function which, to my eye, could have heavy-weight performance implications.   The &lt;code&gt;inbox&lt;/code&gt; is a &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; type, and the &lt;code&gt;RemoveAt&lt;/code&gt; function does an internal &lt;code&gt;Array.Copy&lt;/code&gt; for each removal.  This is an O(n) operation where n is (Count - index), so as soon as the list gets to a reasonable size then this then is going to really start chewing into your processing time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member x.scanInbox(f,n) =
    match inboxStore with
    | null -&amp;gt; None
    | inbox -&amp;gt;
        if n &amp;gt;= inbox.Count
        then None
        else
            let msg = inbox.[n]
            match f msg with
            | None -&amp;gt; x.scanInbox (f,n+1)
            | res -&amp;gt; inbox.RemoveAt(n); res
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to check this theory lets do some quick profiling of the console test that we showed earlier:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://lh5.googleusercontent.com/-HRwdmElTHzk/UACUh2a0mmI/AAAAAAAABb0/X-PXjabROOU/s658/profile_run.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This screen shot was taken using &lt;a href=&#34;http://www.jetbrains.com/profiler/&#34; title=&#34;Jet Brains Performance Profiling&#34;&gt;Jet Brains DotTrace 5.1&lt;/a&gt;.  This is one of my favourite performance profilers because it captures results to line level and maps back to the F# source code relatively easily.&lt;/p&gt;

&lt;p&gt;Yeah there it is, a whopping 44.41% of the time is spent in &lt;code&gt;RemoveAt&lt;/code&gt;.  Also notice that there were 200,000 calls which mirrors the number we placed in the queue before using the Lock/Unlock message types.&lt;/p&gt;

&lt;p&gt;One of the things that really stands out for me is that the &lt;code&gt;inbox&lt;/code&gt; is a simple list and completely unbounded.  In a high throughput situation where the scan function is being used it&amp;rsquo;s perfectly feasible to get into a runaway memory or CPU condition where the unmatched messages are sitting in the &lt;code&gt;inbox&lt;/code&gt; taking longer and longer to processes due to the O(n) operation that takes place in the &lt;code&gt;RemoveAt&lt;/code&gt; function.  Given a consistent throughput then eventually you are going to either run out memory, or the processing time will make throughput drop to dire levels which in turn will back up the &lt;code&gt;inbox&lt;/code&gt; even further, effectively this is a death spiral.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So what conclusion can we draw from all of this?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Firstly be careful with usage of &lt;code&gt;Scan&lt;/code&gt; and &lt;code&gt;TryScan&lt;/code&gt;, in certain situations the internal queue could back up to a certain size where you will be constantly struggling against the O(n) operation cost.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Agents are not a silver bullet solution. They cannot solve every problem.  Although it&amp;rsquo;s possible to use agent based techniques to solve various problems like blocking collections and such like, you have to use care and diligence in the solution to avoid introducing another problems into the mix.  I have seen several implementations that I have been able to break relatively easily.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Do I still use agents?  &lt;strong&gt;Absolutely!&lt;/strong&gt;  Agents are a fabulous tool to have in our toolbox and some extremely elegant solution exist to solve very complex problems.&lt;/li&gt;
&lt;li&gt;Do I use &lt;code&gt;Scan&lt;/code&gt; or &lt;code&gt;TryScan&lt;/code&gt;?  Not in its current form in the &lt;code&gt;MailboxProcessor&lt;/code&gt;.  I chose to implement a destructive scan in my &lt;a href=&#34;http://7sharpnine.com/2012/02/20/2012-02-19-fsharp-dataflow-agents-iii/&#34; title=&#34;FSharp Dataflow agents - Part 3&#34;&gt;TDF agent&lt;/a&gt; for the reasons discussed here.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we finish, I&amp;rsquo;d like to briefly cover &lt;code&gt;TryScan&lt;/code&gt; from my &lt;a href=&#34;http://msdn.microsoft.com/en-us/devlabs/gg585582.aspx&#34; title=&#34;TPL Dataflow&#34;&gt;TDF&lt;/a&gt; based agent to complete the picture.&lt;/p&gt;

&lt;h3 id=&#34;destructive-tryscan&#34;&gt;Destructive TryScan&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member x.TryScan((scanner: &#39;Msg -&amp;gt; Async&amp;lt;_&amp;gt; option), timeout): Async&amp;lt;_ option&amp;gt; =
    let ts = TimeSpan.FromMilliseconds(float timeout)
    let rec loopForMsg = async {
        let! msg = Async.AwaitTask &amp;lt;| incomingMessages.ReceiveAsync(ts)
                                      .ContinueWith(fun (tt:Task&amp;lt;_&amp;gt;) -&amp;gt;
                                          if tt.IsCanceled || tt.IsFaulted then None
                                          else Some tt.Result)
        match msg with
        | Some m -&amp;gt;  let res = scanner m
                     match res with
                     | None -&amp;gt; return! loopForMsg
                     | Some res -&amp;gt; return! res
        | None -&amp;gt; return None}
    loopForMsg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A message is dequeued on the line 4 with &lt;code&gt;let! msg = Async.AwaitTask ...&lt;/code&gt;.  This is then processed by the pattern matching expression on line 9 &lt;code&gt;| Some m -&amp;gt;  let res = scanner m&lt;/code&gt;.  If the result of the scanner function results in &lt;code&gt;None&lt;/code&gt; being returned then the message is discarded and the next operation continues with another call to &lt;code&gt;loopForMsg&lt;/code&gt;, otherwise the message is returned with &lt;code&gt;| Some res -&amp;gt; return! res&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One of the areas where I have a lot of experience is using pipelined operations based on input from network I/O.  One of the things that always causes a problem is unbounded situations such as having a queue with no absolute limit.  There comes a time when you have to protect yourself from what is effective a denial of service, you have to either destructively terminate messages or connections or route the overflowed data for processing later.&lt;/p&gt;

&lt;p&gt;Until next time&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FSharp Dataflow agents III</title>
      <link>http://7sharpnine.com/2012/02/20/2012-02-19-fsharp-dataflow-agents-iii/</link>
      <pubDate>Mon, 20 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2012/02/20/2012-02-19-fsharp-dataflow-agents-iii/</guid>
      <description>

&lt;p&gt;This will be the last post on rebuilding the &lt;code&gt;MailboxProcessor&lt;/code&gt; using &lt;a href=&#34;http://msdn.microsoft.com/en-us/devlabs/gg585582&#34;&gt;TDF&lt;/a&gt;,
here&amp;rsquo;s a quick discussion of the missing pieces&amp;hellip;&lt;/p&gt;

&lt;p&gt;First, lets start with the simple ones, these don&amp;rsquo;t really require much discussion.&lt;/p&gt;

&lt;h3 id=&#34;defaulttimeout&#34;&gt;DefaultTimeout&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let mutable defaultTimeout = Timeout.Infinite

member x.DefaultTimeout
   with get() = defaultTimeout
   and set(value) = defaultTimeout &amp;lt;- value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This simply provides a mutable property using &lt;code&gt;Timeout.Infinite&lt;/code&gt; as a default setting.&lt;/p&gt;

&lt;h3 id=&#34;currentqueuelength&#34;&gt;CurrentQueueLength&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member x.CurrentQueueLength() = incomingMessages.Count 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another simple one, this methods uses into the underlying &lt;code&gt;BufferBlock&lt;/code&gt; to extract its current queue length using its &lt;code&gt;Count&lt;/code&gt; property.&lt;/p&gt;

&lt;h3 id=&#34;tryreceive&#34;&gt;TryReceive&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member x.TryReceive(?timeout) = 
    let ts = TimeSpan.FromMilliseconds(float &amp;lt;| defaultArg time out defaultTimeout)
    Async.AwaitTask &amp;lt;| incomingMessages.ReceiveAsync(ts)
                           .ContinueWith(fun (tt:Task&amp;lt;_&amp;gt;) -&amp;gt; 
                                             if tt.IsCanceled || tt.IsFaulted then None
                                             else Some tt.Result)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we get a little help from &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/dd460717.aspx&#34;&gt;TPL&lt;/a&gt; to apply a continuation on completion
using &lt;code&gt;ContinueWith&lt;/code&gt;.  We use a lambda to return either &lt;code&gt;None&lt;/code&gt;, in a time out condition, or &lt;code&gt;Some tt.Result&lt;/code&gt; when we successfully receive an item.&lt;/p&gt;

&lt;h3 id=&#34;trypostandreply&#34;&gt;TryPostAndReply&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type AsyncResultCell&amp;lt;&#39;a&amp;gt;() = 
    ...
	member x.TryWaitResultSynchronously(timeout:int) = 
	    //early completion check
	    if source.Task.IsCompleted then 
	        Some source.Task.Result
	    //now force a wait for the task to complete
	    else 
	        if source.Task.Wait(timeout) then 
	            Some source.Task.Result
	        else None

member x.TryPostAndReply(replyChannelMsg, ?timeout) :&#39;Reply option = 
    let timeout = defaultArg timeout defaultTimeout
    let resultCell = AsyncResultCell&amp;lt;_&amp;gt;()
    let msg = replyChannelMsg(new AsyncReplyChannel&amp;lt;_&amp;gt;(fun reply -&amp;gt; resultCell.RegisterResult(reply)))
    if incomingMessages.Post(msg) then
        resultCell.TryWaitResultSynchronously(timeout)
    else None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Things get a little more interesting from here on in.  Firstly we need to add a new synchronisation member to the &lt;code&gt;AsyncResultCell&amp;lt;&#39;a&amp;gt;&lt;/code&gt; type: &lt;code&gt;TryWaitResultSynchronously&lt;/code&gt;.   We again enlist the help of the TPL primitives to check for the early completion using &lt;code&gt;source.Task.IsCompleted&lt;/code&gt; returning the result if it is there, otherwise we use the &lt;code&gt;Task&lt;/code&gt; property&amp;rsquo;s &lt;code&gt;Wait&lt;/code&gt; method to check the item returns within the time out interval.  In the usual manner, &lt;code&gt;Some source.Task.Result&lt;/code&gt; is returned or &lt;code&gt;None&lt;/code&gt; for a failure.&lt;/p&gt;

&lt;h3 id=&#34;postandreply&#34;&gt;PostAndReply&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member x.PostAndReply(replyChannelMsg, ?timeout) : &#39;Reply = 
    match x.TryPostAndReply(replyChannelMsg, ?timeout = timeout) with
    | None -&amp;gt;  raise (TimeoutException(&amp;quot;PostAndReply timed out&amp;quot;))
    | Some result -&amp;gt; result
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one wraps a call to &lt;code&gt;TryPostAndReply&lt;/code&gt; with some pattern matching.  In the event of a time out &lt;code&gt;None&lt;/code&gt; is returned from &lt;code&gt;TryPostAndReply&lt;/code&gt; in this instance we raise a &lt;code&gt;TimeoutException&lt;/code&gt; otherwise we unwrap the result from the option using &lt;code&gt;| Some result -&amp;gt; result&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;tryscan&#34;&gt;TryScan&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member x.TryScan((scanner: &#39;Msg -&amp;gt; Async&amp;lt;_&amp;gt; option), timeout): Async&amp;lt;_ option&amp;gt; = 
    let ts = TimeSpan.FromMilliseconds( float timeout)
    let rec loopForMsg = async {
        let! msg = Async.AwaitTask &amp;lt;| incomingMessages.ReceiveAsync(ts)
                                      .ContinueWith(fun (tt:Task&amp;lt;_&amp;gt;) -&amp;gt; 
                                          if tt.IsCanceled || tt.IsFaulted then None
                                          else Some tt.Result)
        match msg with
        | Some m -&amp;gt;  let res = scanner m
                     match res with
                     | None -&amp;gt; return! loopForMsg
                     | Some res -&amp;gt; return! res 
        | None -&amp;gt; return None}                             
    loopForMsg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one also uses the same &lt;code&gt;ContinueWith&lt;/code&gt; functionality in the recursive &lt;code&gt;loopForMsg&lt;/code&gt; function, perhaps some
of these functions could extracted out and refactored but I prefer to keep the code like this to better explain what&amp;rsquo;s going
on.  The the code is available on GitHub anyway so feel free to clean up any detritus and send me a pull request.  Again we use pattern matching to keep calling the &lt;code&gt;loopForMsg&lt;/code&gt; function until the result is returned or a time out occurs.&lt;/p&gt;

&lt;h3 id=&#34;scan&#34;&gt;Scan&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member x.Scan(scanner, timeout) =
    async { let! res = x.TryScan(scanner, timeout)
            match res with
            | None -&amp;gt; return raise(TimeoutException(&amp;quot;Scan TimedOut&amp;quot;))
            | Some res -&amp;gt; return res }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally we have Scan, this is much like PostAndReply in that it just acts as a wrapper around &lt;code&gt;TryScan&lt;/code&gt; making use of
pattern matching throwing an exception on a time out.&lt;/p&gt;

&lt;p&gt;That sums up the last few pieces, completing the TDF implementation of the &lt;code&gt;MailboxProcessor&lt;/code&gt;.  I think this series of posts has shown the elegance of F#&amp;rsquo;s asynchronous workflows.  The use of recursive functions and the compositional nature of asynchronous workflows really helps when you are doing this type of programming.  It&amp;rsquo;s also very nice on the eye, each section being clearly defined.&lt;/p&gt;

&lt;p&gt;The more astute of you may have noticed something a little different.  &lt;code&gt;Scan&lt;/code&gt; and &lt;code&gt;TryScan&lt;/code&gt; are destructive in this implementation, the unmatched messages are purged from the internal queue.  Although I could have mirrored the same functionality of the &lt;code&gt;MailboxProcessor&lt;/code&gt; by using an internal list to keep track of unmatched messages, this leads to performing checks during &lt;code&gt;Receive&lt;/code&gt; and &lt;code&gt;Scan&lt;/code&gt; and their derivatives to make sure that this list is used first when switching from &lt;code&gt;Scan&lt;/code&gt; and &lt;code&gt;Receive&lt;/code&gt; functionality.&lt;/p&gt;

&lt;p&gt;I think the separation of concerns are a little fuzzy in the &lt;code&gt;MailboxProcessor&lt;/code&gt;.  The &lt;code&gt;scan&lt;/code&gt; function seems like an after thought, even if you don&amp;rsquo;t use &lt;code&gt;Scan&lt;/code&gt; you still pay a price for it as there are numerous checks between the internal queue and the unmatched messages list.  You can also run into issues while using &lt;code&gt;Scan&lt;/code&gt; and &lt;code&gt;TryScan&lt;/code&gt; that can result in out of memory conditions due to the inherent unbounded nature.  I will briefly describe and explore the conditions that can lead to that in the next post.  In the implementation presented here we can get bounded checking by passing in an optional &lt;code&gt;DataflowBlockOptions&lt;/code&gt; and setting a value for the &lt;code&gt;BoundedCapacity&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; The code for this series of articles is now available on GitHub: &lt;a href=&#34;https://github.com/7sharp9/FSharpDataflow&#34;&gt;FSharpDataflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Until next time&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>F# Dataflow Agents Part II</title>
      <link>http://7sharpnine.com/2012/01/30/2012-01-24-fsharp-dataflow-agents-ii/</link>
      <pubDate>Mon, 30 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2012/01/30/2012-01-24-fsharp-dataflow-agents-ii/</guid>
      <description>

&lt;p&gt;Right, no messing about this time, straight to the code.&lt;/p&gt;

&lt;h2 id=&#34;construction&#34;&gt;Construction&lt;/h2&gt;

&lt;p&gt;This is pretty straight forward and I don&amp;rsquo;t want to detract from the important bits of this post, the only thing
of note is the &lt;code&gt;cancellationToken&lt;/code&gt; which is initialized to a default value using the &lt;code&gt;defaultArg&lt;/code&gt; function if the
optional parameter  &lt;code&gt;cancellationToken&lt;/code&gt; is not supplied. The TDF construct that we to use to perform most of the hard
work is &lt;code&gt;incomingMessages&lt;/code&gt; which is a &lt;code&gt;BufferBlock&amp;lt;&#39;Msg&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type DataflowAgent&amp;lt;&#39;Msg&amp;gt;(initial, ?cancellationToken) =
    let cancellationToken = 
        defaultArg cancellationToken Async.DefaultCancellationToken
    let mutable started = false
    let errorEvent = new Event&amp;lt;System.Exception&amp;gt;()
    let incomingMessages = new BufferBlock&amp;lt;&#39;Msg&amp;gt;()
    let mutable defaultTimeout = Timeout.Infinite
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;error&#34;&gt;Error&lt;/h2&gt;

&lt;p&gt;This is the public facing part for the Error event.  The &lt;code&gt;[&amp;lt;CLIEvent&amp;gt;]&lt;/code&gt; attribute exposes the event in a friendly manner to other .Net languages by adding the &lt;code&gt;add_Error&lt;/code&gt; and &lt;code&gt;remove_Error&lt;/code&gt; event handler properties to allow subscription to take place.  The &lt;code&gt;Error&lt;/code&gt; event fires when an exception is thrown in the &lt;code&gt;initial&lt;/code&gt; asynchronous workflow.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;[&amp;lt;CLIEvent&amp;gt;]
member this.Error = errorEvent.Publish
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;start&#34;&gt;Start&lt;/h2&gt;

&lt;p&gt;This is implemented the same as the MailboxProcessor.  An exception is thrown if the agent has already started as this is not valid operation.  We set the mutable field &lt;code&gt;started&lt;/code&gt; to true and proceed to start the &lt;code&gt;initial&lt;/code&gt; asynchronous workflow.  This workflow is wrapped in a &lt;code&gt;try with block&lt;/code&gt; so that if an exception is thrown we catch it and trigger the &lt;code&gt;Error&lt;/code&gt; event.  The computation is then started with &lt;code&gt;Async.Start(...)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member this.Start() =
    if started 
        then raise (new InvalidOperationException(&amp;quot;Already Started.&amp;quot;))
    else
        started &amp;lt;- true
        let comp = async { try do! initial this 
                           with error -&amp;gt; errorEvent.Trigger error }
        Async.Start(computation = comp, cancellationToken = cancellationToken)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;receive&#34;&gt;Receive&lt;/h2&gt;

&lt;p&gt;The Receive member is used by the agent as a way of waiting for a message to arrive without blocking.  Because the TDF functionality is all TPL Task based we use the the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ee370232.aspx&#34;&gt;Async&lt;/a&gt; helper functions.  In this instance we utilise the Async.AwaitTask passing in the &lt;code&gt;incomingMessages&lt;/code&gt; &lt;code&gt;ReceiveAsync&lt;/code&gt; method to wait for
a message to arrive.  The integration between F# async and TDF is nice and succinct here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member this.Receive(?timeout) = 
    Async.AwaitTask &amp;lt;| incomingMessages.ReceiveAsync()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;post&#34;&gt;Post&lt;/h2&gt;

&lt;p&gt;The Post member allows a message to be sent to the agents, this member simply calls the &lt;code&gt;incomingMessages&lt;/code&gt; &lt;code&gt;Post&lt;/code&gt; method passing in the &lt;code&gt;item&lt;/code&gt;.  We raise an exception if there is a problem posting (i.e. the &lt;code&gt;incomingMessages&lt;/code&gt; internal queue is full).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member this.Post(item) = 
    let posted = incomingMessages.Post(item)
    if not posted then
        raise (InvalidOperationException(&amp;quot;Incoming message buffer full.&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;postandtryasyncreply-postandasyncreply&#34;&gt;PostAndTryAsyncReply / PostAndAsyncReply&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m grouping both of these together as they are related in functionality.  In the previous post I purposely left
out some ancillary code as it added unnecessary complexity to the introduction.  There are a two types we need to be able to replicate the &lt;code&gt;PostAndTryAsyncReply&lt;/code&gt; and &lt;code&gt;PostAndAsyncReply&lt;/code&gt; members of the &lt;code&gt;MailboxProcessor&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;asyncreplychannel&#34;&gt;AsyncReplyChannel&lt;/h3&gt;

&lt;p&gt;The first type we need is the &lt;code&gt;AsyncReplyChannel&amp;lt;&#39;Reply&amp;gt;&lt;/code&gt;.  This type takes a function that accepts a generic &lt;code&gt;&#39;Reply&lt;/code&gt; and returns a unit.  It is used as a way of communicating back to the caller of the &lt;code&gt;PostAndTryAsyncReply&lt;/code&gt; and &lt;code&gt;PostAndAsyncReply&lt;/code&gt; members via its single member &lt;code&gt;Reply&lt;/code&gt;.  This should become a little clearer when we see it used in context.&lt;/p&gt;

&lt;p&gt;An &lt;code&gt;AsyncRepyChannel&lt;/code&gt; does actually exist in F# under the Microsoft.FSharp.Control namespace and is used my the &lt;code&gt;MailboxPRocessor&lt;/code&gt;, unfortunately its constructor is marked as internal so we are not able to reuse it here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type AsyncReplyChannel&amp;lt;&#39;Reply&amp;gt;(replyf : &#39;Reply -&amp;gt; unit) =
    member x.Reply(reply) = replyf(reply)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;asyncresultcell&#34;&gt;AsyncResultCell&lt;/h3&gt;

&lt;p&gt;The next type we need is the &lt;code&gt;AsyncResultCell&amp;lt;&#39;a&amp;gt;&lt;/code&gt;.  We use this as a way to await for the results of an asynchronous operation.  We create a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/dd449174.aspx&#34;&gt;TaskCompletionSource&lt;/a&gt; (&lt;code&gt;source&lt;/code&gt;), which is a TPL type that we use as a way of signalling to a callback / lambda expression when a message has arrived.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RegisterResult&lt;/strong&gt; is used as a way of notifying when a message has been arrived, this is used internally by our agent as a result of a reply being made to the AsyncReplyChannel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AsyncWaitResult&lt;/strong&gt; is a continuation wrapper, it is called when we want to wait indefinitely for the result to be returned.  It wraps a successful completion with a call to task.Result which then returns the result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GetWaitHandle&lt;/strong&gt; is used as a mechanism to force the asynchronous result to return within a specified timeout interval.  If a result is not returned within the timeout then this function will return false.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GrabResult&lt;/strong&gt; returns the result from the TaskCompletionSource object &lt;code&gt;source&lt;/code&gt;.  This is set earlier by the &lt;code&gt;RegisterResult&lt;/code&gt; member.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type AsyncResultCell&amp;lt;&#39;a&amp;gt;() =
    let source = new TaskCompletionSource&amp;lt;&#39;a&amp;gt;()
    member x.RegisterResult result = source.SetResult(result)

    member x.AsyncWaitResult =
        Async.FromContinuations(fun (cont,_,_) -&amp;gt; 
            let apply = fun (task:Task&amp;lt;_&amp;gt;) -&amp;gt; cont (task.Result)
            source.Task.ContinueWith(apply) |&amp;gt; ignore)

    member x.GetWaitHandle(timeout:int) =
        async { let waithandle = source.Task.Wait(timeout)
                return waithandle }
                
    member x.GrabResult() = source.Task.Result
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;postandtryasyncreply&#34;&gt;PostAndTryAsyncReply&lt;/h4&gt;

&lt;p&gt;This one is a little more tricky and I have added a few line number references to try and make it easier.  On &lt;strong&gt;line 3&lt;/strong&gt; we
declare an resultCell to collect the result of the asynchronous operation.  This is used on &lt;strong&gt;line 4&lt;/strong&gt; when we create a &lt;code&gt;msg&lt;/code&gt;
to post to &lt;code&gt;incomingMessages&lt;/code&gt; on &lt;strong&gt;line 5&lt;/strong&gt;.  The &lt;code&gt;replyChannelMsg&lt;/code&gt; is a function that takes an &lt;code&gt;AsyncReplyChannel&lt;/code&gt; and returns
a message, so we create an &lt;code&gt;AsyncReplyChannel&lt;/code&gt; with a lambda expression that registers the reply with the &lt;code&gt;resultCell&lt;/code&gt;.  This
is the key to how this works, you have to remember that will be done the other side of the operation which will be within the
asynchronous processing loop of the agent when &lt;code&gt;Reply&lt;/code&gt; is called on the &lt;code&gt;AsyncReplyChannel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally pattern matching is used on &lt;strong&gt;line 7&lt;/strong&gt; to call either &lt;code&gt;AsyncWaitResult&lt;/code&gt; or &lt;code&gt;GetWaitHandle&lt;/code&gt; on the &lt;code&gt;resultCell&lt;/code&gt;.  The &lt;code&gt;AsyncWaitResult&lt;/code&gt; function is used to wait indefinitely and the &lt;code&gt;GetWaitHandle&lt;/code&gt; function is used if we want to use a timeout.  Both of these are asynchronous workflows that either return a result or return an option type containing the result.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member this.PostAndTryAsyncReply(replyChannelMsg, ?timeout) = 
    let timeout = defaultArg timeout defaultTimeout
    let resultCell = AsyncResultCell&amp;lt;_&amp;gt;()
    let msg = replyChannelMsg(AsyncReplyChannel&amp;lt;_&amp;gt;(fun reply -&amp;gt; resultCell.RegisterResult(reply)))
    let posted = incomingMessages.Post(msg)
    if posted then
        match timeout with
        |   Threading.Timeout.Infinite -&amp;gt; 
                async { let! result = resultCell.AsyncWaitResult
                        return Some(result) }  
        |   _ -&amp;gt;
                async { let! ok =  resultCell.GetWaitHandle(timeout)
                        let res = (if ok then Some(resultCell.GrabResult()) else None)
                        return res }
    else async{return None}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;postandasyncreply&#34;&gt;PostAndAsyncReply&lt;/h4&gt;

&lt;p&gt;This member uses the same functionality as &lt;code&gt;PostAndTryAsyncReply&lt;/code&gt;, creating a message using the &lt;code&gt;AsyncReplyChannel&lt;/code&gt;.  The main
difference is that an asynchronous workflow is created that wraps a call to &lt;code&gt;PostAndTryAsyncReply&lt;/code&gt; if the &lt;code&gt;timeout&lt;/code&gt; is specified.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;member this.PostAndAsyncReply( replyChannelMsg, ?timeout) =
    let timeout = defaultArg timeout defaultTimeout
    match timeout with
    |   Threading.Timeout.Infinite -&amp;gt; 
        let resCell = AsyncResultCell&amp;lt;_&amp;gt;()
        let msg = replyChannelMsg (AsyncReplyChannel&amp;lt;_&amp;gt;(fun reply -&amp;gt; resCell.RegisterResult(reply) ))
        let posted = incomingMessages.Post(msg)
        if posted then
            resCell.AsyncWaitResult
        else
            raise (InvalidOperationException(&amp;quot;Incoming message buffer full.&amp;quot;))
    |   _ -&amp;gt;
        let asyncReply = this.PostAndTryAsyncReply(replyChannelMsg, timeout=timeout) 
        async { let! res = asyncReply
                match res with 
                | None -&amp;gt;  return! raise (TimeoutException(&amp;quot;PostAndAsyncReply TimedOut&amp;quot;))
                | Some res -&amp;gt; return res }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;static-start&#34;&gt;Static Start&lt;/h2&gt;

&lt;p&gt;The static Start function is used as a way to construct and start the agent than using the constructor and then calling the Start function.  This is really just a simple short cut for this common use case.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;static member Start(initial, ?cancellationToken) =
    let dfa = DataflowAgent&amp;lt;&#39;Msg&amp;gt;(initial, ?cancellationToken = cancellationToken)
    dfa.Start()
    dfa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Until next time&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>F# Dataflow Agents Part I</title>
      <link>http://7sharpnine.com/2012/01/22/2012-01-22-fsharp-dataflow-agents-i/</link>
      <pubDate>Sun, 22 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2012/01/22/2012-01-22-fsharp-dataflow-agents-i/</guid>
      <description>

&lt;p&gt;This is going to be a new series on using TPL Dataflow with F#.  First a little bit of history and background.&lt;/p&gt;

&lt;h2 id=&#34;tpl-dataflows-heritage-and-background&#34;&gt;TPL Dataflows heritage and background&lt;/h2&gt;

&lt;p&gt;TPL Dataflow or &lt;a href=&#34;http://msdn.microsoft.com/en-us/devlabs/gg585582&#34;&gt;(TDF)&lt;/a&gt; has been around for quite a
while, it first surfaced more than a year ago as the successor to the Concurrency and Coordination Runtime
&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb648752.aspx&#34;&gt;(CCR)&lt;/a&gt; and with coming release of .Net 4.5 it will
be part of the &lt;code&gt;System.Threading.Tasks.Dataflow&lt;/code&gt; namespace.  Elements of the now halted project
&lt;a href=&#34;http://msdn.microsoft.com/en-us/devlabs/dd795202&#34;&gt;Axum&lt;/a&gt; are also present within the design of TDF.&lt;/p&gt;

&lt;h3 id=&#34;concurrency-and-coordination-runtime-ccr&#34;&gt;Concurrency and Coordination Runtime (CCR)&lt;/h3&gt;

&lt;p&gt;CCR is a library that deals with asynchrony, concurrency, and coordination between blocks of asynchronous
code so that the programmer doesn&amp;rsquo;t have to.  All of the low level details of synchronization and error
propagation are taken care of in a consistent fashion.  CCR is still is included in
&lt;a href=&#34;ttp://www.microsoft.com/robotics/&#34;&gt;Microsoft Robotics Studio&lt;/a&gt; where it is used extensively to exploit
parallel hardware and deal with partial failure of systems.&lt;/p&gt;

&lt;h3 id=&#34;axum&#34;&gt;Axum&lt;/h3&gt;

&lt;p&gt;Axum was another interesting Microsoft research project, it also utilized the actor model embracing the
principles of isolation, and message-passing.  There was also extensive use  symbolic operators as a terse
short hand way to indicate operations between actors.  For example &lt;code&gt;&amp;lt;--&lt;/code&gt; defined a way to pass a message
to an actor. Theres was also a similarity to CCR as Axum used the concepts of Ports and channels in a similar
way.  It was a very interesting project and it was a shame it was put on hold.&lt;/p&gt;

&lt;h3 id=&#34;tpl-dataflow-tdf&#34;&gt;TPL Dataflow (TDF)&lt;/h3&gt;

&lt;p&gt;TDF builds on CCR and Axum, consolidating and refine to produce a more friendly fluent interface, much in
the same vain as Language-Integrated Query &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb308959.aspx&#34;&gt;(LINQ)&lt;/a&gt;
and Reactive Extensions &lt;a href=&#34;http://msdn.microsoft.com/en-us/data/gg577609&#34;&gt;(RX)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;TDF is built around a number of different blocks which can be combined or linked together.  There are three
different categories of blocks are as follows:&lt;/p&gt;

&lt;h4 id=&#34;buffering-blocks&#34;&gt;Buffering Blocks&lt;/h4&gt;

&lt;p&gt;Buffering blocks simply buffer data in various ways before passing the data on to another block.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BufferBlock&amp;lt;&amp;rsquo;T&amp;gt;&lt;/strong&gt;  - The BufferBlock act as a first-in-first-out (FIFO) queue, buffering each input.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BroadcastBlock&amp;lt;&amp;rsquo;T&amp;gt;&lt;/strong&gt; - The BroadcastBlock linking to multiple targets copying the data to each of the
connected blocks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WriteOnceBlock&amp;lt;&amp;rsquo;T&amp;gt;&lt;/strong&gt; - The WriteOnceBlock acts like an immutable target, after an item first item
is passed to it, it effectively becomes read only.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;executor-blocks&#34;&gt;Executor Blocks&lt;/h4&gt;

&lt;p&gt;The executor blocks run user supplied code in the form of a lambda expressions or a &lt;code&gt;Task&amp;lt;&#39;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ActionBlock&amp;lt;&amp;lsquo;TInput&amp;gt;&lt;/strong&gt; - The ActionBlock acts like the &lt;code&gt;Action&amp;lt;&#39;T&amp;gt;&lt;/code&gt; delegate performing an action
on each datum posted to it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TransformBlock&amp;lt;&amp;lsquo;TInput,&amp;lsquo;TOutput&amp;gt;&lt;/strong&gt; - The TransformBlock acts just like the ActionBlock except
that the action performed can have an output, this output is buffered and behaves just like a BufferBlock.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TransformManyBlock&amp;lt;&amp;lsquo;TInput,&amp;lsquo;TOutput&amp;gt;&lt;/strong&gt; - The TransformManyBlock is just like a TransformBlock except
that is can produce more than one output for a given datum.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;joining-blocks&#34;&gt;Joining Blocks&lt;/h4&gt;

&lt;p&gt;The Joining Blocks Combining or join data together in different ways.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BatchBlock&amp;lt;&amp;rsquo;T&amp;gt;&lt;/strong&gt; - The BatchBlock Combines multiple single items together, the items are
represented by arrays of elements.  The items are grouped together is batches and then passed on to
another block.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JoinBlock&amp;lt;&amp;lsquo;T1,&amp;lsquo;T2,…&amp;gt;&lt;/strong&gt; - The JoinBlock acts as a form of &lt;code&gt;Enumerable.Zip&amp;lt;&#39;T1,&#39;T2,&#39;TResult&amp;gt;&lt;/code&gt;
except the zip operation is performed on the items in the source array.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BatchedJoinBlock&amp;lt;&amp;lsquo;T1,&amp;lsquo;T2,…&amp;gt;&lt;/strong&gt; This block as the name suggests simply aggregates the JoinBlock and
the BatchBlock together.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thats an ultra high level tour thats only just scratches the surface.  I recommend you check out the
&lt;a href=&#34;http://www.microsoft.com/download/en/details.aspx?id=14782&#34;&gt;Introduction to TPL Dataflow&lt;/a&gt; document to read
up on the details.  Theres a few more resources in the &lt;a href=&#34;http://msdn.microsoft.com/en-us/devlabs/gg585582&#34;&gt;DevLabs area&lt;/a&gt;
that you might find useful.  Hopefully this series should also shed a bit more light on TDF as we go along&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;f-asynchronous-workflows-and-agents&#34;&gt;F# Asynchronous Workflows and Agents&lt;/h3&gt;

&lt;p&gt;So where does that leave us in F#?&lt;br /&gt;
In F# we have &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/dd233250.aspx&#34;&gt;Asynchronous Workflows&lt;/a&gt; and
&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ee370357.aspx&#34;&gt;agents&lt;/a&gt; and they help immensely in the concurrency
and message passing, but that doest mean that we cant take advantage of the new features and refinements
much in the same way as we can use Asynchronous Workflows to take advantage of Tasks.&lt;/p&gt;

&lt;p&gt;This post is going to be centered around F# agents but with a twist.  First of all are going to be
reimplementing a MailboxProcessor using TDF for the underlying processing.  This will allow us to to use
all of our existing agent code and examples and also stay within the F# agent paradigm.  Following this
approach we could also make use of the &lt;code&gt;DataflowBlockOptions&lt;/code&gt; type, it has some interesting
properties which we will look at in future posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TaskScheduler&lt;/li&gt;
&lt;li&gt;CancellationToken&lt;/li&gt;
&lt;li&gt;MaxMessagesPerTask&lt;/li&gt;
&lt;li&gt;BoundedCapacity&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;In this post we are going replicate the MailboxProcessor, we will be using Tomas Petricek&amp;rsquo;s caching agent
example from &lt;a href=&#34;http://fssnip.net/8V&#34;&gt;FSSnip&lt;/a&gt;).  I have made a couple of modification to Tomas&amp;rsquo;s code.&lt;br /&gt;
I replaced the Dictionary type with a ConcurrentDictionary so that the caching agent could be called multiple
times successively without the dictionary throwing an exception due to it already containing a key from a
previous cached result.  I also changed the example code so that it requests cached HTML from the caching
agent ten times with a 400ms interval in between each.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module TplAgents
open System
open System.Collections.Generic
open System.Collections.Concurrent
open FsDataflow
open System.Net
open Microsoft.FSharp.Control.WebExtensions

type CachingMessage =
    | Add of string * string
    | Get of string * AsyncReplyChannel&amp;lt;option&amp;lt;string&amp;gt;&amp;gt;
    | Clear

let caching = DataflowAgent.Start(fun agent -&amp;gt; async {
   let table = ConcurrentDictionary&amp;lt;string, string&amp;gt;()
   while true do
      let! msg = agent.Receive()
      match msg with
      | Add(url, html) -&amp;gt; 
         // Add downloaded page to the cache
         table.AddOrUpdate(url, html, fun k v -&amp;gt; html) |&amp;gt; ignore
      | Get(url, repl) -&amp;gt; 
         // Get a page from the cache - returns 
         // None if the value isn&#39;t in the cache
         if table.ContainsKey(url) then
            repl.Reply(Some table.[url])
         else
            repl.Reply(None) 
      | Clear -&amp;gt; 
           table.Clear() })
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;/// Prints information about the specified web site using cache
let printInfo url = async {
   // Try to get the cached HTML from the caching agent
   let! htmlOpt = caching.PostAndAsyncReply(fun ch -&amp;gt; Get(url, ch))
   match htmlOpt with
   | None -&amp;gt;
       // New url - download it and add it to the cache
       use wc = new WebClient()
       let! text = wc.AsyncDownloadString(Uri(url))
       caching.Post(Add(url, text))   
       Console.WriteLine( sprintf &amp;quot;Download: %s (%d)&amp;quot; url text.Length)
   | Some html -&amp;gt;
       // The url was downloaded earlier 
       Console.WriteLine( sprintf &amp;quot;Cached: %s (%d)&amp;quot; url html.Length) }

let printfuncpro = printInfo &amp;quot;http://functional-programming.net&amp;quot;
// Print information about a web site -
// Run this repeatedly to use cached value
for i in 1 .. 10 do
   printfuncpro |&amp;gt; Async.Start
   Async.RunSynchronously &amp;lt;| Async.Sleep 400

// Clear the cache - &#39;printInfo&#39; will need to
// download data from the web site again
Console.WriteLine(sprintf &amp;quot;Clearing the cache&amp;quot;)
caching.Post(Clear)
printfuncpro |&amp;gt; Async.Start

Console.ReadKey() |&amp;gt; ignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looking at the implementation above you can see that we need to implement the following members:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start:&lt;code&gt;unit -&amp;gt; unit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Receive:&lt;code&gt;?int -&amp;gt; Async&amp;lt;&#39;Msg&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Post:&lt;code&gt;&#39;Msg -&amp;gt; unit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PostAndTryAsyncReply:&lt;code&gt;(AsyncReplyChannel&amp;lt;&#39;Reply&amp;gt; -&amp;gt; &#39;Msg) * ?int -&amp;gt; Async&amp;lt;&#39;Reply option&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PostAndAsyncReply:&lt;code&gt;(AsyncReplyChannel&amp;lt;&#39;Reply&amp;gt; -&amp;gt; &#39;Msg) * int option -&amp;gt; Async&amp;lt;&#39;Reply&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;static member Start:&lt;code&gt;(MailboxProcessor&amp;lt;&#39;Msg&amp;gt; -&amp;gt; Async&amp;lt;unit&amp;gt;) * ?CancellationToken -&amp;gt; MailboxProcessor&amp;lt;&#39;Msg&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the only members we need to complete the caching agent example, I didn&amp;rsquo;t want bamboozle everyone
with an explosion of code from the onset so the remaining members will be implemented as and when we need
them.  When we have implemented all the members from MailboxProcessor Ill post the full source on my
 &lt;a href=&#34;https://github.com/7sharp9&#34;&gt;GitHub&lt;/a&gt; account.&lt;/p&gt;

&lt;p&gt;The following members will be outstanding but it should be fairly trivial to implement them
 once we have completed the code here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PostAndReply:&lt;code&gt;(AsyncReplyChannel&amp;lt;&#39;Reply&amp;gt; -&amp;gt; &#39;Msg) * int option -&amp;gt; &#39;Reply&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Scan:&lt;code&gt;(&#39;Msg -&amp;gt; Async&amp;lt;&#39;T&amp;gt; option) * ?int -&amp;gt; Async&amp;lt;&#39;T&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;TryPostAndReply:&lt;code&gt;(AsyncReplyChannel&amp;lt;&#39;Reply&amp;gt; -&amp;gt; &#39;Msg) * ?int -&amp;gt; &#39;Reply option&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;TryReceive:&lt;code&gt;?int -&amp;gt; Async&amp;lt;&#39;Msg option&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;TryScan:&lt;code&gt;(&#39;Msg -&amp;gt; Async&amp;lt;&#39;T&amp;gt; option) * ?int -&amp;gt; Async&amp;lt;&#39;T option&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CurrentQueueLength:&lt;code&gt;int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;DefaultTimeout:&lt;code&gt;int with get, set&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So here we go, this is the Dataflow implementation of the MailboxProcessor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module FsDataflow
open System
open System.Threading
open System.Threading.Tasks
open System.Threading.Tasks.Dataflow
open System.Collections.Concurrent

type DataflowAgent&amp;lt;&#39;Msg&amp;gt;(initial, ?cancellationToken) =
    let cancellationToken = 
        defaultArg cancellationToken Async.DefaultCancellationToken
    let mutable started = false
    let errorEvent = new Event&amp;lt;System.Exception&amp;gt;()
    let incomingMessages = new BufferBlock&amp;lt;&#39;Msg&amp;gt;()
    let mutable defaultTimeout = Timeout.Infinite
    
    [&amp;lt;CLIEvent&amp;gt;]
    member this.Error = errorEvent.Publish

    member this.Start() =
        if started 
            then raise (new InvalidOperationException(&amp;quot;Already Started.&amp;quot;))
        else
            started &amp;lt;- true
            let comp = async { try do! initial this 
                               with error -&amp;gt; errorEvent.Trigger error }
            Async.Start(computation = comp, cancellationToken = cancellationToken)

    member this.Receive(?timeout) = 
        Async.AwaitTask &amp;lt;| incomingMessages.ReceiveAsync()

    member this.Post(item) = 
        let posted = incomingMessages.Post(item)
        if not posted then
            raise (InvalidOperationException(&amp;quot;Incoming message buffer full.&amp;quot;))

    member this.PostAndTryAsyncReply(replyChannelMsg, ?timeout) = 
        let timeout = defaultArg timeout defaultTimeout
        let resultCell = AsyncResultCell&amp;lt;_&amp;gt;()
        let msg = replyChannelMsg(AsyncReplyChannel&amp;lt;_&amp;gt;(fun reply -&amp;gt; resultCell.RegisterResult(reply)))
        let posted = incomingMessages.Post(msg)
        if posted then
            match timeout with
            |   Threading.Timeout.Infinite -&amp;gt; 
                    async { let! result = resultCell.AsyncWaitResult
                            return Some(result) }  
            |   _ -&amp;gt;
                    async { let! ok =  resultCell.GetWaitHandle(timeout)
                            let res = (if ok then Some(resultCell.GrabResult()) else None)
                            return res }
        else async{return None}

    member this.PostAndAsyncReply( replyChannelMsg, ?timeout) =                 
            let timeout = defaultArg timeout defaultTimeout
            match timeout with
            |   Threading.Timeout.Infinite -&amp;gt; 
                let resCell = AsyncResultCell&amp;lt;_&amp;gt;()
                let msg = replyChannelMsg (AsyncReplyChannel&amp;lt;_&amp;gt;(fun reply -&amp;gt; resCell.RegisterResult(reply) ))
                let posted = incomingMessages.Post(msg)
                if posted then
                    resCell.AsyncWaitResult  
                else
                    raise (InvalidOperationException(&amp;quot;Incoming message buffer full.&amp;quot;))
            |   _ -&amp;gt;            
                let asyncReply = this.PostAndTryAsyncReply(replyChannelMsg, timeout=timeout) 
                async { let! res = asyncReply
                        match res with 
                        | None -&amp;gt;  return! raise (TimeoutException(&amp;quot;PostAndAsyncReply TimedOut&amp;quot;))
                        | Some res -&amp;gt; return res }           
                    
    static member Start(initial, ?cancellationToken) =
        let dfa = DataflowAgent&amp;lt;&#39;Msg&amp;gt;(initial, ?cancellationToken = cancellationToken)
        dfa.Start()
        dfa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The crux of the implementation from TDF&amp;rsquo;s point of view is the use of the BufferBlock.&lt;br /&gt;
This is one of the most fundamental blocks within TDF.  Its the equivalent of the &lt;code&gt;Port&amp;lt;&#39;T&amp;gt;&lt;/code&gt;
type from CCR and the &lt;code&gt;Mailbox&lt;/code&gt; type from F# which is used internally within the
MailboxProcessor.  As mentioned abouve the BufferBlock type is a first-in-first-out (FIFO) buffer
and is responsible for buffering any data that is Posted to it.&lt;/p&gt;

&lt;p&gt;OK, I&amp;rsquo;m going to leave it at that for now while you digest the code presented here.&lt;/p&gt;

&lt;p&gt;In part II I will be drilling into the detail on whats going on internally and also describing more
of the TDF model, so tune in soon for Part II.&lt;/p&gt;

&lt;p&gt;Until next time&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Agent based scheduling</title>
      <link>http://7sharpnine.com/2011/07/03/2011-07-03-agent-based-scheduling/</link>
      <pubDate>Sun, 03 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2011/07/03/2011-07-03-agent-based-scheduling/</guid>
      <description>

&lt;p&gt;One of the areas that I am very interested in is agents and I have been doing
quite a lot of work in this area lately.&lt;/p&gt;

&lt;p&gt;Agents can be used for a multitude of different purposes ranging from:
isolated message passing, object caching, finite state machines, web crawling,
and even reactive user interfaces.  One of the ideas that I have been looking
into lately is agent based scheduling.&lt;!-- more --&gt;&lt;/p&gt;

&lt;h2 id=&#34;scheduleragent&#34;&gt;SchedulerAgent&lt;/h2&gt;

&lt;p&gt;A simple Agent based scheduler:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;    module AgentUtilities
    open System
    open System.Threading 
 
    //Agent alias for MailboxProcessor
    type Agent&amp;lt;&#39;T&amp;gt; = MailboxProcessor&amp;lt;&#39;T&amp;gt; 
 
    /// Two types of Schedule messages that can be sent
    type ScheduleMessage&amp;lt;&#39;a&amp;gt; =
      | Schedule of (&#39;a -&amp;gt; unit) * &#39;a * TimeSpan * TimeSpan * CancellationTokenSource AsyncReplyChannel
      | ScheduleOnce of (&#39;a -&amp;gt; unit) * &#39;a * TimeSpan * CancellationTokenSource AsyncReplyChannel
  
    /// An Agent based scheduler
    type SchedulerAgent&amp;lt;&#39;a&amp;gt;()=   
      let scheduleOnce delay msg receiver (cts: CancellationTokenSource)=
        async { do! Async.Sleep(delay)
            if (cts.IsCancellationRequested)
            then cts.Dispose()
            else msg |&amp;gt; receiver }  
      let scheduleMany initialDelay  msg receiver delayBetween cts=
        let rec loop time (cts: CancellationTokenSource) =
           async { do! Async.Sleep(time)
               if (cts.IsCancellationRequested)
               then cts.Dispose()
               else msg |&amp;gt; receiver
               return! loop delayBetween cts}
        loop initialDelay cts  
      let scheduler = Agent.Start(fun inbox -&amp;gt;
        let rec loop() = async {
          let! msg = inbox.Receive()
          let cs = new CancellationTokenSource()
          match msg with
          | Schedule(receiver, msg:&#39;a, initialDelay, delayBetween, replyChan) -&amp;gt;
            Async.StartImmediate(scheduleMany
                         (int initialDelay.TotalMilliseconds)
                         msg
                         receiver
                         (int delayBetween.TotalMilliseconds)
                         cs )
            replyChan.Reply(cs)
            return! loop()
          | ScheduleOnce(receiver, msg:&#39;a, delay, replyChan) -&amp;gt;
            Async.StartImmediate(scheduleOnce
                         (int delay.TotalMilliseconds)
                         msg
                         receiver
                         cs)
            replyChan.Reply(cs)
            return! loop()
        }
        loop())  
      ///Schedules a message to be sent to the receiver after the initialDelay.
      ///  If delaybetween is specified then the message is sent reoccuringly at the delaybetween interval.
      member this.Schedule(receiver, msg, initialDelay, ?delayBetween) =
        let buildMessage replyChan =
          match delayBetween with
          | Some(x) -&amp;gt; Schedule(receiver,msg,initialDelay, x, replyChan)
          | _ -&amp;gt; ScheduleOnce(receiver,msg,initialDelay, replyChan)
        scheduler.PostAndReply (fun replyChan -&amp;gt; replyChan |&amp;gt; buildMessage)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The structure of the SchedulerAgent broken down into sections below:&lt;/p&gt;

&lt;h3 id=&#34;schedulemessage&#34;&gt;ScheduleMessage&lt;/h3&gt;

&lt;p&gt;Lines &lt;strong&gt;9-11&lt;/strong&gt; (&lt;code&gt;type ScheduleMessage&amp;lt;&#39;a&amp;gt; =&lt;/code&gt;) show the definition of ScheduleMessage.  This is a discriminated
union of two different types of Schedule message.&lt;/p&gt;

&lt;h4 id=&#34;scheduleonce&#34;&gt;ScheduleOnce&lt;/h4&gt;

&lt;p&gt;ScheduleOnce has four parameters:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A function which is called at the schedule time (&amp;lsquo;a -&amp;gt; unit).&lt;/li&gt;
&lt;li&gt;The message that is sent at the schedules time (&amp;lsquo;a).&lt;/li&gt;
&lt;li&gt;A TimeSpan which is the length of time to wait before triggering the schedule.&lt;/li&gt;
&lt;li&gt;An AsyncReplyChannel&lt;CancellationTokenSource&gt;(CancellationTokenSource AsyncReplyChannel).  This is used to return a CancellationTokenSource which can be used to cancel the Schedule.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;schedule&#34;&gt;Schedule&lt;/h4&gt;

&lt;p&gt;Schedule has five parameters which are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A function which is called at the schedule time (&amp;lsquo;a -&amp;gt; unit).&lt;/li&gt;
&lt;li&gt;The message that is sent at the schedules time (&amp;lsquo;a).&lt;/li&gt;
&lt;li&gt;A TimeSpan which is the initial length of time to wait before first triggering the schedule function.&lt;/li&gt;
&lt;li&gt;A TimeSpan which is used as an interval between each subsequent triggering of the schedule function.&lt;/li&gt;
&lt;li&gt;An AsyncReplyChannel&lt;CancellationTokenSource&gt;(CancellationTokenSource AsyncReplyChannel).  This is used to return a CancellationTokenSource which can be used to cancel the Schedule.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;scheduleragent-1&#34;&gt;SchedulerAgent&lt;/h2&gt;

&lt;h3 id=&#34;scheduleonce-1&#34;&gt;scheduleOnce&lt;/h3&gt;

&lt;p&gt;Lines &lt;strong&gt;16-20&lt;/strong&gt; define an async workflow, which asynchronously sleeps for the specified time before checking that the schedule hasn&amp;rsquo;t been cancelled before finally calling the schedule function.&lt;/p&gt;

&lt;h3 id=&#34;schedulemany&#34;&gt;scheduleMany&lt;/h3&gt;

&lt;p&gt;Lines &lt;strong&gt;22-29&lt;/strong&gt; define a recursive async workflow, which asynchronously sleeps for the specified interval (&lt;em&gt;3rd Parameter&lt;/em&gt;) before checking the schedule hasn&amp;rsquo;t been cancelled before finally calling the schedule function. The &lt;strong&gt;loop&lt;/strong&gt; function is then called passing in the second TimeSpan interval &lt;em&gt;(4th Parameter)&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;scheduler&#34;&gt;scheduler&lt;/h3&gt;

&lt;p&gt;This is the main processing loop for the agent.  A recursive &lt;strong&gt;loop&lt;/strong&gt; function
is declared on line &lt;strong&gt;32&lt;/strong&gt;.  On line &lt;strong&gt;33&lt;/strong&gt; the agent waits for a message
to arrive.  Once a message arrives a &lt;strong&gt;CancellationTokenSource&lt;/strong&gt; is created on
line &lt;strong&gt;36&lt;/strong&gt; which can be used to cancel an already scheduled message.
Pattern matching is used on line &lt;strong&gt;35&lt;/strong&gt; to find the type of message that has
been received.  The first pattern matching block on lines &lt;strong&gt;36-43&lt;/strong&gt; matches
the &lt;strong&gt;Schedule&lt;/strong&gt; message.  The parameters from the Schedule message are passed
into the &lt;strong&gt;scheduleMany&lt;/strong&gt; function.  This is then invoked asynchronously via
the &lt;strong&gt;Async.StartImmediate&lt;/strong&gt; function.  The CancellationTokenSource is now
returned to the caller on line &lt;strong&gt;43&lt;/strong&gt;. This allows the caller to cancel an
already running schedule.   Finally the recursive &lt;strong&gt;loop&lt;/strong&gt; function is called
on line &lt;strong&gt;44&lt;/strong&gt;.  The second pattern matching block on lines &lt;strong&gt;45-52&lt;/strong&gt; is much
the same passing the parameters from the &lt;strong&gt;ScheduleOnce&lt;/strong&gt; message into the
&lt;strong&gt;scheduleOnce&lt;/strong&gt; function, again this is invoked via the
&lt;strong&gt;Async.StartImmediate&lt;/strong&gt; function.  Like the Schedule message the
CancellationTokenSource returned on line &lt;strong&gt;51&lt;/strong&gt; and the recursive &lt;strong&gt;loop&lt;/strong&gt;
function is called on line &lt;strong&gt;52&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The agent is then started on line &lt;strong&gt;51&lt;/strong&gt; by calling the &lt;strong&gt;loop&lt;/strong&gt; function for the first time.&lt;/p&gt;

&lt;h3 id=&#34;members&#34;&gt;Members&lt;/h3&gt;

&lt;p&gt;The SchedulerAgent has only a single member &lt;strong&gt;Schedule&lt;/strong&gt;.  This member
function takes three parameters and an optional parameter &lt;strong&gt;delayBetween&lt;/strong&gt;.  A
function called &lt;strong&gt;buildMessage&lt;/strong&gt; on line &lt;strong&gt;59&lt;/strong&gt; uses the optional parameter
with pattern matching to determine whether a &lt;strong&gt;ScheduleOnce&lt;/strong&gt; or a
&lt;strong&gt;Schedule&lt;/strong&gt; message is created.  The agent is posted the correct message type
on line &lt;strong&gt;63&lt;/strong&gt; using the synchronous call scheduler.PostAndReply.  We use a
synchronous call to return the cancellationTokenSource immediately, and this
can be used to cancel a running schedule.&lt;/p&gt;

&lt;h2 id=&#34;sample-application&#34;&gt;Sample Application&lt;/h2&gt;

&lt;p&gt;Shows a test harness that creates and uses a simple string based message scheduler:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;    open AgentUtilities
    open System
    open System.Threading  
    let scheduler = SchedulerAgent&amp;lt;_&amp;gt;()
    let printer message =
      printfn &amp;quot;%s: %s&amp;quot; (DateTime.Now.TimeOfDay.ToString()) message  
    let singlecancel = scheduler.Schedule(printer,
                        &amp;quot;Hello from the scheduler&amp;quot;,
                        TimeSpan(0,0,0,5))  
    let multicancel = scheduler.Schedule( printer,
                        &amp;quot;Hello from the multi scheduler&amp;quot;,
                        TimeSpan(0,0,0,5),
                        TimeSpan(0,0,0,0,500))  
    printfn &amp;quot;Press any key to cancel.&amp;quot;
    Console.ReadKey() |&amp;gt; ignore  
    //Cancel the multi scheduler
    multicancel.Cancel()
    printfn &amp;quot;Cancelled, press any key to exit.&amp;quot;
    Console.ReadKey() |&amp;gt; ignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope this gives you a feel for what you can do with agent based scheduling.
The library here could be expanded further in several ways.  You could replace
the fixed message with a message generator function or even an agent based
message generator.  If the schedule function was abstracted somewhat it could
be made to accept an agent as the receiver.&lt;/p&gt;

&lt;p&gt;One of the key areas I am looking at is building a distributed agent library
that would allow an agent to communicate over network layers transparently.  A
scheduler agent would be even more powerful in this environment.  I could
envisage them used for a many different things in this environment:  heart
beat messages, performance sampling, diagnostics and testing.&lt;/p&gt;

&lt;p&gt;Until next time&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title> Agents and ObjectPools</title>
      <link>http://7sharpnine.com/2011/06/05/2011-06-05-agents-and-objectpools/</link>
      <pubDate>Sun, 05 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2011/06/05/2011-06-05-agents-and-objectpools/</guid>
      <description>&lt;p&gt;Everyone knows F# agents are cool right?  Well here&amp;rsquo;s yet another example of how versatile they can be&amp;hellip;&lt;/p&gt;

&lt;p&gt;There was a series of posts last April by Stephen Toub from the &lt;a href=&#34;http://blogs.msdn.com/b/pfxteam/&#34;&gt;pfxteam&lt;/a&gt; at Microsoft.  I was reading
through some of the posts again the other day and thought some of the ideas presented there would make interesting projects in F# to demonstrate the
flexibility and succinctness of the language.  I thought the &lt;a href=&#34;http://blogs.msdn.com/b/pfxteam/archive/2010/04/13/9990427.aspx&#34;&gt;ObjectPool&lt;/a&gt;
example would make an interesting project in F# using agents aka MailboxProcessors.  An ObjectPool is basically a pool of objects that have been
pre-created so that you can grab one and use it, and then place it back in the pool when you&amp;rsquo;re finished.  They are useful in situations where the cost of
creating object from scratch is very high or you want to cut down on allocations in the garbage collector.&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;First of all heres the C# code as it was presented in the Parallel Extensions download:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Collections.Generic;
using System.Diagnostics;  
namespace System.Collections.Concurrent
{
  /// &amp;lt;summary&amp;gt;Provides a thread-safe object pool.&amp;lt;/summary&amp;gt;
  /// &amp;lt;typeparam name=&amp;quot;T&amp;quot;&amp;gt;Specifies the type of the elements stored in the pool.&amp;lt;/typeparam&amp;gt;
  [DebuggerDisplay(&amp;quot;Count={Count}&amp;quot;)]
  [DebuggerTypeProxy(typeof(IProducerConsumerCollection_DebugView&amp;lt;&amp;gt;))]
  public sealed class ObjectPool&amp;lt;T&amp;gt; : ProducerConsumerCollectionBase&amp;lt;T&amp;gt;
  {
    private readonly Func&amp;lt;T&amp;gt; _generator;  
    /// &amp;lt;summary&amp;gt;Initializes an instance of the ObjectPool class.&amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;generator&amp;quot;&amp;gt;The function used to create items when no items exist in the pool.&amp;lt;/param&amp;gt;
    public ObjectPool(Func&amp;lt;T&amp;gt; generator) : this(generator, new ConcurrentQueue&amp;lt;T&amp;gt;()) { }  
    /// &amp;lt;summary&amp;gt;Initializes an instance of the ObjectPool class.&amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;generator&amp;quot;&amp;gt;The function used to create items when no items exist in the pool.&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;collection&amp;quot;&amp;gt;The collection used to store the elements of the pool.&amp;lt;/param&amp;gt;
    public ObjectPool(Func&amp;lt;T&amp;gt; generator, IProducerConsumerCollection&amp;lt;T&amp;gt; collection)
      : base(collection)
    {
      if (generator == null) throw new ArgumentNullException(&amp;quot;generator&amp;quot;);
      _generator = generator;
    }  
    /// &amp;lt;summary&amp;gt;Adds the provided item into the pool.&amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;item&amp;quot;&amp;gt;The item to be added.&amp;lt;/param&amp;gt;
    public void PutObject(T item) { base.TryAdd(item); }  
    /// &amp;lt;summary&amp;gt;Gets an item from the pool.&amp;lt;/summary&amp;gt;
    /// &amp;lt;returns&amp;gt;The removed or created item.&amp;lt;/returns&amp;gt;
    /// &amp;lt;remarks&amp;gt;If the pool is empty, a new item will be created and returned.&amp;lt;/remarks&amp;gt;
    public T GetObject()
    {
      T value;
      return base.TryTake(out value) ? value : _generator();
    }  
    /// &amp;lt;summary&amp;gt;Clears the object pool, returning all of the data that was in the pool.&amp;lt;/summary&amp;gt;
    /// &amp;lt;returns&amp;gt;An array containing all of the elements in the pool.&amp;lt;/returns&amp;gt;
    public T[] ToArrayAndClear()
    {
      var items = new List&amp;lt;T&amp;gt;();
      T value;
      while (base.TryTake(out value)) items.Add(value);
      return items.ToArray();
    }  
    protected override bool TryAdd(T item)
    {
      PutObject(item);
      return true;
    }  
    protected override bool TryTake(out T item)
    {
      item = GetObject();
      return true;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s also a base class which looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/// &amp;lt;summary&amp;gt;
/// Provides a base implementation for producer-consumer collections that wrap other
/// producer-consumer collections.
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;typeparam name=&amp;quot;T&amp;quot;&amp;gt;Specifies the type of elements in the collection.&amp;lt;/typeparam&amp;gt;
[Serializable]
public abstract class ProducerConsumerCollectionBase&amp;lt;T&amp;gt; : IProducerConsumerCollection&amp;lt;T&amp;gt;
{
private readonly IProducerConsumerCollection&amp;lt;T&amp;gt; _contained;  
/// &amp;lt;summary&amp;gt;Initializes the ProducerConsumerCollectionBase instance.&amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;contained&amp;quot;&amp;gt;The collection to be wrapped by this instance.&amp;lt;/param&amp;gt;
protected ProducerConsumerCollectionBase(IProducerConsumerCollection&amp;lt;T&amp;gt; contained)
{
  if (contained == null) throw new ArgumentNullException(&amp;quot;contained&amp;quot;);
  _contained = contained;
}  
/// &amp;lt;summary&amp;gt;Gets the contained collection.&amp;lt;/summary&amp;gt;
protected IProducerConsumerCollection&amp;lt;T&amp;gt; ContainedCollection { get { return _contained; } }  
/// &amp;lt;summary&amp;gt;Attempts to add the specified value to the end of the deque.&amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;item&amp;quot;&amp;gt;The item to add.&amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;true if the item could be added; otherwise, false.&amp;lt;/returns&amp;gt;
protected virtual bool TryAdd(T item) { return _contained.TryAdd(item); }  
/// &amp;lt;summary&amp;gt;Attempts to remove and return an item from the collection.&amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;item&amp;quot;&amp;gt;
/// When this method returns, if the operation was successful, item contains the item removed. If
/// no item was available to be removed, the value is unspecified.
/// &amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;
/// true if an element was removed and returned from the collection; otherwise, false.
/// &amp;lt;/returns&amp;gt;
protected virtual bool TryTake(out T item) { return _contained.TryTake(out item); }  
/// &amp;lt;summary&amp;gt;Attempts to add the specified value to the end of the deque.&amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;item&amp;quot;&amp;gt;The item to add.&amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;true if the item could be added; otherwise, false.&amp;lt;/returns&amp;gt;
bool IProducerConsumerCollection&amp;lt;T&amp;gt;.TryAdd(T item) { return TryAdd(item); }  
/// &amp;lt;summary&amp;gt;Attempts to remove and return an item from the collection.&amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;item&amp;quot;&amp;gt;
/// When this method returns, if the operation was successful, item contains the item removed. If
/// no item was available to be removed, the value is unspecified.
/// &amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;
/// true if an element was removed and returned from the collection; otherwise, false.
/// &amp;lt;/returns&amp;gt;
bool IProducerConsumerCollection&amp;lt;T&amp;gt;.TryTake(out T item) { return TryTake(out item); }  
/// &amp;lt;summary&amp;gt;Gets the number of elements contained in the collection.&amp;lt;/summary&amp;gt;
public int Count { get { return _contained.Count; } }  
/// &amp;lt;summary&amp;gt;Creates an array containing the contents of the collection.&amp;lt;/summary&amp;gt;
/// &amp;lt;returns&amp;gt;The array.&amp;lt;/returns&amp;gt;
public T[] ToArray() { return _contained.ToArray(); }  
/// &amp;lt;summary&amp;gt;Copies the contents of the collection to an array.&amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;array&amp;quot;&amp;gt;The array to which the data should be copied.&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&amp;quot;index&amp;quot;&amp;gt;The starting index at which data should be copied.&amp;lt;/param&amp;gt;
public void CopyTo(T[] array, int index) { _contained.CopyTo(array, index); }  
/// &amp;lt;summary&amp;gt;Copies the contents of the collection to an array.&amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;array&amp;quot;&amp;gt;The array to which the data should be copied.&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&amp;quot;index&amp;quot;&amp;gt;The starting index at which data should be copied.&amp;lt;/param&amp;gt;
void ICollection.CopyTo(Array array, int index) { _contained.CopyTo(array, index); }  
/// &amp;lt;summary&amp;gt;Gets an enumerator for the collection.&amp;lt;/summary&amp;gt;
/// &amp;lt;returns&amp;gt;An enumerator.&amp;lt;/returns&amp;gt;
public IEnumerator&amp;lt;T&amp;gt; GetEnumerator() { return _contained.GetEnumerator(); }  
/// &amp;lt;summary&amp;gt;Gets an enumerator for the collection.&amp;lt;/summary&amp;gt;
/// &amp;lt;returns&amp;gt;An enumerator.&amp;lt;/returns&amp;gt;
IEnumerator IEnumerable.GetEnumerator() { return GetEnumerator(); }  
/// &amp;lt;summary&amp;gt;Gets whether the collection is synchronized.&amp;lt;/summary&amp;gt;
bool ICollection.IsSynchronized { get { return _contained.IsSynchronized; } }  
/// &amp;lt;summary&amp;gt;Gets the synchronization root object for the collection.&amp;lt;/summary&amp;gt;
object ICollection.SyncRoot { get { return _contained.SyncRoot; } }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Wow!&lt;/strong&gt;  Thats a fair bit of code in C#, fair enough there is a lot of noise in the xml doc comments, but theres also a lot of boiler plate code in there too.&lt;/p&gt;

&lt;p&gt;Ok now we have gotten that out of the way heres the good bit.  &lt;/p&gt;

&lt;p&gt;Below is an agent based design which implements the same functionality but uses a lot less code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module Poc

//Agent alias for MailboxProcessor
type Agent&amp;lt;&#39;T&amp;gt; = MailboxProcessor&amp;lt;&#39;T&amp;gt;
 
///One of three messages for our Object Pool agent
type PoolMessage&amp;lt;&#39;a&amp;gt; =
  | Get of AsyncReplyChannel&amp;lt;&#39;a&amp;gt;
  | Put of &#39;a * AsyncReplyChannel&amp;lt;unit&amp;gt;
  | Clear of AsyncReplyChannel&amp;lt;List&amp;lt;&#39;a&amp;gt;&amp;gt;
 
/// Object pool representing a reusable pool of objects
type ObjectPool&amp;lt;&#39;a&amp;gt;(generate: unit -&amp;gt; &#39;a, initialPoolCount) =
  let initial = List.init initialPoolCount (fun (x) -&amp;gt; generate())
  let agent = Agent.Start(fun inbox -&amp;gt;
    let rec loop(x) = async {
      let! msg = inbox.Receive()
      match msg with
      | Get(reply) -&amp;gt;
        let res = match x with
              | a :: b -&amp;gt;
                reply.Reply(a);b
              | [] as empty-&amp;gt;
                reply.Reply(generate());empty
        return! loop(res)
      | Put(value, reply)-&amp;gt;
        reply.Reply()
        return! loop(value :: x)
      | Clear(reply) -&amp;gt;
        reply.Reply(x)
        return! loop(List.empty&amp;lt;&#39;a&amp;gt; )
    }
    loop(initial))  
  /// Clears the object pool, returning all of the data that was in the pool.
  member this.ToListAndClear() =
    agent.PostAndAsyncReply(Clear)
  /// Puts an item into the pool
  member this.Put(item) =
    agent.PostAndAsyncReply((fun ch -&amp;gt; Put(item, ch)))
  /// Gets an item from the pool or if there are none present use the generator
  member this.Get(item) =
    agent.PostAndAsyncReply(Get)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have a discriminated union (PoolMessage) which describes the messages that we are going to use with this agent, they are pretty straight forward to follow.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Get&lt;/strong&gt; simply returns either a stored item or generates a brand new one using the generator function which is passed into the ObjectPools constructor &lt;strong&gt;(generate: unit -&amp;gt; &amp;lsquo;a)&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Put&lt;/strong&gt; simply adds the item onto the internal list.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clear&lt;/strong&gt; simply returns the current pool and then clears it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The core processing all happens in the &lt;strong&gt;async{}&lt;/strong&gt; block, we simply wait for a message to arrive, then we pattern match on one of the messages either Get,Put, or Clear.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get&lt;/strong&gt; takes an item from the internal list if there are items present, otherwise it invokes the generator function and returns a newly generated object.&lt;/p&gt;

&lt;p&gt;For a &lt;strong&gt;Put&lt;/strong&gt; operation we use the cons &lt;strong&gt;(::)&lt;/strong&gt; operator to add the item onto the internal list via the recursive loop.&lt;/p&gt;

&lt;p&gt;For the &lt;strong&gt;Clear&lt;/strong&gt; operation we return the entire list then return an empty list to the recursive loop.&lt;/p&gt;

&lt;p&gt;I think you will agree this is a nice succinct example of the flexibility and elegance of agents and yet another reason to use F# for more server side
activities.  It&amp;rsquo;s not simply a language for the mathematical and finance orientated developers.&lt;/p&gt;

&lt;p&gt;For anyone interested all of the code should be in my &lt;a href=&#34;http://bit.ly/mDQyfH&#34;&gt;GitHub repository &lt;/a&gt;to download.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&#34;http://tomasp.net/&#34;&gt;Tomas Petricek&lt;/a&gt; for suggesting using the recursive loop to pass the list rather than using a ref cell and the (&lt;strong&gt;:=&lt;/strong&gt;) operator.&lt;/p&gt;

&lt;p&gt;Until next time&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>