<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Azure on 7sharp9</title>
    <link>http://7sharpnine.com/tags/azure/</link>
    <description>Recent content in Azure on 7sharp9</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Dave Thomas</copyright>
    <lastBuildDate>Sun, 05 May 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://7sharpnine.com/tags/azure/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>I node something (Bout You)</title>
      <link>http://7sharpnine.com/2013/05/05/2013-05-05-i-node-something/</link>
      <pubDate>Sun, 05 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2013/05/05/2013-05-05-i-node-something/</guid>
      <description>

&lt;h1 id=&#34;what-is-edge-js&#34;&gt;What is Edge.js?&lt;/h1&gt;


&lt;figure class=&#34;img-left sixth&#34;&gt;
    
        &lt;img src=&#34;http://nodejs.org/images/logos/nodejs-dark.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Unless you &lt;em&gt;live in a hole&lt;/em&gt; you have probably heard of &lt;a href=&#34;http://nodejs.org&#34;&gt;node.js&lt;/a&gt; so I&amp;rsquo;ll not bother to explain what it is or what it does.  An interesting project has come to light lately, namely &lt;a href=&#34;http://tjanczuk.github.io/edge/#/&#34;&gt;Edge.js&lt;/a&gt;.  The Edge.js project allows you to connect node.js with .Net.&lt;/p&gt;

&lt;p&gt;The creator of Edge.js Tomasz Janczuk sums this up nicely:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An edge connects two nodes&lt;br /&gt;
This edge connects node.js with .NET&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Currently Edge.js is only available on Windows but there is work underway to bring this to Mono, thus opening up the possibilities even further.  &lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;The coding model for Edge.js offers different integration options depending on the quantity of code you are writing, and whether you want to call a .Net dll directly.&lt;/p&gt;

&lt;p&gt;Here are a few examples:&lt;/p&gt;

&lt;h2 id=&#34;single-line-lambda-expressions&#34;&gt;Single line lambda expressions:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var edge = require(&#39;edge&#39;);
var hello = edge.func(
    &#39;async (input) =&amp;gt; { return &amp;quot;.NET welcomes &amp;quot; + input.ToString(); }&#39;
);

hello(&#39;Node.js&#39;, function (error, result) {
    if (error) throw error;
    console.log(result);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;multi-line-lambda-expressions&#34;&gt;Multi line lambda expressions:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var hello = require(&#39;edge&#39;).func(function () {/*
    async (input) =&amp;gt; {
        return &amp;quot;.NET welcomes &amp;quot; + input.ToString(); 
    }
*/});

hello(&#39;Node.js&#39;, function (error, result) { ... });
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;file-based-expresions&#34;&gt;File based expresions:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var hello = require(&#39;edge&#39;).func(&#39;hello.csx&#39;);

hello(&#39;Node.js&#39;, function (error, result) { ... });
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;invoking-via-a-dll&#34;&gt;Invoking via a dll:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var add7 = require(&#39;edge&#39;).func(&#39;My.Sample.dll&#39;);

add7(12, function (error, result) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The entry point into your .NET code is a delegate normalized to a &lt;code&gt;Func&amp;lt;object,Task&amp;lt;object&amp;gt;&amp;gt;&lt;/code&gt;. This allows node.js code to call the .NET code asynchronously and avoid blocking the node.js event loop.  If you think about the possibilities of this for a moment, a lot of different options begin to open up with this framework.  I can foresee a lot of interesting things appearing in the future.&lt;/p&gt;

&lt;p&gt;There are currently two .Net compilers part of Edge.js.  A C# based compiler and an &lt;a href=&#34;http://ironpython.net&#34;&gt;IronPython&lt;/a&gt; one.  You can probably guess what I&amp;rsquo;m going say next&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;introducing-edge-fs-an-f-complier-for-edge-js&#34;&gt;Introducing Edge-fs - An F# complier for edge.js&lt;/h1&gt;

&lt;p&gt;First let&amp;rsquo;s look at the interop model for Edge.js:&lt;br /&gt;

&lt;figure class=&#34;6u&#34;&gt;
    &lt;a href=&#34;http://tjanczuk.github.io/edge/#/4&#34;&gt;
        &lt;img src=&#34;https://f.cloud.github.com/assets/822369/234085/b305625c-8768-11e2-8de0-e03ae98e7249.PNG&#34; /&gt;
    &lt;/a&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;In summary, if we want to integrate with Edge.js then we must coerce whatever input that is passed to a single delegate function &lt;code&gt;Func&amp;lt;Object, Task&amp;lt;Object&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In terms of the C# Edge compiler a lambda expression is passed in the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/vstudio/hh191443.aspx&#34;&gt;async await&lt;/a&gt; style:-&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;async (input) =&amp;gt; { return &amp;quot;.NET welcomes &amp;quot; + input.ToString(); }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Python Edge compiler is passed a lambda in it&amp;rsquo;s native format too:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def hello(input):
        return &amp;quot;Python welcomes &amp;quot; + input

    lambda x: hello(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So where does that leave us with F# compiler support?  Well, I suppose the most intuitive support for F# would be to use F# async workflow support.  This would mean the that lambda expression would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;fun input -&amp;gt; async{return &amp;quot;.NET welcomes &amp;quot; + input.ToString()}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see it&amp;rsquo;s not that different from C#&amp;rsquo;s&amp;rsquo; async await style syntax, you can really see the F# async workflow heritage here.&lt;/p&gt;

&lt;h2 id=&#34;script-example&#34;&gt;Script Example&lt;/h2&gt;

&lt;p&gt;Now lets look at how a script file or dll and have a look to see how this would fits:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;namespace global
type Startup() =
    let addSeven v =  v + 7
    member x.Invoke(input:obj) =
        let v = input :?&amp;gt; int
        async.Return (addSeven v :&amp;gt; obj) |&amp;gt; Async.StartAsTask
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is really easy too, the Async module has a StartAsTask function that perfectly fits here.&lt;/p&gt;

&lt;p&gt;By default Edge.js looks for a type in the global namespace called &lt;code&gt;Startup&lt;/code&gt; with a public method called &lt;code&gt;Invoke&lt;/code&gt;.  The invoke method takes a single parameter &lt;code&gt;input&lt;/code&gt; which is of the type &lt;code&gt;Object&lt;/code&gt;.  The return type of this method is as you might have guessed &lt;code&gt;Task&amp;lt;Object&amp;gt;&lt;/code&gt;.  You can also add parameters to the node.js to indicate the location of the assembly, type and method name using the &lt;code&gt;assemblyName&lt;/code&gt;, &lt;code&gt;typeName&lt;/code&gt; and &lt;code&gt;methodName&lt;/code&gt; parameters respectively.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var clrMethod = edge.func({
    assemblyFile: &#39;My.Edge.Samples.dll&#39;,
    typeName: &#39;Samples.FooBar.MyType&#39;,
    methodName: &#39;MyMethod&#39;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;further-documentation&#34;&gt;Further Documentation&lt;/h2&gt;

&lt;p&gt;Edge.js has some really good &lt;a href=&#34;https://github.com/tjanczuk/edge&#34;&gt;documentation&lt;/a&gt; so if your interested then you really should check it out.  I plan on supporting all of the calling conventions that the C# edge compiler has to offer.  At the moment only the in-line lambdas and the file based inputs have been tested, but I&amp;rsquo;m working on further examples, and fixes as needed.&lt;/p&gt;

&lt;h2 id=&#34;why-do-you-need-a-custom-compiler&#34;&gt;Why do you need a Custom Compiler&lt;/h2&gt;

&lt;p&gt;As an aside, with dll based inputs any .Net language would work with Edge.js, you don&amp;rsquo;t need a custom compiler.  The internals of Edge.js invoke your dll via reflection.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Handle&amp;lt;v8::Value&amp;gt; ClrFunc::Initialize(const v8::Arguments&amp;amp; args)
{
    ...
    // reference .NET code through pre-compiled CLR assembly 
    String::Utf8Value assemblyFile(jsassemblyFile);
    String::Utf8Value nativeTypeName(options-&amp;gt;Get(String::NewSymbol(&amp;quot;typeName&amp;quot;)));
    String::Utf8Value nativeMethodName(options-&amp;gt;Get(String::NewSymbol(&amp;quot;methodName&amp;quot;)));  
    typeName = gcnew System::String(*nativeTypeName);
    methodName = gcnew System::String(*nativeMethodName);      
    assembly = Assembly::LoadFrom(gcnew System::String(*assemblyFile));
    ClrFuncReflectionWrap^ wrap = ClrFuncReflectionWrap::Create(assembly, typeName, methodName);
    result = ClrFunc::Initialize(
        gcnew System::Func&amp;lt;System::Object^,Task&amp;lt;System::Object^&amp;gt;^&amp;gt;(
            wrap, &amp;amp;ClrFuncReflectionWrap::Call));
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A custom compiler is only required for compiling code in the form of scripts or lambda expressions.  It&amp;rsquo;s expected that this will be a common use case so it&amp;rsquo;s important to have a native F# compiler support.&lt;/p&gt;

&lt;p&gt;So there we have it, a very quick whistle stop tour of &lt;strong&gt;Edge-fs&lt;/strong&gt; the F# compiler for Edge.js.  I realise that this post only just skims the surface but I just wanted to get this out in the wild.  Ill be updating my &lt;a href=&#34;https://github.com/7sharp9/edge-fs&#34;&gt;repo&lt;/a&gt; over the next day or so, and a stable release will go out via the &lt;a href=&#34;https://npmjs.org&#34;&gt;npm package&lt;/a&gt; as soon as things stabilise.&lt;/p&gt;

&lt;p&gt;Next time we&amp;rsquo;re going to lift the lid on the F# Edge compiler and take a look at it&amp;rsquo;s guts, we&amp;rsquo;ll also go through some of the trials and tribulations I had along the way.  Ill also continue the series with some more documentation and samples too.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

&lt;hr style=&#34;margin: 1em 0&#34;&gt;
&lt;h1 id=&#34;essential-listening&#34;&gt;Essential listening:&lt;/h1&gt;


&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/4/43/Alice_In_Chains-Facelift.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Alice In Chains - Facelift&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Alice In Chains - Facelift&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/1/12/PanteraVulgarDisplayofPower.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Pantera - Vulgar Display Of Power&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Pantera - Vulgar Display Of Power&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;




</description>
    </item>
    
  </channel>
</rss>