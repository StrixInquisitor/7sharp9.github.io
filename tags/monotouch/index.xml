<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Monotouch on 7sharp9</title>
    <link>http://7sharpnine.com/tags/monotouch/</link>
    <description>Recent content in Monotouch on 7sharp9</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Dave Thomas</copyright>
    <lastBuildDate>Thu, 07 Feb 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://7sharpnine.com/tags/monotouch/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MonoTouch and F# part II</title>
      <link>http://7sharpnine.com/2013/02/07/2013-02-04-monotouch-and-fsharp-part-ii/</link>
      <pubDate>Thu, 07 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2013/02/07/2013-02-04-monotouch-and-fsharp-part-ii/</guid>
      <description>

&lt;p&gt;In the last post we left at the point where everything was running fine and dandy on the Simulator.  So what happens if we compile for the real hardware?&lt;/p&gt;

&lt;p&gt;Lets change the active configuration to &lt;code&gt;Debug|iPhone&lt;/code&gt; and hit build, what do we get?&lt;!-- more --&gt;&lt;/p&gt;

&lt;h3 id=&#34;boom&#34;&gt;Boom!&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Error MT2002: Could not resolve: FSharp.Core, Version=4.3.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a (MT2002) (singleview)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So I guess we need to tell it where the FSharp.Core.dll is, lets add a reference to it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/Libraries/FrameWorks/Mono.FrameWork/Libraries/mono/Microsoft F#/v4.0/Fsharp.Core.dll
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now try and build &amp;hellip; another weird error:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;unknown-file(1,1): Error FS2020: The assembly &amp;lsquo;F#/v4.0/FSharp.Core.dll&amp;rsquo; is listed on the command line. Assemblies should be referenced using a command line flag such as &amp;lsquo;-r&amp;rsquo;. (FS2020) (singleview)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hmmm, lets look in the F# compiler source, were going to have to break out the big guns for this one.&lt;/p&gt;

&lt;p&gt;What we need to do is look at the different targets that are available.  I remember seeing different targets when I was nosing through the source files a while ago.  Also if you look at the &lt;code&gt;readme.md&lt;/code&gt; file that comes with the open source compiler:&lt;/p&gt;

&lt;p&gt;You can also build FSharp.Core for: .NET 2.0, Mono 2.1, Silverlight 5.0, Portable Profile47 (net4+sl4+wp71+win8) and XNA 4.0 for Xbox 360 profiles:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msbuild fsharp-library-build.proj /p:TargetFramework=net20 
msbuild fsharp-library-build.proj /p:TargetFramework=mono21
msbuild fsharp-library-build.proj /p:TargetFramework=portable-net4+sl4+wp71+win8
msbuild fsharp-library-build.proj /p:TargetFramework=sl5
msbuild fsharp-library-build.proj /p:TargetFramework=net40-xna40-xbox360
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So lets build the &lt;code&gt;mono21&lt;/code&gt; target with &lt;code&gt;xbuild&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xbuild fsharp-library-build.proj /p:TargetFramework=mono21
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that&amp;rsquo;s build lets reference the output and see what happens:&lt;/p&gt;

&lt;p&gt;Arrgh another error this time relating the the version of the framework that we have compiled against.&lt;/p&gt;

&lt;p&gt;If you read the documentation for &lt;a href=&#34;http://xamarin.com/monotouch&#34;&gt;MonoTouch&lt;/a&gt; in a little more detail you will discover that a different mscorlib is required.  We need to modify this in the build script:&lt;/p&gt;

&lt;p&gt;Open up &lt;code&gt;FSharp.Source.Targets&lt;/code&gt; and find the &lt;code&gt;&amp;lt;PropertyGroup Condition=&amp;quot;&#39;$(TargetFramework)&#39;==&#39;mono21&#39;&amp;quot;&amp;gt;&lt;/code&gt; section, add the following after the &lt;code&gt;&amp;lt;DefineConstants&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;OtherFlags&amp;gt;$(OtherFlags) --simpleresolution -r:&amp;quot;/Developer/MonoTouch/usr/lib/mono/2.1/mscorlib-runtime.dll&amp;quot;  &amp;lt;/OtherFlags&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Right, fingers crossed&amp;hellip;&lt;/p&gt;

&lt;p&gt;Sigh, another error:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Error MT2002: Can not resolve reference: System.Reflection.Emit.AssemblyBuilder (MT2002) (singleview)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Were getting closer though.&lt;/p&gt;

&lt;p&gt;Lets look at the &lt;code&gt;&amp;lt;DefineConstants/&amp;gt;&lt;/code&gt; that are declared in the build file, if you have a quick look you will notice that there is one called &lt;code&gt;FX_NO_REFLECTION_EMIT&lt;/code&gt; that&amp;rsquo;s what we need so that &lt;code&gt;Reflection.Emit&lt;/code&gt; is not included.  MonoTouch does not support &lt;code&gt;Reflection.Emit&lt;/code&gt; due to the meta data not being available once the code have been compiled with the &lt;a href=&#34;http://www.mono-project.com/AOT&#34;&gt;AOT compiler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lets add that constant to the end of the rest:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;DefineConstants&amp;gt;$(DefineConstants);FX_NO_REFLECTION_EMIT&amp;lt;/DefineConstants&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we rebuild &lt;code&gt;Fsharp.Core&lt;/code&gt; again with &lt;code&gt;xbuild&lt;/code&gt; and rebind the reference in our test project&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;wow-it-works&#34;&gt;Wow it works!&lt;/h3&gt;

&lt;p&gt;You should now have a working hello world application that can be deployed and run on real hardware.&lt;/p&gt;

&lt;h2 id=&#34;final-words&#34;&gt;Final Words&lt;/h2&gt;

&lt;p&gt;As this is just a documented hackathon I have mainly brain dumped what I remembered doing after the fact, so some steps may be slightly different.  As soon as time permits Ill be adding a couple of project templates to the &lt;a href=&#34;https://github.com/fsharp/fsharpbinding&#34;&gt;FSharpBinding&lt;/a&gt; to allow building F# MonoTouch libraries and applications.&lt;/p&gt;

&lt;p&gt;I also have some ideas for dealing with the UI and tooling with &lt;a href=&#34;https://developer.apple.com/technologies/tools/&#34;&gt;Xcode&lt;/a&gt; but Ill need a little time to investigate to see if it&amp;rsquo;s a viable option&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;hr style=&#34;margin: 1em 0&#34;&gt;
&lt;h1 id=&#34;essential-listening&#34;&gt;Essential listening:&lt;/h1&gt;


&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/4/44/Soilscars.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Soil - Scars&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Soil - Scars&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/e/e9/AlbinoSlug.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Buckethead - Albino Slug&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Buckethead - Albino Slug&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;



&lt;br /&gt;
Until next time!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MonoTouch and F# part I</title>
      <link>http://7sharpnine.com/2013/02/03/2013-02-03-monotouch-and-fsharp-part-i/</link>
      <pubDate>Sun, 03 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2013/02/03/2013-02-03-monotouch-and-fsharp-part-i/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://xamarin.com/monotouch&#34;&gt;MonoTouch&lt;/a&gt; and F# that would be a cool duo right?&lt;/p&gt;

&lt;p&gt;Well let me explain what needs to be done and why to get this pair working together.&lt;/p&gt;

&lt;p&gt;I heard rumours a while ago that F# and &lt;a href=&#34;http://xamarin.com/monotouch&#34;&gt;MonoTouch&lt;/a&gt; would not play together nicely because of &lt;a href=&#34;http://docs.xamarin.com/ios/about/limitations&#34;&gt;limitations&lt;/a&gt; in the ahead of time compilation &lt;a href=&#34;http://www.mono-project.com/AOT&#34;&gt;(AOT)&lt;/a&gt;.  So I thought I would either prove or disprove this with some concentrated hacking.  How hard can it be?&lt;/p&gt;

&lt;p&gt;As my good friend and colleague Dr. Kewin would quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“No problem can withstand the assault of sustained thinking.”—Voltaire&lt;!-- more --&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;These are the same as MonoTouch, I&amp;rsquo;m using a Mac and MonoDevelop at the moment.  You would need a Mac anyway to be able to do the compile and deploy to an iOS device.  &lt;a href=&#34;https://developer.apple.com/technologies/tools/&#34;&gt;Xcode&lt;/a&gt; with an Apple profile and certificates are required for code signing etc.&lt;/p&gt;

&lt;h2 id=&#34;first-steps&#34;&gt;First steps&lt;/h2&gt;

&lt;p&gt;So how do we tackle this?&lt;/p&gt;

&lt;p&gt;First lets look at the &lt;strong&gt;C# Single View&lt;/strong&gt; MonoTouch project file (&lt;code&gt;.csproj&lt;/code&gt;) up to the end of the first PropertyGroup:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;Project DefaultTargets=&amp;quot;Build&amp;quot; ToolsVersion=&amp;quot;4.0&amp;quot; xmlns=&amp;quot;http://schemas.microsoft.com/developer/msbuild/2003&amp;quot;&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;Configuration Condition=&amp;quot; &#39;$(Configuration)&#39; == &#39;&#39; &amp;quot;&amp;gt;Debug&amp;lt;/Configuration&amp;gt;
    &amp;lt;Platform Condition=&amp;quot; &#39;$(Platform)&#39; == &#39;&#39; &amp;quot;&amp;gt;iPhoneSimulator&amp;lt;/Platform&amp;gt;
    &amp;lt;ProductVersion&amp;gt;10.0.0&amp;lt;/ProductVersion&amp;gt;
    &amp;lt;SchemaVersion&amp;gt;2.0&amp;lt;/SchemaVersion&amp;gt;
    &amp;lt;ProjectGuid&amp;gt;{822346B5-6805-42FD-9B6A-65446A688E63}&amp;lt;/ProjectGuid&amp;gt;
    &amp;lt;ProjectTypeGuids&amp;gt;{6BC8ED88-2882-458C-8E55-DFD12B67127B};
                      {FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}&amp;lt;/ProjectTypeGuids&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;RootNamespace&amp;gt;HelloWorld&amp;lt;/RootNamespace&amp;gt;
    &amp;lt;AssemblyName&amp;gt;HelloWorld&amp;lt;/AssemblyName&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The bits we are interested in are the &lt;strong&gt;ProjectTypeGuids&lt;/strong&gt;.  Visual Studio/MonoDevelop projects use these guid&amp;rsquo;s to identify the type of the project.  If you do a bit of Googling &lt;em&gt;(or Binging&amp;hellip;)&lt;/em&gt; you would find that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;6BC8ED88-2882-458C-8E55-DFD12B67127B&lt;/strong&gt;  is a MonoTouch project type guid&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FAE04EC0-301F-11D3-BF4B-00C04F79EFBC&lt;/strong&gt;  is a C# project type guid&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The F# project type guid is &lt;strong&gt;F2A71F9B-5D33-465A-A702-920D77279786&lt;/strong&gt;.  We can now replace &lt;strong&gt;FAE04EC0-301F-11D3-BF4B-00C04F79EFBC&lt;/strong&gt; with the F# one.  For a comprehensive list of project type guid&amp;rsquo;s have a look at &lt;a href=&#34;http://workblog.pilin.name/2012/11/visual-studio-project-type-guids.html&#34;&gt;Mikhail Pilin&amp;rsquo;s blog&lt;/a&gt;.  Next scroll down to the bottom of the project file and update the  &lt;Import Project=&#34;$(MSBuildBinPath)\Microsoft.CSharp.targets&#34; /&gt; to &lt;Import Project=&#34;$(MSBuildExtensionsPath32)\..\Microsoft F#\v4.0\Microsoft.FSharp.Targets&#34; /&gt;.  the final step on the project file is to change the project file extension from &lt;code&gt;.csproj&lt;/code&gt; to &lt;code&gt;.fsproj&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The last of the tweaking is to open up the &lt;code&gt;.sln&lt;/code&gt; file and make a slight change to that too:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Microsoft Visual Studio Solution File, Format Version 11.00
# Visual Studio 2010
Project(&amp;quot;{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}&amp;quot;) = &amp;quot;singleview&amp;quot;, &amp;quot;singleview\singleview.fsproj&amp;quot;, &amp;quot;{4465399C-4EE8-4F60-AD9A-EB9AEDD1C5BF}&amp;quot;
EndProject
Global
...snip...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modify the  Project sections Guid &lt;strong&gt;FAE04EC0-301F-11D3-BF4B-00C04F79EFBC&lt;/strong&gt; to the F# project type Guid &lt;strong&gt;4925A630-B079-445d-BCD4-3A9C94FE9307&lt;/strong&gt;.  If you forget this step then MonoDevelop will get really confused and try to compile the F# project with the C# compiler.&lt;/p&gt;

&lt;h2 id=&#34;code-changes&#34;&gt;Code Changes&lt;/h2&gt;

&lt;p&gt;For the sake of simplicity I&amp;rsquo;m going to port the C# code verbatim showing the C# code first then the F# code.  The easiest way would probably be to change all the  C# files to have the &lt;code&gt;.fs&lt;/code&gt; extension and edit them in place, remembering to also update the entries in the &lt;code&gt;.fsproj&lt;/code&gt; file too this only takes a second to do.&lt;/p&gt;

&lt;p&gt;I know what you are going to say: &amp;ldquo;Why didn&amp;rsquo;t you just create a nice project template for us all to use?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I am, I am, patience!&lt;/p&gt;

&lt;p&gt;A number of people wanted to know what I did to get things going so this is my documented &amp;lsquo;hack-a-thon&amp;rsquo; if you like.  The project template will be along shortly.  Lets move along to the code changes.&lt;/p&gt;

&lt;h2 id=&#34;viewcontroller&#34;&gt;ViewController&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Drawing;
using MonoTouch.Foundation;
using MonoTouch.UIKit;

namespace singleview
{
	public partial class singleviewViewController : UIViewController
	{
		public singleviewViewController () : base (&amp;quot;singleviewViewController&amp;quot;, null)
		{
		}
		
		public override void DidReceiveMemoryWarning ()
		{
			// Releases the view if it doesn&#39;t have a superview.
			base.DidReceiveMemoryWarning ();
			// Release any cached data, images, etc that aren&#39;t in use.
		}
		
		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			// Perform any additional setup after loading the view, typically from a nib.
		}
		
		public override void ViewDidUnload ()
		{
			base.ViewDidUnload ();
			// Clear any references to subviews of the main view in order to
			// allow the Garbage Collector to collect them sooner.
			// e.g. myOutlet.Dispose (); myOutlet = null;
			ReleaseDesignerOutlets ();
		}
		
		public override bool ShouldAutorotateToInterfaceOrientation (UIInterfaceOrientation toInterfaceOrientation)
		{
			// Return true for supported orientations
			return (toInterfaceOrientation != UIInterfaceOrientation.PortraitUpsideDown);
		}
	}
}

// This file has been generated automatically by MonoDevelop to store outlets and
// actions made in the Xcode designer. If it is removed, they will be lost.
// Manual changes to this file may not be handled correctly.
using MonoTouch.Foundation;

namespace singleview
{
	[Register (&amp;quot;singleviewViewController&amp;quot;)]
	partial class singleviewViewController
	{
		void ReleaseDesignerOutlets ()
		{
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;namespace Singleview

open System
open System.Drawing
open MonoTouch.Foundation
open MonoTouch.UIKit

[&amp;lt;Register (&amp;quot;singleviewViewController&amp;quot;)&amp;gt;]
type singleviewViewController() =
    inherit UIViewController(&amp;quot;singleviewViewController&amp;quot;, null)
        
    let ReleaseDesignerOutlets() = ( (* No outlets to release  *))

    override x.DidReceiveMemoryWarning() =
    // Releases the view if it doesn&#39;t have a superview.
        base.DidReceiveMemoryWarning();
        // Release any cached data, images, etc that aren&#39;t in use.

    override x.ViewDidLoad() =
        base.ViewDidLoad()
        // Perform any additional setup after loading the view, typically from a nib.

    override x.ViewDidUnload() =
        base.ViewDidUnload()
        // Clear any references to subviews of the main view in order to
        // allow the Garbage Collector to collect them sooner.
        // e.g. myOutlet.Dispose (); myOutlet = null;
        ReleaseDesignerOutlets()

    override x.ShouldAutorotateToInterfaceOrientation(toInterfaceOrientation) =
        // Return true for supported orientations
        toInterfaceOrientation &amp;lt;&amp;gt; UIInterfaceOrientation.PortraitUpsideDown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On looking at this section you will notice that there is no partial class in the F# version, that&amp;rsquo;s because F# doesn&amp;rsquo;t have any notion of partial classes.  In this simple project we don&amp;rsquo;t actually have any interaction with the UI so designer interaction is a moot point at the moment.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.fsproj&lt;/code&gt; file still needs to be edited to remove the nested partial class that is present in the C# version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   &amp;lt;Compile Include=&amp;quot;singleviewViewController.designer.cs&amp;quot;&amp;gt;
      &amp;lt;DependentUpon&amp;gt;singleviewViewController.cs&amp;lt;/DependentUpon&amp;gt;
    &amp;lt;/Compile&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simply remove the &lt;code&gt;DependUpon&lt;/code&gt; element and just use the name &lt;code&gt;singleviewViewController.fs&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Compile&amp;gt;singleviewViewController.fs/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The lack of partial classes in F# makes the tooling available for UI designer a pain to integrate tightly into F# without a bit of work work &lt;em&gt;(I have some ideas on that that I&amp;rsquo;m currently experimenting with that Ill return to after finishing this article)&lt;/em&gt;.  Currently MonoTouch uses the Xcodes interface designer to build the UI which is stored in a xib file.  This is simply a file describing the user interface and its interaction points.  The Properties of the UI are called &lt;code&gt;Outlets&lt;/code&gt; and events spawned from the UI are called &lt;code&gt;Actions&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;appdelegate&#34;&gt;AppDelegate&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using System.Linq;
using MonoTouch.Foundation;
using MonoTouch.UIKit;

namespace singleview
{
	// The UIApplicationDelegate for the application. This class is responsible for launching the 
	// User Interface of the application, as well as listening (and optionally responding) to 
	// application events from iOS.
	[Register (&amp;quot;AppDelegate&amp;quot;)]
	public partial class AppDelegate : UIApplicationDelegate
	{
		// class-level declarations
		UIWindow window;
		singleviewViewController viewController;

		// This method is invoked when the application has loaded and is ready to run. In this 
		// method you should instantiate the window, load the UI into it and then make the window visible.
		// You have 17 seconds to return from this method, or iOS will terminate your application.
		public override bool FinishedLaunching (UIApplication app, NSDictionary options)
		{
			window = new UIWindow (UIScreen.MainScreen.Bounds);
			
			viewController = new singleviewViewController ();
			window.RootViewController = viewController;
			window.MakeKeyAndVisible ();
			
			return true;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;namespace Singleview
open System
open System.Collections.Generic
open MonoTouch.Foundation
open MonoTouch.UIKit

// The UIApplicationDelegate for the application. This class is responsible for launching the 
// User Interface of the application, as well as listening (and optionally responding) to application events from iOS.
[&amp;lt;Register (&amp;quot;AppDelegate&amp;quot;)&amp;gt;]
type AppDelegate() =
    inherit UIApplicationDelegate()
    
    let mutable window = Unchecked.defaultof&amp;lt;_&amp;gt;
    let mutable viewController = Unchecked.defaultof&amp;lt;_&amp;gt;

    // This method is invoked when the application has loaded and is ready to run. In this 
    // method you should instantiate the window, load the UI into it and then make the window visible.
    // You have 17 seconds to return from this method, or iOS will terminate your application.
    override x.FinishedLaunching ( app: UIApplication,  options: NSDictionary) =
        window &amp;lt;- new UIWindow(UIScreen.MainScreen.Bounds)
        viewController &amp;lt;- new singleviewViewController()
        window.RootViewController &amp;lt;- viewController
        window.MakeKeyAndVisible()
        true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code is pretty similar between the two implementations, with the F# version omitting the type annotations, semicolons and curly braces.  The other area to notice is that the &lt;code&gt;mutable&lt;/code&gt; variable declarations for the &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;viewController&lt;/code&gt; bindings.  The C# implementation defaults to mutable variables whereas F# defaults to the safer immutable ones.&lt;/p&gt;

&lt;h2 id=&#34;program-main&#34;&gt;Program/main&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using System.Linq;
using MonoTouch.Foundation;
using MonoTouch.UIKit;

namespace singleview
{
	public class Application
	{
		// This is the main entry point of the application.
		static void Main (string[] args)
		{
			// if you want to use a different Application Delegate class from &amp;quot;AppDelegate&amp;quot;
			// you can specify it here.
			UIApplication.Main (args, null, &amp;quot;AppDelegate&amp;quot;);
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module main
open System
open System.Collections.Generic
open MonoTouch.Foundation
open MonoTouch.UIKit

    [&amp;lt;EntryPoint&amp;gt;]
    let main( args) = 
        UIApplication.Main (args, null, &amp;quot;AppDelegate&amp;quot;)
        0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main thing you will notice is that the F# code is terser, again dropping the type annotations, semicolons and curly braces.  Oh, I also called the entry point main.  To be precise it&amp;rsquo;s a function called main in a module named main, there&amp;rsquo;s no need to create a class or type for this.&lt;/p&gt;

&lt;h2 id=&#34;the-xib-file&#34;&gt;The Xib file&lt;/h2&gt;

&lt;p&gt;In C# MonoToch projects the &lt;code&gt;xib&lt;/code&gt; file is compiled and embedded for you as part of the build process, unfortunately this is not currently possible in F# so we have to do it manually.  In an ideal world this would all be done by the F# project at build time and this is something that I&amp;rsquo;m working on too.  In the mean time we have to do it manually so open up your trusty friend the &lt;code&gt;Terminal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to split the command line into separate parts due to its size:&lt;/p&gt;

&lt;p&gt;First of all we invoke the &lt;code&gt;ibtool&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/Applications/Xcode.app/Contents/Developer/usr/bin/ibtool --errors --warnings --notices --output-format human-readable-text --compile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Followed by name of the &lt;code&gt;.nib&lt;/code&gt; file you want to compile to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;/yourPath/singleviewViewController.nib&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The path of the &lt;code&gt;.xib&lt;/code&gt; you want to compile from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;/yourPath/singleviewViewController.xib&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally the sdk that you want to use for compilation, in this instance it is The iPhoneSimulator6.0.sdk as we are targetting the simulator:
    &amp;ndash;sdk &amp;ldquo;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.0.sdk&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Once you have compiled to a &lt;code&gt;.nib&lt;/code&gt; file include it in the project, set the build action to &lt;code&gt;Content&lt;/code&gt;.  You can still include the &lt;code&gt;.xib&lt;/code&gt; version within the project if you want but you would have to set the build action to &lt;code&gt;None&lt;/code&gt;.  Currently the F# binding does not support the build action of &lt;code&gt;Interface Definition&lt;/code&gt; if it did then we probably wouldn&amp;rsquo;t have to go through the manual compilation process either.&lt;/p&gt;

&lt;p&gt;That ought to do it, everything should now work on the simulator.  If you try to compile to a real phone then everything will quickly come grinding to a halt but Ill explain all of that next time and how to resolve it too.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

&lt;hr style=&#34;margin: 1em 0&#34;&gt;
&lt;h1 id=&#34;essential-listening&#34;&gt;Essential listening:&lt;/h1&gt;


&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/5/5f/MegadethThirteen.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Megadeth - TH1RT3EN&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Megadeth - TH1RT3EN&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/7/7a/Worship_Music.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Anthrax - Worship Music&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Anthrax - Worship Music&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;




</description>
    </item>
    
  </channel>
</rss>