<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Objc on 7sharp9</title>
    <link>http://7sharpnine.com/tags/objc/</link>
    <description>Recent content in Objc on 7sharp9</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Dave Thomas</copyright>
    <lastBuildDate>Sun, 01 Jun 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://7sharpnine.com/tags/objc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Anything you can do ...</title>
      <link>http://7sharpnine.com/2014/06/01/2014-06-01-anything-you-can-do/</link>
      <pubDate>Sun, 01 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://7sharpnine.com/2014/06/01/2014-06-01-anything-you-can-do/</guid>
      <description>&lt;p&gt;For any of you that are aware of the newly updated Xamarin Web site, you may have seen the &lt;a href=&#34;https://xamarin.com/platform&#34;&gt;following&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Objective-C was ahead of its time 30 years ago.
C# is ahead of its time today.
Anything you can do in Objective-C or Java, you can do in C# with Xamarinâ€”usually more succinctly and with fewer bugs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What is also true is that F# is way ahead of its time, and you can produce even more succinct code with even fewer bugs than C#!&lt;br /&gt;
&lt;!-- more --&gt;
Take the code snippets from that page.&lt;/p&gt;

&lt;p&gt;First up the Objective C version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface Person : NSObject
@property (strong, nonatomic) NSString *name;
@end

@implementation Person
- (id)initWithName:(NSString *)name {
    self = [super init];
    if (self) {
        self.name = name;
    }
    return self;
}

+ (NSArray *)getNames
{
    NSArray *people = @[
      [[Person alloc] initWithName:@&amp;quot;David&amp;quot;],
      [[Person alloc] initWithName:@&amp;quot;Vinicius&amp;quot;],
      [[Person alloc] initWithName:@&amp;quot;Serena&amp;quot;],
    ];
    NSMutableArray *names = [NSMutableArray array];
    for (Person *person in people) {
        [names addObject:person.name];
    }
    return names;
}
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Heres the C# version:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Person : NSObject {
  public string Name { get; set; }
  
  public static string[] GetNames() {
    var people = new[] {
        new Person { Name=&amp;quot;David&amp;quot; },
        new Person { Name=&amp;quot;Vinicius&amp;quot; },
        new Person { Name=&amp;quot;Serena&amp;quot; },
    };
    return people.Select(person =&amp;gt; person.Name).ToArray();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally the F# version:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type Person() =
   inherit NSObject()
   member val Name = &amp;quot;&amp;quot; with get, set
   static member GetNames() =
      [| new Person(Name=&amp;quot;David&amp;quot;)
         new Person(Name=&amp;quot;Vinicius&amp;quot;)
         new Person(Name=&amp;quot;Serena&amp;quot;) |]
      |&amp;gt; Array.map(fun person -&amp;gt; person.Name)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the F# version is doing exactly the same, although we are using the &lt;code&gt;map&lt;/code&gt; function from the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ee370273.aspx&#34;&gt;&lt;code&gt;Array&lt;/code&gt; module&lt;/a&gt; rather than the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb397926.aspx&#34;&gt;Linq&lt;/a&gt; &lt;code&gt;Select&lt;/code&gt; extension method.&lt;/p&gt;

&lt;p&gt;Its not all about the lines of code though, using F# gives you all many advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using the type system to make sure the code is behaving how you expect before you even compile.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-gb/library/dd547125.aspx&#34;&gt;Pattern matching&lt;/a&gt; in F# is amazing!  It can vastly simplify complex control logic, add Active patterns to that and you are ready to take on the world!&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Problems are approached from a functional perspective which often leads to succinct functions that are easy to reason about, test, and compose.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;F# emphasizes immutability and functional composition rather than inheritance, again this boils down to simplicity.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Features like &lt;a href=&#34;http://msdn.microsoft.com/en-gb/library/hh156509.aspx&#34;&gt;Type providers&lt;/a&gt; can vastly simplify how you deal with data within your application, making access to data really easy and intuitive.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Theres are many areas that F# can really help productivity during development.  I hope to write a few more short posts to really bring attention to these.  I use F# all the time and often forget how awesome it is until I go back to another language thats missing those features.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

&lt;hr style=&#34;margin: 1em 0&#34;&gt;
&lt;h1 id=&#34;essential-listening&#34;&gt;Essential listening:&lt;/h1&gt;


&lt;div class=&#34;pure-g&#34;&gt;

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/a/a6/Sr_independent.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Sacred Reich - Independent&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Sacred Reich - Independent&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

  
  
  
  
  &lt;div class=&#34;&#34;&gt;
    &lt;div style=&#34;width: 20%; float: left;padding: 0 .2em .2em 0&#34;&gt;
        &lt;figure style=&#34;margin: 0&#34;&gt;
            &lt;img src=&#34;http://upload.wikimedia.org/wikipedia/en/4/46/For_Whose_Advantage.jpg&#34; style=&#34;margin: 0&#34;
                 alt=&#34;Xentrix - For Whose Advantage&#34; /&gt;
            &lt;figcaption&gt;
                &lt;h6&gt;Xentrix - For Whose Advantage&lt;/h4&gt;
            &lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  

&lt;/div&gt;




</description>
    </item>
    
  </channel>
</rss>