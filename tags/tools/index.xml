<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on 7sharp9</title>
    <link>http://7sharp9.github.io/tags/tools/</link>
    <description>Recent content in Tools on 7sharp9</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Dave Thomas</copyright>
    <lastBuildDate>Wed, 28 May 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://7sharp9.github.io/tags/tools/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Xamarin 3 F# Awesomeness</title>
      <link>http://7sharp9.github.io/2014/05/28/2014-05-28-xamarin-3-fsharp-awsomeness/</link>
      <pubDate>Wed, 28 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2014/05/28/2014-05-28-xamarin-3-fsharp-awsomeness/</guid>
      <description>With the release of Xamarin 3 there is a swathe of new features to the platform, but obviously the most important one is obviously F# support is now included by default in Xamarin Studio so there is no escape from the awesomeness of F#!
So what else have we got, well loads of other goodies too like Xamarin Designer for iOS, Xamarin.Forms, Major IDE enhancements, Improved code sharing with PCL and Shared projects, and BCL Documentation.</description>
    </item>
    
    <item>
      <title>Danger unstable structure - No more!</title>
      <link>http://7sharp9.github.io/2014/02/10/2014-02-10-danger-unstable-structure/</link>
      <pubDate>Mon, 10 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2014/02/10/2014-02-10-danger-unstable-structure/</guid>
      <description>Over the last year a lot of work has been done on the F# addin for Xamarin Studio. Lots of great new features have been added and a lot of bugs have been squashed. I want to talk a bit about whats been happening and the evolution of the F# addin.
The F# addin for MonoDevelop / Xamarin Studio hasn&amp;rsquo;t always been as stable and pretty as it is now.</description>
    </item>
    
    <item>
      <title>MonoTouch and F# part II</title>
      <link>http://7sharp9.github.io/2013/02/07/2013-02-04-monotouch-and-fsharp-part-ii/</link>
      <pubDate>Thu, 07 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2013/02/07/2013-02-04-monotouch-and-fsharp-part-ii/</guid>
      <description>In the last post we left at the point where everything was running fine and dandy on the Simulator. So what happens if we compile for the real hardware?
Lets change the active configuration to Debug|iPhone and hit build, what do we get?Boom! Error MT2002: Could not resolve: FSharp.Core, Version=4.3.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a (MT2002) (singleview)
So I guess we need to tell it where the FSharp.Core.dll is, lets add a reference to it:</description>
    </item>
    
    <item>
      <title>MonoTouch and F# part I</title>
      <link>http://7sharp9.github.io/2013/02/03/2013-02-03-monotouch-and-fsharp-part-i/</link>
      <pubDate>Sun, 03 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2013/02/03/2013-02-03-monotouch-and-fsharp-part-i/</guid>
      <description>MonoTouch and F# that would be a cool duo right?
Well let me explain what needs to be done and why to get this pair working together.
I heard rumours a while ago that F# and MonoTouch would not play together nicely because of limitations in the ahead of time compilation (AOT). So I thought I would either prove or disprove this with some concentrated hacking. How hard can it be?</description>
    </item>
    
    <item>
      <title>MonoGame subdivision and platonics</title>
      <link>http://7sharp9.github.io/2013/01/04/2013-01-04-monogame-subdivision-and-platonics/</link>
      <pubDate>Fri, 04 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2013/01/04/2013-01-04-monogame-subdivision-and-platonics/</guid>
      <description>I&amp;rsquo;ve been on a bit of a break from my normal jovial self due to a shit storm of bad stuff happening that I wont go into here, but hopefully this years going to be awesome. Anyway, here&amp;rsquo;s the next exciting installment in my series on MonoGame. (Well I find it exciting anyway :-) )
If you remember back to the last post I mentioned the platonic solids, and we created and rendered the tetrahedron, lets recap on what the five solids are:</description>
    </item>
    
    <item>
      <title>MonoGame 3D basics</title>
      <link>http://7sharp9.github.io/2012/11/25/2012-11-25-monogame-3d-basics/</link>
      <pubDate>Sun, 25 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2012/11/25/2012-11-25-monogame-3d-basics/</guid>
      <description>This time we are going to get into a little bit of code and produce the simplest of all 3d solids, the tetrahedron. I know its not the most exciting of things but we have to start somewhere. The scope of 3D graphics in computers is so vast that its very easy to get lost in the vast piles of research papers.First lets do some basic setup, if you followed my last post then you will will have a project template to use, this makes this a little easier.</description>
    </item>
    
    <item>
      <title>F# and MonoGame on the Mac</title>
      <link>http://7sharp9.github.io/2012/11/11/2012-11-11-fsharp-and-monogame-on-the-mac/</link>
      <pubDate>Sun, 11 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2012/11/11/2012-11-11-fsharp-and-monogame-on-the-mac/</guid>
      <description>What we are going to do in this post is take a whistle stop tour of getting MonoGame up and running along with a simple demo in F#. Over the last few days I have been building an F# project template for MonoDevelop, this post will also how to get that installed too. First of all I&amp;rsquo;m going to assume that you have the following installed:
 Mono 3.0 beta MonoDevelop MonoDevelop F# language binding  If you don&amp;rsquo;t have a look at my previous post that explains all that, if you don&amp;rsquo;t want to build the F# binding from source then you can use the Add-in Manager.</description>
    </item>
    
    <item>
      <title>F# 3.0 In The Mac And Mono World</title>
      <link>http://7sharp9.github.io/2012/11/03/2012-11-03-fsharp-3-in-the-mac-and-mono-world/</link>
      <pubDate>Sat, 03 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2012/11/03/2012-11-03-fsharp-3-in-the-mac-and-mono-world/</guid>
      <description>So what have I been up to lately? Well, lots of different things. I have been taking it easy on the open source and blogging side of things as its been a hectic time of late in my personal life. This seems to be changing now so I&amp;rsquo;m starting to get all of the ideas spinning around in my head into physical reality, or virtual reality, or what ever you want to call it.</description>
    </item>
    
    <item>
      <title>Whats in your toolbox?</title>
      <link>http://7sharp9.github.io/2012/08/27/2012-08-23-whats-in-your-toolbox/</link>
      <pubDate>Mon, 27 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://7sharp9.github.io/2012/08/27/2012-08-23-whats-in-your-toolbox/</guid>
      <description>If I walk into my garage now and open up a toolbox, whats inside?
Here&amp;rsquo;s a quick selection:
 Ball-peen hammer Jointer plane 1&amp;frasl;2 inch mortise chisel Soldering iron Set square Low angle block plane Torx screw drivers Hack saw Monkey wrench Pipe cutter  Notice it doesn&amp;rsquo;t just contain:
 A sledge hammer.  Different tools have different purposes, you wouldn&amp;rsquo;t use a hammer and try to cut down a tree, or use a chisel to hammer a nail.</description>
    </item>
    
  </channel>
</rss>